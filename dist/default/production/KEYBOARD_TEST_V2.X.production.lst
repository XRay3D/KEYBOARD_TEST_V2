

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Fri Jul 15 11:03:17 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F8720
     2                           	fnconf	param1,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    47                           	psect	param1,global,class=BANK1,space=1,delta=1
    48  0000                     
    49                           	psect	idataBANK0
    50  011FA2                     __pidataBANK0:
    51                           	opt stack 0
    52                           
    53                           ;initializer for _Data
    54  011FA2  08                 	db	8
    55  011FA3  2E                 	db	46
    56  011FA4  08                 	db	8
    57  011FA5  2E                 	db	46
    58  011FA6  08                 	db	8
    59  011FA7  2E                 	db	46
    60  011FA8  08                 	db	8
    61  011FA9  2E                 	db	46
    62                           
    63                           ;initializer for UpdatePins@LastPin
    64  011FAA  FF63               	dw	_Pin& (0+65535)
    65                           
    66                           	psect	mediumconst
    67  00FECA                     __pmediumconst:
    68                           	opt stack 0
    69  00FECA  00                 	db	0
    70  00FECB                     __npowers_:
    71                           	opt stack 0
    72  00FECB  0000               	dw	0
    73  00FECD  3F80               	dw	16256
    74  00FECF  CCCD               	dw	52429
    75  00FED1  3DCC               	dw	15820
    76  00FED3  D70A               	dw	55050
    77  00FED5  3C23               	dw	15395
    78  00FED7  126F               	dw	4719
    79  00FED9  3A83               	dw	14979
    80  00FEDB  B717               	dw	46871
    81  00FEDD  38D1               	dw	14545
    82  00FEDF  C5AC               	dw	50604
    83  00FEE1  3727               	dw	14119
    84  00FEE3  37BD               	dw	14269
    85  00FEE5  3586               	dw	13702
    86  00FEE7  BF95               	dw	49045
    87  00FEE9  33D6               	dw	13270
    88  00FEEB  CC77               	dw	52343
    89  00FEED  322B               	dw	12843
    90  00FEEF  705F               	dw	28767
    91  00FEF1  3089               	dw	12425
    92  00FEF3  E6FF               	dw	59135
    93  00FEF5  2EDB               	dw	11995
    94  00FEF7  E508               	dw	58632
    95  00FEF9  1E3C               	dw	7740
    96  00FEFB  4260               	dw	16992
    97  00FEFD  0DA2               	dw	3490
    98  00FEFF                     __end_of__npowers_:
    99                           	opt stack 0
   100  00FEFF                     __powers_:
   101                           	opt stack 0
   102  00FEFF  0000               	dw	0
   103  00FF01  3F80               	dw	16256
   104  00FF03  0000               	dw	0
   105  00FF05  4120               	dw	16672
   106  00FF07  0000               	dw	0
   107  00FF09  42C8               	dw	17096
   108  00FF0B  0000               	dw	0
   109  00FF0D  447A               	dw	17530
   110  00FF0F  4000               	dw	16384
   111  00FF11  461C               	dw	17948
   112  00FF13  5000               	dw	20480
   113  00FF15  47C3               	dw	18371
   114  00FF17  2400               	dw	9216
   115  00FF19  4974               	dw	18804
   116  00FF1B  9680               	dw	38528
   117  00FF1D  4B18               	dw	19224
   118  00FF1F  BC20               	dw	48160
   119  00FF21  4CBE               	dw	19646
   120  00FF23  6B28               	dw	27432
   121  00FF25  4E6E               	dw	20078
   122  00FF27  02F9               	dw	761
   123  00FF29  5015               	dw	20501
   124  00FF2B  78EC               	dw	30956
   125  00FF2D  60AD               	dw	24749
   126  00FF2F  F2CA               	dw	62154
   127  00FF31  7149               	dw	29001
   128  00FF33                     __end_of__powers_:
   129                           	opt stack 0
   130  00FF33                     _AdcChArr:
   131                           	opt stack 0
   132  00FF33  00                 	db	0
   133  00FF34  01                 	db	1
   134  00FF35  04                 	db	4
   135  00FF36  05                 	db	5
   136  00FF37  06                 	db	6
   137  00FF38  07                 	db	7
   138  00FF39  08                 	db	8
   139  00FF3A  09                 	db	9
   140  00FF3B  0A                 	db	10
   141  00FF3C  0B                 	db	11
   142  00FF3D  0C                 	db	12
   143  00FF3E  0D                 	db	13
   144  00FF3F  0E                 	db	14
   145  00FF40  0F                 	db	15
   146  00FF41  10                 	db	16
   147  00FF42                     __end_of_AdcChArr:
   148                           	opt stack 0
   149  00FF42                     _GreenSeg:
   150                           	opt stack 0
   151  00FF42  3F                 	db	63
   152  00FF43  06                 	db	6
   153  00FF44  5B                 	db	91
   154  00FF45  4F                 	db	79
   155  00FF46  66                 	db	102
   156  00FF47  6D                 	db	109
   157  00FF48  7D                 	db	125
   158  00FF49  07                 	db	7
   159  00FF4A  7F                 	db	127
   160  00FF4B  6F                 	db	111
   161  00FF4C  40                 	db	64
   162  00FF4D  00                 	db	0
   163  00FF4E  79                 	db	121
   164  00FF4F  50                 	db	80
   165  00FF50                     __end_of_GreenSeg:
   166                           	opt stack 0
   167  00FF50                     _RedSeg:
   168                           	opt stack 0
   169  00FF50  3F                 	db	63
   170  00FF51  06                 	db	6
   171  00FF52  5B                 	db	91
   172  00FF53  4F                 	db	79
   173  00FF54  66                 	db	102
   174  00FF55  6D                 	db	109
   175  00FF56  7D                 	db	125
   176  00FF57  07                 	db	7
   177  00FF58  7F                 	db	127
   178  00FF59  6F                 	db	111
   179  00FF5A  40                 	db	64
   180  00FF5B  00                 	db	0
   181  00FF5C  79                 	db	121
   182  00FF5D  50                 	db	80
   183  00FF5E                     __end_of_RedSeg:
   184                           	opt stack 0
   185  00FF5E                     UpdateLedDisplay@F5284:
   186                           	opt stack 0
   187  00FF5E  10                 	db	16
   188  00FF5F  20                 	db	32
   189  00FF60  40                 	db	64
   190  00FF61  80                 	db	128
   191  00FF62  00                 	db	0
   192  00FF63                     __end_ofUpdateLedDisplay@F5284:
   193                           	opt stack 0
   194  00FF63                     _Pin:
   195                           	opt stack 0
   196  00FF63  0F92               	dw	3986	;volatile
   197  00FF65  0F80               	dw	3968	;volatile
   198  00FF67  01                 	db	1
   199  00FF68  00                 	db	0
   200  00FF69  0F92               	dw	3986	;volatile
   201  00FF6B  0F80               	dw	3968	;volatile
   202  00FF6D  02                 	db	2
   203  00FF6E  01                 	db	1
   204  00FF6F  0F92               	dw	3986	;volatile
   205  00FF71  0F80               	dw	3968	;volatile
   206  00FF73  20                 	db	32
   207  00FF74  04                 	db	4
   208  00FF75  0F97               	dw	3991	;volatile
   209  00FF77  0F85               	dw	3973	;volatile
   210  00FF79  01                 	db	1
   211  00FF7A  05                 	db	5
   212  00FF7B  0F97               	dw	3991	;volatile
   213  00FF7D  0F85               	dw	3973	;volatile
   214  00FF7F  02                 	db	2
   215  00FF80  06                 	db	6
   216  00FF81  0F97               	dw	3991	;volatile
   217  00FF83  0F85               	dw	3973	;volatile
   218  00FF85  04                 	db	4
   219  00FF86  07                 	db	7
   220  00FF87  0F97               	dw	3991	;volatile
   221  00FF89  0F85               	dw	3973	;volatile
   222  00FF8B  08                 	db	8
   223  00FF8C  08                 	db	8
   224  00FF8D  0F97               	dw	3991	;volatile
   225  00FF8F  0F85               	dw	3973	;volatile
   226  00FF91  10                 	db	16
   227  00FF92  09                 	db	9
   228  00FF93  0F97               	dw	3991	;volatile
   229  00FF95  0F85               	dw	3973	;volatile
   230  00FF97  20                 	db	32
   231  00FF98  0A                 	db	10
   232  00FF99  0F97               	dw	3991	;volatile
   233  00FF9B  0F85               	dw	3973	;volatile
   234  00FF9D  40                 	db	64
   235  00FF9E  0B                 	db	11
   236  00FF9F  0F99               	dw	3993	;volatile
   237  00FFA1  0F87               	dw	3975	;volatile
   238  00FFA3  10                 	db	16
   239  00FFA4  0C                 	db	12
   240  00FFA5  0F99               	dw	3993	;volatile
   241  00FFA7  0F87               	dw	3975	;volatile
   242  00FFA9  20                 	db	32
   243  00FFAA  0D                 	db	13
   244  00FFAB  0F99               	dw	3993	;volatile
   245  00FFAD  0F87               	dw	3975	;volatile
   246  00FFAF  40                 	db	64
   247  00FFB0  0E                 	db	14
   248  00FFB1  0F99               	dw	3993	;volatile
   249  00FFB3  0F87               	dw	3975	;volatile
   250  00FFB5  80                 	db	128
   251  00FFB6  0F                 	db	15
   252  00FFB7                     __end_of_Pin:
   253                           	opt stack 0
   254  00FFB7                     _dpowers:
   255                           	opt stack 0
   256  00FFB7  0001               	dw	1
   257  00FFB9  0000               	dw	0
   258  00FFBB  000A               	dw	10
   259  00FFBD  0000               	dw	0
   260  00FFBF  0064               	dw	100
   261  00FFC1  0000               	dw	0
   262  00FFC3  03E8               	dw	1000
   263  00FFC5  0000               	dw	0
   264  00FFC7  2710               	dw	10000
   265  00FFC9  0000               	dw	0
   266  00FFCB  86A0               	dw	34464
   267  00FFCD  0001               	dw	1
   268  00FFCF  4240               	dw	16960
   269  00FFD1  000F               	dw	15
   270  00FFD3  9680               	dw	38528
   271  00FFD5  0098               	dw	152
   272  00FFD7  E100               	dw	57600
   273  00FFD9  05F5               	dw	1525
   274  00FFDB  CA00               	dw	51712
   275  00FFDD  3B9A               	dw	15258
   276  00FFDF                     __end_of_dpowers:
   277                           	opt stack 0
   278  0000                     _ADRES	set	4035
   279  0000                     _ADCON0	set	4034
   280  0000                     _ADCON0bits	set	4034
   281  0000                     _ADCON1	set	4033
   282  0000                     _ADCON2	set	4032
   283  0000                     _IPR1bits	set	3999
   284  0000                     _IPR3bits	set	4005
   285  0000                     _PIE1bits	set	3997
   286  0000                     _PIE3bits	set	4003
   287  0000                     _PORTB	set	3969
   288  0000                     _PORTD	set	3971
   289  0000                     _PORTE	set	3972
   290  0000                     _PR4	set	3959
   291  0000                     _RCONbits	set	4048
   292  0000                     _RCREG1	set	4014
   293  0000                     _RCSTA1	set	4011
   294  0000                     _SPBRG1	set	4015
   295  0000                     _T1CON	set	4045
   296  0000                     _T2CON	set	4042
   297  0000                     _T2CONbits	set	4042
   298  0000                     _T4CONbits	set	3958
   299  0000                     _TMR2	set	4044
   300  0000                     _TMR4	set	3960
   301  0000                     _TRISB	set	3987
   302  0000                     _TRISD	set	3989
   303  0000                     _TRISE	set	3990
   304  0000                     _TXREG1	set	4013
   305  0000                     _TXSTA1	set	4012
   306  0000                     _ADIE	set	31982
   307  0000                     _ADIF	set	31990
   308  0000                     _CREN1	set	32092
   309  0000                     _GIE	set	32663
   310  0000                     _GO_DONE	set	32273
   311  0000                     _OERR1	set	32089
   312  0000                     _PEIE	set	32662
   313  0000                     _RC1IF	set	31989
   314  0000                     _TMR1IE	set	31976
   315  0000                     _TMR1IF	set	31984
   316  0000                     _TMR1ON	set	32360
   317  0000                     _TMR2IE	set	31977
   318  0000                     _TMR2IF	set	31985
   319  0000                     _TMR2ON	set	32338
   320  0000                     _TMR4IE	set	32027
   321  0000                     _TMR4IF	set	32035
   322  0000                     _TX1IF	set	31988
   323  0000                     _PORTA	set	3968
   324  0000                     _PORTF	set	3973
   325  0000                     _PORTH	set	3975
   326  0000                     _TRISA	set	3986
   327  0000                     _TRISF	set	3991
   328  0000                     _TRISH	set	3993
   329  00FFDF                     __stringdata:
   330                           	opt stack 0
   331  00FFDF                     STR_2:
   332  00FFDF  20                 	db	32
   333  00FFE0  20                 	db	32
   334  00FFE1  25                 	db	37
   335  00FFE2  2E                 	db	46
   336  00FFE3  31                 	db	49	;'1'
   337  00FFE4  66                 	db	102	;'f'
   338  00FFE5  00                 	db	0
   339  00FFE6                     STR_1:
   340  00FFE6  20                 	db	32
   341  00FFE7  20                 	db	32
   342  00FFE8  30                 	db	48	;'0'
   343  00FFE9  2E                 	db	46
   344  00FFEA  30                 	db	48	;'0'
   345  00FFEB  20                 	db	32
   346  00FFEC  00                 	db	0
   347  00FFED                     STR_6:
   348  00FFED  20                 	db	32
   349  00FFEE  20                 	db	32
   350  00FFEF  20                 	db	32
   351  00FFF0  20                 	db	32
   352  00FFF1  00                 	db	0
   353  00FFF2                     STR_7:
   354  00FFF2  45                 	db	69	;'E'
   355  00FFF3  31                 	db	49	;'1'
   356  00FFF4  00                 	db	0
   357  00FFF5                     STR_8:
   358  00FFF5  45                 	db	69	;'E'
   359  00FFF6  32                 	db	50	;'2'
   360  00FFF7  00                 	db	0
   361  00FFF8                     STR_9:
   362  00FFF8  45                 	db	69	;'E'
   363  00FFF9  33                 	db	51	;'3'
   364  00FFFA  00                 	db	0
   365  00FFFB                     STR_5:
   366  00FFFB  25                 	db	37
   367  00FFFC  75                 	db	117	;'u'
   368  00FFFD  00                 	db	0
   369  00FFFE                     __end_of__stringdata:
   370                           	opt stack 0
   371                           
   372                           ; #config settings
   373  00FFFE  00                 	db	0	; dummy byte at the end
   374  0000                     
   375                           	psect	cinit
   376  011E8C                     __pcinit:
   377                           	opt stack 0
   378  011E8C                     start_initialization:
   379                           	opt stack 0
   380  011E8C                     __initialization:
   381                           	opt stack 0
   382                           
   383                           ; Clear objects allocated to BANK0 (75 bytes)
   384  011E8C  EE00  F060         	lfsr	0,__pbssBANK0
   385  011E90  0E4B               	movlw	75
   386  011E92                     clear_0:
   387  011E92  6AEE               	clrf	postinc0,c
   388  011E94  06E8               	decf	wreg,f,c
   389  011E96  E1FD               	bnz	clear_0
   390                           
   391                           ; Initialize objects allocated to BANK0 (10 bytes)
   392                           ; load TBLPTR registers with __pidataBANK0
   393  011E98  0EA2               	movlw	low __pidataBANK0
   394  011E9A  6EF6               	movwf	tblptrl,c
   395  011E9C  0E1F               	movlw	high __pidataBANK0
   396  011E9E  6EF7               	movwf	tblptrh,c
   397  011EA0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
   398  011EA2  6EF8               	movwf	tblptru,c
   399  011EA4  EE00  F0E2         	lfsr	0,__pdataBANK0
   400  011EA8  EE10 F00A          	lfsr	1,10
   401  011EAC                     copy_data0:
   402  011EAC  0009               	tblrd		*+
   403  011EAE  CFF5 FFEE          	movff	tablat,postinc0
   404  011EB2  50E5               	movf	postdec1,w,c
   405  011EB4  50E1               	movf	fsr1l,w,c
   406  011EB6  E1FA               	bnz	copy_data0
   407  011EB8                     end_of_initialization:
   408                           	opt stack 0
   409  011EB8                     __end_of__initialization:
   410                           	opt stack 0
   411  011EB8  0100               	movlb	0
   412  011EBA  EF3F  F08E         	goto	_main	;jump to C main() function
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec1	equ	0xFE5
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	bssBANK0
   423  000060                     __pbssBANK0:
   424                           	opt stack 0
   425  000060                     _AdcMeasData:
   426                           	opt stack 0
   427  000060                     	ds	28
   428  00007C                     _AdcChData:
   429                           	opt stack 0
   430  00007C                     	ds	14
   431  00008A                     _Rez:
   432                           	opt stack 0
   433  00008A                     	ds	4
   434  00008E                     _Rez2:
   435                           	opt stack 0
   436  00008E                     	ds	4
   437  000092                     _U1:
   438                           	opt stack 0
   439  000092                     	ds	2
   440  000094                     _U2:
   441                           	opt stack 0
   442  000094                     	ds	2
   443  000096                     UpdateLedDisplay@CounterCatode:
   444                           	opt stack 0
   445  000096                     	ds	1
   446  000097                     UpdateLedDisplay@CounterDataPos:
   447                           	opt stack 0
   448  000097                     	ds	1
   449  000098                     UpdatePins@pin:
   450                           	opt stack 0
   451  000098                     	ds	1
   452  000099                     _AdcCh:
   453                           	opt stack 0
   454  000099                     	ds	1
   455  00009A                     _BlinkCounter:
   456                           	opt stack 0
   457  00009A                     	ds	1
   458  00009B                     _BtnPressed:
   459                           	opt stack 0
   460  00009B                     	ds	1
   461  00009C                     _Color:
   462                           	opt stack 0
   463  00009C                     	ds	1
   464  00009D                     _ErrCounterX:
   465                           	opt stack 0
   466  00009D                     	ds	1
   467  00009E                     _ErrCounterY:
   468                           	opt stack 0
   469  00009E                     	ds	1
   470  00009F                     _PresCounter:
   471                           	opt stack 0
   472  00009F                     	ds	1
   473  0000A0                     _i:
   474                           	opt stack 0
   475  0000A0                     	ds	1
   476  0000A1                     _Buf:
   477                           	opt stack 0
   478  0000A1                     	ds	10
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           postinc0	equ	0xFEE
   484                           wreg	equ	0xFE8
   485                           postdec1	equ	0xFE5
   486                           fsr1l	equ	0xFE1
   487                           
   488                           	psect	dataBANK0
   489  0000E2                     __pdataBANK0:
   490                           	opt stack 0
   491  0000E2                     _Data:
   492                           	opt stack 0
   493  0000E2                     	ds	8
   494  0000EA                     UpdatePins@LastPin:
   495                           	opt stack 0
   496  0000EA                     	ds	2
   497                           tblptru	equ	0xFF8
   498                           tblptrh	equ	0xFF7
   499                           tblptrl	equ	0xFF6
   500                           tablat	equ	0xFF5
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           postdec1	equ	0xFE5
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	cstackBANK1
   507  000100                     __pcstackBANK1:
   508                           	opt stack 0
   509  000100                     ??_UpdateLedDisplay:
   510                           
   511                           ; 0 bytes @ 0x0
   512  000100                     	ds	2
   513  000102                     UpdateLedDisplay@Pos:
   514                           	opt stack 0
   515                           
   516                           ; 5 bytes @ 0x2
   517  000102                     	ds	5
   518  000107                     UpdateLedDisplay@flag:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x7
   522  000107                     	ds	1
   523  000108                     ??_HISR:
   524                           
   525                           ; 0 bytes @ 0x8
   526  000108                     	ds	6
   527  00010E                     UpdateLedData@data:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0xE
   531  00010E                     	ds	2
   532  000110                     ??_UpdateLedData:
   533                           
   534                           ; 0 bytes @ 0x10
   535  000110                     	ds	2
   536  000112                     UpdateLedData@i:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x12
   540  000112                     	ds	1
   541  000113                     tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           postdec1	equ	0xFE5
   548                           fsr1l	equ	0xFE1
   549                           
   550                           ; 0 bytes @ 0x13
   551                           
   552                           	psect	cstackBANK0
   553  0000AB                     __pcstackBANK0:
   554                           	opt stack 0
   555  0000AB                     _sprintf$1215:
   556                           	opt stack 0
   557                           
   558                           ; 4 bytes @ 0x0
   559  0000AB                     	ds	4
   560  0000AF                     _sprintf$684:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x4
   564  0000AF                     	ds	4
   565  0000B3                     sprintf@vd:
   566                           	opt stack 0
   567                           
   568                           ; 4 bytes @ 0x8
   569  0000B3                     	ds	4
   570  0000B7                     sprintf@vd_686:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0xC
   574  0000B7                     	ds	4
   575  0000BB                     sprintf@ap:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x10
   579  0000BB                     	ds	1
   580  0000BC                     sprintf@flag:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x11
   584  0000BC                     	ds	2
   585  0000BE                     sprintf@integ:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x13
   589  0000BE                     	ds	4
   590  0000C2                     sprintf@_val:
   591                           	opt stack 0
   592                           
   593                           ; 5 bytes @ 0x17
   594  0000C2                     	ds	5
   595  0000C7                     sprintf@exp:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x1C
   599  0000C7                     	ds	2
   600  0000C9                     sprintf@prec:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x1E
   604  0000C9                     	ds	2
   605  0000CB                     sprintf@sp:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x20
   609  0000CB                     	ds	1
   610  0000CC                     sprintf@fval:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x21
   614  0000CC                     	ds	4
   615  0000D0                     sprintf@c:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x25
   619  0000D0                     	ds	1
   620  0000D1                     ??_LISR:
   621                           
   622                           ; 0 bytes @ 0x26
   623  0000D1                     	ds	17
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	cstackCOMRAM
   634  000001                     __pcstackCOMRAM:
   635                           	opt stack 0
   636  000001                     ??_isdigit:
   637  000001                     ??_UpdatePins:
   638  000001                     ?___wmul:
   639                           	opt stack 0
   640  000001                     ?___awmod:
   641                           	opt stack 0
   642  000001                     ?__tdiv_to_l_:
   643                           	opt stack 0
   644  000001                     ?__div_to_l_:
   645                           	opt stack 0
   646  000001                     ?___flpack:
   647                           	opt stack 0
   648  000001                     ?___lmul:
   649                           	opt stack 0
   650  000001                     ?___flneg:
   651                           	opt stack 0
   652  000001                     ?___lldiv:
   653                           	opt stack 0
   654  000001                     UpdateLedColor@color:
   655                           	opt stack 0
   656  000001                     ___lbmod@divisor:
   657                           	opt stack 0
   658  000001                     ___wmul@multiplier:
   659                           	opt stack 0
   660  000001                     ___awmod@dividend:
   661                           	opt stack 0
   662  000001                     i1UpdateLedData@data:
   663                           	opt stack 0
   664  000001                     ___lmul@multiplier:
   665                           	opt stack 0
   666  000001                     ___flpack@arg:
   667                           	opt stack 0
   668  000001                     __div_to_l_@f1:
   669                           	opt stack 0
   670  000001                     ___flge@ff1:
   671                           	opt stack 0
   672  000001                     ___flneg@f1:
   673                           	opt stack 0
   674  000001                     __tdiv_to_l_@f1:
   675                           	opt stack 0
   676  000001                     ___lldiv@dividend:
   677                           	opt stack 0
   678                           
   679                           ; 4 bytes @ 0x0
   680  000001                     	ds	1
   681  000002                     _isdigit$967:
   682                           	opt stack 0
   683  000002                     ___lbmod@dividend:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x1
   687  000002                     	ds	1
   688  000003                     ??i1_UpdateLedData:
   689  000003                     isdigit@c:
   690                           	opt stack 0
   691  000003                     ___lbmod@counter:
   692                           	opt stack 0
   693  000003                     ___wmul@multiplicand:
   694                           	opt stack 0
   695  000003                     ___awmod@divisor:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x2
   699  000003                     	ds	1
   700  000004                     UpdatePins@i:
   701                           	opt stack 0
   702  000004                     ___lbmod@rem:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x3
   706  000004                     	ds	1
   707  000005                     ___awmod@counter:
   708                           	opt stack 0
   709  000005                     ___flpack@exp:
   710                           	opt stack 0
   711  000005                     ___lbdiv@divisor:
   712                           	opt stack 0
   713  000005                     i1UpdateLedData@i:
   714                           	opt stack 0
   715  000005                     ___wmul@product:
   716                           	opt stack 0
   717  000005                     ___lmul@multiplicand:
   718                           	opt stack 0
   719  000005                     __div_to_l_@f2:
   720                           	opt stack 0
   721  000005                     ___flge@ff2:
   722                           	opt stack 0
   723  000005                     __tdiv_to_l_@f2:
   724                           	opt stack 0
   725  000005                     ___lldiv@divisor:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x4
   729  000005                     	ds	1
   730  000006                     ___awmod@sign:
   731                           	opt stack 0
   732  000006                     ___flpack@sign:
   733                           	opt stack 0
   734  000006                     ___lbdiv@dividend:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x5
   738  000006                     	ds	1
   739  000007                     ??___flpack:
   740  000007                     ?___awdiv:
   741                           	opt stack 0
   742  000007                     ___lbdiv@counter:
   743                           	opt stack 0
   744  000007                     ___awdiv@dividend:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x6
   748  000007                     	ds	1
   749  000008                     ___lbdiv@quotient:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x7
   753  000008                     	ds	1
   754  000009                     ??__tdiv_to_l_:
   755  000009                     ??__div_to_l_:
   756  000009                     ___awdiv@divisor:
   757                           	opt stack 0
   758  000009                     ___lmul@product:
   759                           	opt stack 0
   760  000009                     ___lldiv@quotient:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x8
   764  000009                     	ds	2
   765  00000B                     ?___lltofl:
   766                           	opt stack 0
   767  00000B                     ?___lwtofl:
   768                           	opt stack 0
   769  00000B                     ___awdiv@counter:
   770                           	opt stack 0
   771  00000B                     ___lwtofl@c:
   772                           	opt stack 0
   773  00000B                     ___lltofl@c:
   774                           	opt stack 0
   775                           
   776                           ; 4 bytes @ 0xA
   777  00000B                     	ds	1
   778  00000C                     ___awdiv@sign:
   779                           	opt stack 0
   780  00000C                     __tdiv_to_l_@quot:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0xB
   784  00000C                     	ds	1
   785  00000D                     ___lldiv@counter:
   786                           	opt stack 0
   787  00000D                     ___awdiv@quotient:
   788                           	opt stack 0
   789  00000D                     __div_to_l_@quot:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0xC
   793  00000D                     	ds	1
   794  00000E                     ?___llmod:
   795                           	opt stack 0
   796  00000E                     ___llmod@dividend:
   797                           	opt stack 0
   798                           
   799                           ; 4 bytes @ 0xD
   800  00000E                     	ds	1
   801  00000F                     ?___fldiv:
   802                           	opt stack 0
   803  00000F                     ?___flmul:
   804                           	opt stack 0
   805  00000F                     ___fldiv@f1:
   806                           	opt stack 0
   807  00000F                     ___flmul@f1:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0xE
   811  00000F                     	ds	1
   812  000010                     __tdiv_to_l_@cntr:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0xF
   816  000010                     	ds	1
   817  000011                     __div_to_l_@cntr:
   818                           	opt stack 0
   819  000011                     __tdiv_to_l_@exp1:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x10
   823  000011                     	ds	1
   824  000012                     __div_to_l_@exp1:
   825                           	opt stack 0
   826  000012                     ___llmod@divisor:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x11
   830  000012                     	ds	1
   831  000013                     ___fldiv@f2:
   832                           	opt stack 0
   833  000013                     ___flmul@f2:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x12
   837  000013                     	ds	3
   838  000016                     ___llmod@counter:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x15
   842  000016                     	ds	1
   843  000017                     ??___fldiv:
   844  000017                     ??___flmul:
   845                           
   846                           ; 0 bytes @ 0x16
   847  000017                     	ds	4
   848  00001B                     ___flmul@exp:
   849                           	opt stack 0
   850  00001B                     ___fldiv@f3:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x1A
   854  00001B                     	ds	1
   855  00001C                     ___flmul@f3_as_product:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0x1B
   859  00001C                     	ds	3
   860  00001F                     ___fldiv@cntr:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x1E
   864  00001F                     	ds	1
   865  000020                     ___fldiv@exp:
   866                           	opt stack 0
   867  000020                     ___flmul@cntr:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x1F
   871  000020                     	ds	1
   872  000021                     ___fldiv@sign:
   873                           	opt stack 0
   874  000021                     ___flmul@sign:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x20
   878  000021                     	ds	1
   879  000022                     ?_fround:
   880                           	opt stack 0
   881  000022                     ?_scale:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x21
   885  000022                     	ds	4
   886  000026                     ??_fround:
   887  000026                     _scale$1214:
   888                           	opt stack 0
   889                           
   890                           ; 4 bytes @ 0x25
   891  000026                     	ds	4
   892  00002A                     scale@scl:
   893                           	opt stack 0
   894  00002A                     _fround$1213:
   895                           	opt stack 0
   896                           
   897                           ; 4 bytes @ 0x29
   898  00002A                     	ds	4
   899  00002E                     _fround$1212:
   900                           	opt stack 0
   901                           
   902                           ; 4 bytes @ 0x2D
   903  00002E                     	ds	4
   904  000032                     fround@prec:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x31
   908  000032                     	ds	1
   909  000033                     ?___fladd:
   910                           	opt stack 0
   911  000033                     ___fladd@f1:
   912                           	opt stack 0
   913                           
   914                           ; 4 bytes @ 0x32
   915  000033                     	ds	4
   916  000037                     ___fladd@f2:
   917                           	opt stack 0
   918                           
   919                           ; 4 bytes @ 0x36
   920  000037                     	ds	4
   921  00003B                     ??___fladd:
   922                           
   923                           ; 0 bytes @ 0x3A
   924  00003B                     	ds	4
   925  00003F                     ___fladd@sign:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x3E
   929  00003F                     	ds	1
   930  000040                     ___fladd@exp2:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x3F
   934  000040                     	ds	1
   935  000041                     ___fladd@exp1:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x40
   939  000041                     	ds	1
   940  000042                     ?___flsub:
   941                           	opt stack 0
   942  000042                     ?___fltol:
   943                           	opt stack 0
   944  000042                     ___flsub@f1:
   945                           	opt stack 0
   946  000042                     ___fltol@f1:
   947                           	opt stack 0
   948                           
   949                           ; 4 bytes @ 0x41
   950  000042                     	ds	4
   951  000046                     ??___fltol:
   952  000046                     ___flsub@f2:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x45
   956  000046                     	ds	4
   957  00004A                     ___fltol@sign1:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x49
   961  00004A                     	ds	1
   962  00004B                     ___fltol@exp1:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x4A
   966  00004B                     	ds	1
   967  00004C                     ?_sprintf:
   968                           	opt stack 0
   969  00004C                     sprintf@f:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x4B
   973  00004C                     	ds	6
   974  000052                     ??_sprintf:
   975                           
   976                           ; 0 bytes @ 0x51
   977  000052                     	ds	6
   978  000058                     _LISR$1211:
   979                           	opt stack 0
   980                           
   981                           ; 4 bytes @ 0x57
   982  000058                     	ds	4
   983  00005C                     LISR@U:
   984                           	opt stack 0
   985                           
   986                           ; 4 bytes @ 0x5B
   987  00005C                     	ds	4
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           
   997 ;;
   998 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   999 ;;
  1000 ;; *************** function _main *****************
  1001 ;; Defined at:
  1002 ;;		line 3 in file "main.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;		None
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;		None               void
  1009 ;; Registers used:
  1010 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1020 ;;Total ram usage:        0 bytes
  1021 ;; Hardware stack levels required when called:    8
  1022 ;; This function calls:
  1023 ;;		_UpdateLedData
  1024 ;; This function is called by:
  1025 ;;		Startup code after reset
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text0
  1030  011C7E                     __ptext0:
  1031                           	opt stack 0
  1032  011C7E                     _main:
  1033                           	opt stack 23
  1034                           
  1035                           ;main.c: 4: TRISB = 0x00;
  1036                           
  1037                           ;incstack = 0
  1038  011C7E  6A93               	clrf	3987,c	;volatile
  1039                           
  1040                           ;main.c: 5: TRISD = 0x00;
  1041  011C80  6A95               	clrf	3989,c	;volatile
  1042                           
  1043                           ;main.c: 6: TRISE = 0x00;
  1044  011C82  6A96               	clrf	3990,c	;volatile
  1045                           
  1046                           ;main.c: 8: TXSTA1 = 0x24;
  1047  011C84  0E24               	movlw	36
  1048  011C86  6EAC               	movwf	4012,c	;volatile
  1049                           
  1050                           ;main.c: 9: RCSTA1 = 0x90;
  1051  011C88  0E90               	movlw	144
  1052  011C8A  6EAB               	movwf	4011,c	;volatile
  1053                           
  1054                           ;main.c: 10: SPBRG1 = 0xA2;
  1055  011C8C  0EA2               	movlw	162
  1056  011C8E  6EAF               	movwf	4015,c	;volatile
  1057                           
  1058                           ;main.c: 14: ADCON0 = 0x01;
  1059  011C90  0E01               	movlw	1
  1060  011C92  6EC2               	movwf	4034,c	;volatile
  1061                           
  1062                           ;main.c: 15: ADCON1 = 0x10;
  1063  011C94  0E10               	movlw	16
  1064  011C96  6EC1               	movwf	4033,c	;volatile
  1065                           
  1066                           ;main.c: 16: ADCON2 = 0x86;
  1067  011C98  0E86               	movlw	134
  1068  011C9A  6EC0               	movwf	4032,c	;volatile
  1069                           
  1070                           ;main.c: 17: ADCON0bits.GO_DONE = 1;
  1071  011C9C  82C2               	bsf	4034,1,c	;volatile
  1072                           
  1073                           ;main.c: 18: PIE1bits.ADIE = 1;
  1074  011C9E  8C9D               	bsf	3997,6,c	;volatile
  1075                           
  1076                           ;main.c: 19: IPR1bits.ADIP = 0;
  1077  011CA0  9C9F               	bcf	3999,6,c	;volatile
  1078                           
  1079                           ;main.c: 21: T1CON = 0x21;
  1080  011CA2  0E21               	movlw	33
  1081  011CA4  6ECD               	movwf	4045,c	;volatile
  1082                           
  1083                           ;main.c: 22: TMR1ON = 1;
  1084  011CA6  80CD               	bsf	4045,0,c	;volatile
  1085                           
  1086                           ;main.c: 23: PIE1bits.TMR1IE = 1;
  1087  011CA8  809D               	bsf	3997,0,c	;volatile
  1088                           
  1089                           ;main.c: 24: IPR1bits.TMR1IP = 0;
  1090  011CAA  909F               	bcf	3999,0,c	;volatile
  1091                           
  1092                           ;main.c: 26: T2CON = 0x00;
  1093  011CAC  6ACA               	clrf	4042,c	;volatile
  1094                           
  1095                           ;main.c: 27: T2CONbits.TMR2ON = 1;
  1096  011CAE  84CA               	bsf	4042,2,c	;volatile
  1097                           
  1098                           ;main.c: 28: PIE1bits.TMR2IE = 1;
  1099  011CB0  829D               	bsf	3997,1,c	;volatile
  1100                           
  1101                           ;main.c: 29: IPR1bits.TMR2IP = 0;
  1102  011CB2  929F               	bcf	3999,1,c	;volatile
  1103                           
  1104                           ;main.c: 31: T4CONbits.T4CKPS = 3;
  1105  011CB4  0E03               	movlw	3
  1106  011CB6  1276               	iorwf	3958,f,c	;volatile
  1107                           
  1108                           ;main.c: 32: T4CONbits.T4OUTPS = 2;
  1109  011CB8  5076               	movf	3958,w,c	;volatile
  1110  011CBA  0B87               	andlw	-121
  1111  011CBC  0910               	iorlw	16
  1112  011CBE  6E76               	movwf	3958,c	;volatile
  1113                           
  1114                           ;main.c: 33: T4CONbits.TMR4ON = 1;
  1115  011CC0  8476               	bsf	3958,2,c	;volatile
  1116                           
  1117                           ;main.c: 34: PR4 = 0x01;
  1118  011CC2  0E01               	movlw	1
  1119  011CC4  6E77               	movwf	3959,c	;volatile
  1120                           
  1121                           ;main.c: 35: PIE3bits.TMR4IE = 1;
  1122  011CC6  86A3               	bsf	4003,3,c	;volatile
  1123                           
  1124                           ;main.c: 36: IPR3bits.TMR4IP = 1;
  1125  011CC8  86A5               	bsf	4005,3,c	;volatile
  1126                           
  1127                           ;main.c: 38: UpdateLedData("  0.0 ");
  1128  011CCA  0EFF               	movlw	high STR_1
  1129  011CCC  0101               	movlb	1	; () banked
  1130  011CCE  6F0F               	movwf	(UpdateLedData@data+1)& (0+255),b
  1131  011CD0  0EE6               	movlw	low STR_1
  1132  011CD2  6F0E               	movwf	UpdateLedData@data& (0+255),b
  1133  011CD4  EC1D  F088         	call	_UpdateLedData	;wreg free
  1134                           
  1135                           ;main.c: 40: RCONbits.IPEN = 1;
  1136  011CD8  8ED0               	bsf	4048,7,c	;volatile
  1137                           
  1138                           ;main.c: 41: GIE = 1;
  1139  011CDA  8EF2               	bsf	intcon,7,c	;volatile
  1140                           
  1141                           ;main.c: 42: PEIE = 1;
  1142  011CDC  8CF2               	bsf	intcon,6,c	;volatile
  1143  011CDE                     l51:
  1144  011CDE  D7FF               	goto	l51
  1145  011CE0                     __end_of_main:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           intcon	equ	0xFF2
  1152                           postinc0	equ	0xFEE
  1153                           wreg	equ	0xFE8
  1154                           postdec1	equ	0xFE5
  1155                           fsr1l	equ	0xFE1
  1156                           
  1157 ;; *************** function _UpdateLedData *****************
  1158 ;; Defined at:
  1159 ;;		line 46 in file "led_display.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  data            2   14[BANK1 ] PTR unsigned char 
  1162 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(5), 
  1163 ;;		 -> Buf(10), STR_1(7), 
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  i               1   18[BANK1 ] unsigned char 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;		None               void
  1168 ;; Registers used:
  1169 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1170 ;; Tracked objects:
  1171 ;;		On entry : F/1
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1175 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1176 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1177 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1178 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1179 ;;Total ram usage:        5 bytes
  1180 ;; Hardware stack levels used:    1
  1181 ;; Hardware stack levels required when called:    7
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_main
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text1
  1190  01103A                     __ptext1:
  1191                           	opt stack 0
  1192  01103A                     _UpdateLedData:
  1193                           	opt stack 23
  1194                           
  1195                           ; BSR set to: 1
  1196                           ;led_display.c: 47: for(uint8_t i = 0; data[i]; i++){
  1197                           
  1198                           ;incstack = 0
  1199  01103A  6B12               	clrf	UpdateLedData@i& (0+255),b
  1200  01103C  D0AE               	goto	l3445
  1201  01103E                     l3421:
  1202                           
  1203                           ;led_display.c: 50: case '1':
  1204                           ;led_display.c: 51: case '2':
  1205                           ;led_display.c: 52: case '3':
  1206                           ;led_display.c: 53: case '4':
  1207                           ;led_display.c: 54: case '5':
  1208                           ;led_display.c: 55: case '6':
  1209                           ;led_display.c: 56: case '7':
  1210                           ;led_display.c: 57: case '8':
  1211                           ;led_display.c: 58: case '9':
  1212                           ;led_display.c: 59: Data[i] = data[i] - '0';
  1213  01103E  0101               	movlb	1	; () banked
  1214  011040  5112               	movf	UpdateLedData@i& (0+255),w,b
  1215  011042  0FE2               	addlw	low _Data
  1216  011044  6ED9               	movwf	fsr2l,c
  1217  011046  6ADA               	clrf	fsr2h,c
  1218  011048  5112               	movf	UpdateLedData@i& (0+255),w,b
  1219  01104A  250E               	addwf	UpdateLedData@data& (0+255),w,b
  1220  01104C  6F10               	movwf	??_UpdateLedData& (0+255),b
  1221  01104E  0E00               	movlw	0
  1222  011050  210F               	addwfc	(UpdateLedData@data+1)& (0+255),w,b
  1223  011052  6F11               	movwf	(??_UpdateLedData+1)& (0+255),b
  1224  011054  C110  FFF6         	movff	??_UpdateLedData,tblptrl
  1225  011058  C111  FFF7         	movff	??_UpdateLedData+1,tblptrh
  1226  01105C  0E00               	movlw	low (__mediumconst shr (0+16))
  1227  01105E  6EF8               	movwf	tblptru,c
  1228  011060  0E0E               	movlw	(high __ramtop+-1)
  1229  011062  64F7               	cpfsgt	tblptrh,c
  1230  011064  D003               	bra	u3797
  1231  011066  0008               	tblrd		*
  1232  011068  50F5               	movf	tablat,w,c
  1233  01106A  D005               	bra	u3790
  1234  01106C                     u3797:
  1235  01106C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1236  011070  CFF7 FFEA          	movff	tblptrh,fsr0h
  1237  011074  50EF               	movf	indf0,w,c
  1238  011076                     u3790:
  1239  011076  0FD0               	addlw	208
  1240  011078  D02A               	goto	L2
  1241  01107A                     l3423:
  1242                           
  1243                           ;led_display.c: 62: Data[i] = 10;
  1244  01107A  0101               	movlb	1	; () banked
  1245  01107C  5112               	movf	UpdateLedData@i& (0+255),w,b
  1246  01107E  0FE2               	addlw	low _Data
  1247  011080  6ED9               	movwf	fsr2l,c
  1248  011082  6ADA               	clrf	fsr2h,c
  1249  011084  0E0A               	movlw	10
  1250  011086  D023               	goto	L2
  1251  011088                     l3425:
  1252                           
  1253                           ;led_display.c: 65: Data[i] = data[i];
  1254  011088  0101               	movlb	1	; () banked
  1255  01108A  5112               	movf	UpdateLedData@i& (0+255),w,b
  1256  01108C  250E               	addwf	UpdateLedData@data& (0+255),w,b
  1257  01108E  6F10               	movwf	??_UpdateLedData& (0+255),b
  1258  011090  0E00               	movlw	0
  1259  011092  210F               	addwfc	(UpdateLedData@data+1)& (0+255),w,b
  1260  011094  6F11               	movwf	(??_UpdateLedData+1)& (0+255),b
  1261  011096  C110  FFF6         	movff	??_UpdateLedData,tblptrl
  1262  01109A  C111  FFF7         	movff	??_UpdateLedData+1,tblptrh
  1263  01109E  0E00               	movlw	low (__mediumconst shr (0+16))
  1264  0110A0  6EF8               	movwf	tblptru,c
  1265  0110A2  5112               	movf	UpdateLedData@i& (0+255),w,b
  1266  0110A4  0FE2               	addlw	low _Data
  1267  0110A6  6ED9               	movwf	fsr2l,c
  1268  0110A8  6ADA               	clrf	fsr2h,c
  1269  0110AA  0E0E               	movlw	(high __ramtop+-1)
  1270  0110AC  64F7               	cpfsgt	tblptrh,c
  1271  0110AE  D003               	bra	u3807
  1272  0110B0  0008               	tblrd		*
  1273  0110B2  50F5               	movf	tablat,w,c
  1274  0110B4  D005               	bra	u3800
  1275  0110B6                     u3807:
  1276  0110B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  1277  0110BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  1278  0110BE  50EF               	movf	indf0,w,c
  1279  0110C0                     u3800:
  1280  0110C0  D006               	goto	L2
  1281  0110C2                     l3427:
  1282                           
  1283                           ;led_display.c: 68: Data[i] = 11;
  1284  0110C2  0101               	movlb	1	; () banked
  1285  0110C4  5112               	movf	UpdateLedData@i& (0+255),w,b
  1286  0110C6  0FE2               	addlw	low _Data
  1287  0110C8  6ED9               	movwf	fsr2l,c
  1288  0110CA  6ADA               	clrf	fsr2h,c
  1289  0110CC  0E0B               	movlw	11
  1290  0110CE                     L2:
  1291  0110CE  6EDF               	movwf	indf2,c
  1292                           
  1293                           ;led_display.c: 69: break;
  1294  0110D0  D062               	goto	l3443
  1295  0110D2                     l3429:
  1296                           
  1297                           ;led_display.c: 71: Data[0] = 12;
  1298  0110D2  0E0C               	movlw	12
  1299  0110D4  0100               	movlb	0	; () banked
  1300  0110D6  6FE2               	movwf	_Data& (0+255),b
  1301                           
  1302                           ;led_display.c: 72: Data[1] = 13;
  1303  0110D8  0E0D               	movlw	13
  1304  0110DA  6FE3               	movwf	(_Data+1)& (0+255),b
  1305                           
  1306                           ;led_display.c: 73: Data[2] = 13;
  1307  0110DC  6FE4               	movwf	(_Data+2)& (0+255),b
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;led_display.c: 74: Data[3] = data[++i] - '0';
  1311  0110DE  0101               	movlb	1	; () banked
  1312  0110E0  2B12               	incf	UpdateLedData@i& (0+255),f,b
  1313  0110E2  5112               	movf	UpdateLedData@i& (0+255),w,b
  1314  0110E4  250E               	addwf	UpdateLedData@data& (0+255),w,b
  1315  0110E6  6F10               	movwf	??_UpdateLedData& (0+255),b
  1316  0110E8  0E00               	movlw	0
  1317  0110EA  210F               	addwfc	(UpdateLedData@data+1)& (0+255),w,b
  1318  0110EC  6F11               	movwf	(??_UpdateLedData+1)& (0+255),b
  1319  0110EE  C110  FFF6         	movff	??_UpdateLedData,tblptrl
  1320  0110F2  C111  FFF7         	movff	??_UpdateLedData+1,tblptrh
  1321  0110F6  0E00               	movlw	low (__mediumconst shr (0+16))
  1322  0110F8  6EF8               	movwf	tblptru,c
  1323  0110FA  0E0E               	movlw	(high __ramtop+-1)
  1324  0110FC  64F7               	cpfsgt	tblptrh,c
  1325  0110FE  D003               	bra	u3817
  1326  011100  0008               	tblrd		*
  1327  011102  50F5               	movf	tablat,w,c
  1328  011104  D005               	bra	u3810
  1329  011106                     u3817:
  1330  011106  CFF6 FFE9          	movff	tblptrl,fsr0l
  1331  01110A  CFF7 FFEA          	movff	tblptrh,fsr0h
  1332  01110E  50EF               	movf	indf0,w,c
  1333  011110                     u3810:
  1334  011110  0FD0               	addlw	208
  1335  011112  0100               	movlb	0	; () banked
  1336  011114  6FE5               	movwf	(_Data+3)& (0+255),b
  1337  011116  D05A               	goto	l92
  1338  011118                     l3441:
  1339  011118  0101               	movlb	1	; () banked
  1340  01111A  5112               	movf	UpdateLedData@i& (0+255),w,b
  1341  01111C  250E               	addwf	UpdateLedData@data& (0+255),w,b
  1342  01111E  6F10               	movwf	??_UpdateLedData& (0+255),b
  1343  011120  0E00               	movlw	0
  1344  011122  210F               	addwfc	(UpdateLedData@data+1)& (0+255),w,b
  1345  011124  6F11               	movwf	(??_UpdateLedData+1)& (0+255),b
  1346  011126  C110  FFF6         	movff	??_UpdateLedData,tblptrl
  1347  01112A  C111  FFF7         	movff	??_UpdateLedData+1,tblptrh
  1348  01112E  0E00               	movlw	low (__mediumconst shr (0+16))
  1349  011130  6EF8               	movwf	tblptru,c
  1350  011132  0E0E               	movlw	(high __ramtop+-1)
  1351  011134  64F7               	cpfsgt	tblptrh,c
  1352  011136  D003               	bra	u3827
  1353  011138  0008               	tblrd		*
  1354  01113A  50F5               	movf	tablat,w,c
  1355  01113C  D005               	bra	u3820
  1356  01113E                     u3827:
  1357  01113E  CFF6 FFE9          	movff	tblptrl,fsr0l
  1358  011142  CFF7 FFEA          	movff	tblptrh,fsr0h
  1359  011146  50EF               	movf	indf0,w,c
  1360  011148                     u3820:
  1361                           
  1362                           ; Switch size 1, requested type "space"
  1363                           ; Number of cases is 14, Range of values is 32 to 69
  1364                           ; switch strategies available:
  1365                           ; Name         Instructions Cycles
  1366                           ; simple_byte           43    22 (average)
  1367                           ;	Chosen strategy is simple_byte
  1368  011148  0A20               	xorlw	32	; case 32
  1369  01114A  E0BB               	bz	l3427
  1370  01114C  0A0D               	xorlw	13	; case 45
  1371  01114E  E095               	bz	l3423
  1372  011150  0A03               	xorlw	3	; case 46
  1373  011152  E09A               	bz	l3425
  1374  011154  0A1E               	xorlw	30	; case 48
  1375  011156  E101 D772          	bz	l3421
  1376  01115A  0A01               	xorlw	1	; case 49
  1377  01115C  E101 D76F          	bz	l3421
  1378  011160  0A03               	xorlw	3	; case 50
  1379  011162  E101 D76C          	bz	l3421
  1380  011166  0A01               	xorlw	1	; case 51
  1381  011168  E101 D769          	bz	l3421
  1382  01116C  0A07               	xorlw	7	; case 52
  1383  01116E  E101 D766          	bz	l3421
  1384  011172  0A01               	xorlw	1	; case 53
  1385  011174  E101 D763          	bz	l3421
  1386  011178  0A03               	xorlw	3	; case 54
  1387  01117A  E101 D760          	bz	l3421
  1388  01117E  0A01               	xorlw	1	; case 55
  1389  011180  E101 D75D          	bz	l3421
  1390  011184  0A0F               	xorlw	15	; case 56
  1391  011186  E101 D75A          	bz	l3421
  1392  01118A  0A01               	xorlw	1	; case 57
  1393  01118C  E101 D757          	bz	l3421
  1394  011190  0A7C               	xorlw	124	; case 69
  1395  011192  E09F               	bz	l3429
  1396  011194  D796               	goto	l3427
  1397  011196                     l3443:
  1398  011196  0101               	movlb	1	; () banked
  1399  011198  2B12               	incf	UpdateLedData@i& (0+255),f,b
  1400  01119A                     l3445:
  1401                           
  1402                           ; BSR set to: 1
  1403  01119A  5112               	movf	UpdateLedData@i& (0+255),w,b
  1404  01119C  250E               	addwf	UpdateLedData@data& (0+255),w,b
  1405  01119E  6F10               	movwf	??_UpdateLedData& (0+255),b
  1406  0111A0  0E00               	movlw	0
  1407  0111A2  210F               	addwfc	(UpdateLedData@data+1)& (0+255),w,b
  1408  0111A4  6F11               	movwf	(??_UpdateLedData+1)& (0+255),b
  1409  0111A6  C110  FFF6         	movff	??_UpdateLedData,tblptrl
  1410  0111AA  C111  FFF7         	movff	??_UpdateLedData+1,tblptrh
  1411  0111AE  0E00               	movlw	low (__mediumconst shr (0+16))
  1412  0111B0  6EF8               	movwf	tblptru,c
  1413  0111B2  0E0E               	movlw	(high __ramtop+-1)
  1414  0111B4  64F7               	cpfsgt	tblptrh,c
  1415  0111B6  D003               	bra	u3837
  1416  0111B8  0008               	tblrd		*
  1417  0111BA  50F5               	movf	tablat,w,c
  1418  0111BC  D005               	bra	u3830
  1419  0111BE                     u3837:
  1420  0111BE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1421  0111C2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1422  0111C6  50EF               	movf	indf0,w,c
  1423  0111C8                     u3830:
  1424  0111C8  0900               	iorlw	0
  1425  0111CA  E1A6               	bnz	l3441
  1426  0111CC                     l92:
  1427  0111CC  0012               	return	
  1428  0111CE                     __end_of_UpdateLedData:
  1429                           	opt stack 0
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           intcon	equ	0xFF2
  1435                           indf0	equ	0xFEF
  1436                           postinc0	equ	0xFEE
  1437                           fsr0h	equ	0xFEA
  1438                           fsr0l	equ	0xFE9
  1439                           wreg	equ	0xFE8
  1440                           postdec1	equ	0xFE5
  1441                           fsr1l	equ	0xFE1
  1442                           indf2	equ	0xFDF
  1443                           fsr2h	equ	0xFDA
  1444                           fsr2l	equ	0xFD9
  1445                           
  1446 ;; *************** function _LISR *****************
  1447 ;; Defined at:
  1448 ;;		line 25 in file "interrupt.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;		None
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  U               4   91[COMRAM] unsigned long 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;		None               void
  1455 ;; Registers used:
  1456 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1463 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1464 ;;      Temps:          0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1465 ;;      Totals:         8      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1466 ;;Total ram usage:       25 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    6
  1469 ;; This function calls:
  1470 ;;		_UpdateLedColor
  1471 ;;		_UpdatePins
  1472 ;;		___fladd
  1473 ;;		___fldiv
  1474 ;;		___flge
  1475 ;;		___flmul
  1476 ;;		___fltol
  1477 ;;		___lltofl
  1478 ;;		___lmul
  1479 ;;		___lwtofl
  1480 ;;		_sprintf
  1481 ;;		i1_UpdateLedData
  1482 ;; This function is called by:
  1483 ;;		Interrupt level 1
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	intcodelo
  1488  000018                     __pintcodelo:
  1489                           	opt stack 0
  1490  000018                     _LISR:
  1491                           	opt stack 23
  1492                           
  1493                           ;incstack = 0
  1494  000018  CFD8 F0D5          	movff	status,??_LISR+4
  1495  00001C  CFE8 F0D6          	movff	wreg,??_LISR+5
  1496  000020  CFE0 F0D7          	movff	bsr,??_LISR+6
  1497  000024  CFE9 F0D8          	movff	fsr0l,??_LISR+7
  1498  000028  CFEA F0D9          	movff	fsr0h,??_LISR+8
  1499  00002C  CFD9 F0DA          	movff	fsr2l,??_LISR+9
  1500  000030  CFDA F0DB          	movff	fsr2h,??_LISR+10
  1501  000034  CFF3 F0DC          	movff	prodl,??_LISR+11
  1502  000038  CFF4 F0DD          	movff	prodh,??_LISR+12
  1503  00003C  CFF6 F0DE          	movff	tblptrl,??_LISR+13
  1504  000040  CFF7 F0DF          	movff	tblptrh,??_LISR+14
  1505  000044  CFF8 F0E0          	movff	tblptru,??_LISR+15
  1506  000048  CFF5 F0E1          	movff	tablat,??_LISR+16
  1507                           
  1508                           ;interrupt.c: 26: uint32_t U = 1000;
  1509  00004C  0EE8               	movlw	232
  1510  00004E  6E5C               	movwf	LISR@U,c
  1511  000050  0E03               	movlw	3
  1512  000052  6E5D               	movwf	LISR@U+1,c
  1513  000054  0E00               	movlw	0
  1514  000056  6E5E               	movwf	LISR@U+2,c
  1515  000058  6E5F               	movwf	LISR@U+3,c
  1516                           
  1517                           ;interrupt.c: 27: if(TMR1IF && TMR1IE){
  1518  00005A  B09E               	btfsc	3998,0,c	;volatile
  1519  00005C  A09D               	btfss	3997,0,c	;volatile
  1520  00005E  D0ED               	goto	i1l3285
  1521                           
  1522                           ;interrupt.c: 28: TMR1IF = 0;
  1523  000060  909E               	bcf	3998,0,c	;volatile
  1524                           
  1525                           ;interrupt.c: 29: if(BtnPressed){
  1526  000062  0100               	movlb	0	; () banked
  1527  000064  519B               	movf	_BtnPressed& (0+255),w,b
  1528  000066  E101 D0DE          	bz	i1l3279
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;interrupt.c: 30: if(Rez > 300){
  1532  00006A  6A01               	clrf	___flge@ff1,c
  1533  00006C  6A02               	clrf	___flge@ff1+1,c
  1534  00006E  0E96               	movlw	150
  1535  000070  6E03               	movwf	___flge@ff1+2,c
  1536  000072  0E43               	movlw	67
  1537  000074  6E04               	movwf	___flge@ff1+3,c
  1538  000076  C08A  F005         	movff	_Rez,___flge@ff2
  1539  00007A  C08B  F006         	movff	_Rez+1,___flge@ff2+1
  1540  00007E  C08C  F007         	movff	_Rez+2,___flge@ff2+2
  1541  000082  C08D  F008         	movff	_Rez+3,___flge@ff2+3
  1542  000086  ECA1  F08E         	call	___flge	;wreg free
  1543  00008A  E204               	bc	i1l3255
  1544                           
  1545                           ;interrupt.c: 31: UpdateLedColor(255);
  1546  00008C  0EFF               	movlw	255
  1547  00008E  ECD6  F08F         	call	_UpdateLedColor
  1548                           
  1549                           ;interrupt.c: 32: } else if(Rez > 45){
  1550  000092  D03B               	goto	i1l3261
  1551  000094                     i1l3255:
  1552  000094  6A01               	clrf	___flge@ff1,c
  1553  000096  6A02               	clrf	___flge@ff1+1,c
  1554  000098  0E34               	movlw	52
  1555  00009A  6E03               	movwf	___flge@ff1+2,c
  1556  00009C  0E42               	movlw	66
  1557  00009E  6E04               	movwf	___flge@ff1+3,c
  1558  0000A0  C08A  F005         	movff	_Rez,___flge@ff2
  1559  0000A4  C08B  F006         	movff	_Rez+1,___flge@ff2+1
  1560  0000A8  C08C  F007         	movff	_Rez+2,___flge@ff2+2
  1561  0000AC  C08D  F008         	movff	_Rez+3,___flge@ff2+3
  1562  0000B0  ECA1  F08E         	call	___flge	;wreg free
  1563  0000B4  E227               	bc	i1l3259
  1564                           
  1565                           ;interrupt.c: 33: UpdateLedColor(Rez - 45);
  1566  0000B6  6A37               	clrf	___fladd@f2,c
  1567  0000B8  6A38               	clrf	___fladd@f2+1,c
  1568  0000BA  0E34               	movlw	52
  1569  0000BC  6E39               	movwf	___fladd@f2+2,c
  1570  0000BE  0EC2               	movlw	194
  1571  0000C0  6E3A               	movwf	___fladd@f2+3,c
  1572  0000C2  C08A  F033         	movff	_Rez,___fladd@f1
  1573  0000C6  C08B  F034         	movff	_Rez+1,___fladd@f1+1
  1574  0000CA  C08C  F035         	movff	_Rez+2,___fladd@f1+2
  1575  0000CE  C08D  F036         	movff	_Rez+3,___fladd@f1+3
  1576  0000D2  EC49  F087         	call	___fladd	;wreg free
  1577  0000D6  C033  F042         	movff	?___fladd,___fltol@f1
  1578  0000DA  C034  F043         	movff	?___fladd+1,___fltol@f1+1
  1579  0000DE  C035  F044         	movff	?___fladd+2,___fltol@f1+2
  1580  0000E2  C036  F045         	movff	?___fladd+3,___fltol@f1+3
  1581  0000E6  ECB7  F08C         	call	___fltol	;wreg free
  1582  0000EA  C042  F0D1         	movff	?___fltol,??_LISR
  1583  0000EE  C043  F0D2         	movff	?___fltol+1,??_LISR+1
  1584  0000F2  C044  F0D3         	movff	?___fltol+2,??_LISR+2
  1585  0000F6  C045  F0D4         	movff	?___fltol+3,??_LISR+3
  1586  0000FA  0100               	movlb	0	; () banked
  1587  0000FC  51D1               	movf	??_LISR& (0+255),w,b
  1588  0000FE  ECD6  F08F         	call	_UpdateLedColor
  1589                           
  1590                           ;interrupt.c: 34: } else{
  1591  000102  D003               	goto	i1l3261
  1592  000104                     i1l3259:
  1593                           
  1594                           ;interrupt.c: 35: UpdateLedColor(0);
  1595  000104  0E00               	movlw	0
  1596  000106  ECD6  F08F         	call	_UpdateLedColor
  1597  00010A                     i1l3261:
  1598                           
  1599                           ;interrupt.c: 36: }
  1600                           ;interrupt.c: 37: if(Rez < 10){
  1601  00010A  C08A  F001         	movff	_Rez,___flge@ff1
  1602  00010E  C08B  F002         	movff	_Rez+1,___flge@ff1+1
  1603  000112  C08C  F003         	movff	_Rez+2,___flge@ff1+2
  1604  000116  C08D  F004         	movff	_Rez+3,___flge@ff1+3
  1605  00011A  6A05               	clrf	___flge@ff2,c
  1606  00011C  6A06               	clrf	___flge@ff2+1,c
  1607  00011E  0E20               	movlw	32
  1608  000120  6E07               	movwf	___flge@ff2+2,c
  1609  000122  0E41               	movlw	65
  1610  000124  6E08               	movwf	___flge@ff2+3,c
  1611  000126  ECA1  F08E         	call	___flge	;wreg free
  1612  00012A  E211               	bc	i1l3265
  1613                           
  1614                           ;interrupt.c: 38: sprintf(Buf, "  %.1f", Rez);
  1615  00012C  0EFF               	movlw	high STR_2
  1616  00012E  6E4D               	movwf	sprintf@f+1,c
  1617  000130  0EDF               	movlw	low STR_2
  1618  000132  6E4C               	movwf	sprintf@f,c
  1619  000134  C08A  F04E         	movff	_Rez,?_sprintf+2
  1620  000138  C08B  F04F         	movff	_Rez+1,?_sprintf+3
  1621  00013C  C08C  F050         	movff	_Rez+2,?_sprintf+4
  1622  000140  C08D  F051         	movff	_Rez+3,?_sprintf+5
  1623  000144  0100               	movlb	0	; () banked
  1624  000146  0EA1               	movlw	_Buf& (0+255)
  1625  000148  EC00  F080         	call	_sprintf
  1626                           
  1627                           ;interrupt.c: 39: } else if(Rez < 100){
  1628  00014C  D066               	goto	i1l3277
  1629  00014E                     i1l3265:
  1630  00014E  C08A  F001         	movff	_Rez,___flge@ff1
  1631  000152  C08B  F002         	movff	_Rez+1,___flge@ff1+1
  1632  000156  C08C  F003         	movff	_Rez+2,___flge@ff1+2
  1633  00015A  C08D  F004         	movff	_Rez+3,___flge@ff1+3
  1634  00015E  6A05               	clrf	___flge@ff2,c
  1635  000160  6A06               	clrf	___flge@ff2+1,c
  1636  000162  0EC8               	movlw	200
  1637  000164  6E07               	movwf	___flge@ff2+2,c
  1638  000166  0E42               	movlw	66
  1639  000168  6E08               	movwf	___flge@ff2+3,c
  1640  00016A  ECA1  F08E         	call	___flge	;wreg free
  1641  00016E  E211               	bc	i1l3269
  1642                           
  1643                           ;interrupt.c: 40: sprintf(Buf, " %.1f", Rez);
  1644  000170  0EFF               	movlw	high (STR_2+1)
  1645  000172  6E4D               	movwf	sprintf@f+1,c
  1646  000174  0EE0               	movlw	low (STR_2+1)
  1647  000176  6E4C               	movwf	sprintf@f,c
  1648  000178  C08A  F04E         	movff	_Rez,?_sprintf+2
  1649  00017C  C08B  F04F         	movff	_Rez+1,?_sprintf+3
  1650  000180  C08C  F050         	movff	_Rez+2,?_sprintf+4
  1651  000184  C08D  F051         	movff	_Rez+3,?_sprintf+5
  1652  000188  0100               	movlb	0	; () banked
  1653  00018A  0EA1               	movlw	_Buf& (0+255)
  1654  00018C  EC00  F080         	call	_sprintf
  1655                           
  1656                           ;interrupt.c: 41: } else if(Rez < 1000){
  1657  000190  D044               	goto	i1l3277
  1658  000192                     i1l3269:
  1659  000192  C08A  F001         	movff	_Rez,___flge@ff1
  1660  000196  C08B  F002         	movff	_Rez+1,___flge@ff1+1
  1661  00019A  C08C  F003         	movff	_Rez+2,___flge@ff1+2
  1662  00019E  C08D  F004         	movff	_Rez+3,___flge@ff1+3
  1663  0001A2  6A05               	clrf	___flge@ff2,c
  1664  0001A4  6A06               	clrf	___flge@ff2+1,c
  1665  0001A6  0E7A               	movlw	122
  1666  0001A8  6E07               	movwf	___flge@ff2+2,c
  1667  0001AA  0E44               	movlw	68
  1668  0001AC  6E08               	movwf	___flge@ff2+3,c
  1669  0001AE  ECA1  F08E         	call	___flge	;wreg free
  1670  0001B2  E211               	bc	i1l3273
  1671                           
  1672                           ;interrupt.c: 42: sprintf(Buf, "%.1f", Rez);
  1673  0001B4  0EFF               	movlw	high (STR_2+2)
  1674  0001B6  6E4D               	movwf	sprintf@f+1,c
  1675  0001B8  0EE1               	movlw	low (STR_2+2)
  1676  0001BA  6E4C               	movwf	sprintf@f,c
  1677  0001BC  C08A  F04E         	movff	_Rez,?_sprintf+2
  1678  0001C0  C08B  F04F         	movff	_Rez+1,?_sprintf+3
  1679  0001C4  C08C  F050         	movff	_Rez+2,?_sprintf+4
  1680  0001C8  C08D  F051         	movff	_Rez+3,?_sprintf+5
  1681  0001CC  0100               	movlb	0	; () banked
  1682  0001CE  0EA1               	movlw	_Buf& (0+255)
  1683  0001D0  EC00  F080         	call	_sprintf
  1684                           
  1685                           ;interrupt.c: 43: } else{
  1686  0001D4  D022               	goto	i1l3277
  1687  0001D6                     i1l3273:
  1688                           
  1689                           ;interrupt.c: 44: sprintf(Buf, "%u", (uint32_t) Rez);
  1690  0001D6  C08A  F042         	movff	_Rez,___fltol@f1
  1691  0001DA  C08B  F043         	movff	_Rez+1,___fltol@f1+1
  1692  0001DE  C08C  F044         	movff	_Rez+2,___fltol@f1+2
  1693  0001E2  C08D  F045         	movff	_Rez+3,___fltol@f1+3
  1694  0001E6  ECB7  F08C         	call	___fltol	;wreg free
  1695  0001EA  C042  F058         	movff	?___fltol,_LISR$1211
  1696  0001EE  C043  F059         	movff	?___fltol+1,_LISR$1211+1
  1697  0001F2  C044  F05A         	movff	?___fltol+2,_LISR$1211+2
  1698  0001F6  C045  F05B         	movff	?___fltol+3,_LISR$1211+3
  1699                           
  1700                           ;interrupt.c: 44: sprintf(Buf, "%u", (uint32_t) Rez);
  1701  0001FA  0EFF               	movlw	high STR_5
  1702  0001FC  6E4D               	movwf	sprintf@f+1,c
  1703  0001FE  0EFB               	movlw	low STR_5
  1704  000200  6E4C               	movwf	sprintf@f,c
  1705  000202  C058  F04E         	movff	_LISR$1211,?_sprintf+2
  1706  000206  C059  F04F         	movff	_LISR$1211+1,?_sprintf+3
  1707  00020A  C05A  F050         	movff	_LISR$1211+2,?_sprintf+4
  1708  00020E  C05B  F051         	movff	_LISR$1211+3,?_sprintf+5
  1709  000212  0100               	movlb	0	; () banked
  1710  000214  0EA1               	movlw	_Buf& (0+255)
  1711  000216  EC00  F080         	call	_sprintf
  1712  00021A                     i1l3277:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;interrupt.c: 45: }
  1716                           ;interrupt.c: 46: UpdateLedData(Buf);
  1717  00021A  6A02               	clrf	i1UpdateLedData@data+1,c
  1718  00021C  0EA1               	movlw	low _Buf
  1719  00021E  6E01               	movwf	i1UpdateLedData@data,c
  1720  000220  ECE7  F088         	call	i1_UpdateLedData	;wreg free
  1721                           
  1722                           ;interrupt.c: 47: } else{
  1723  000224  D00A               	goto	i1l3285
  1724  000226                     i1l3279:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;interrupt.c: 48: if(++BlinkCounter & 0x08){
  1728  000226  2B9A               	incf	_BlinkCounter& (0+255),f,b
  1729  000228  0100               	movlb	0	; () banked
  1730  00022A  A79A               	btfss	_BlinkCounter& (0+255),3,b
  1731  00022C  D7F6               	goto	i1l3277
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;interrupt.c: 49: UpdateLedData("    ");
  1735  00022E  0EFF               	movlw	high STR_6
  1736  000230  6E02               	movwf	i1UpdateLedData@data+1,c
  1737  000232  0EED               	movlw	low STR_6
  1738  000234  6E01               	movwf	i1UpdateLedData@data,c
  1739  000236  ECE7  F088         	call	i1_UpdateLedData	;wreg free
  1740  00023A                     i1l3285:
  1741                           
  1742                           ;interrupt.c: 52: }
  1743                           ;interrupt.c: 53: }
  1744                           ;interrupt.c: 54: }
  1745                           ;interrupt.c: 55: if(TMR2IF && TMR2IE){
  1746  00023A  B29E               	btfsc	3998,1,c	;volatile
  1747  00023C  A29D               	btfss	3997,1,c	;volatile
  1748  00023E  D02A               	goto	i1l251
  1749                           
  1750                           ;interrupt.c: 56: TMR2IF = 0;
  1751  000240  929E               	bcf	3998,1,c	;volatile
  1752                           
  1753                           ;interrupt.c: 57: if(ADCON0bits.CHS != AdcChArr[AdcCh]){
  1754  000242  0E33               	movlw	low _AdcChArr
  1755  000244  0100               	movlb	0	; () banked
  1756  000246  2599               	addwf	_AdcCh& (0+255),w,b
  1757  000248  6EF6               	movwf	tblptrl,c
  1758  00024A  6AF7               	clrf	tblptrh,c
  1759  00024C  0EFF               	movlw	high _AdcChArr
  1760  00024E  22F7               	addwfc	tblptrh,f,c
  1761  000250                     	if	1	;There are 3 active tblptr bytes
  1762  000250  6AF8               	clrf	tblptru,c
  1763  000252  0E00               	movlw	low (__mediumconst shr (0+16))
  1764  000254  22F8               	addwfc	tblptru,f,c
  1765  000256                     	endif
  1766  000256  0008               	tblrd		*
  1767  000258  CFF5 F0D1          	movff	tablat,??_LISR
  1768  00025C  30C2               	rrcf	4034,w,c	;volatile
  1769  00025E  32E8               	rrcf	wreg,f,c
  1770  000260  0B0F               	andlw	15
  1771  000262  19D1               	xorwf	??_LISR& (0+255),w,b
  1772  000264  E014               	bz	i1l252
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;interrupt.c: 58: ADCON0bits.CHS = AdcChArr[AdcCh];
  1776  000266  0E33               	movlw	low _AdcChArr
  1777  000268  2599               	addwf	_AdcCh& (0+255),w,b
  1778  00026A  6EF6               	movwf	tblptrl,c
  1779  00026C  6AF7               	clrf	tblptrh,c
  1780  00026E  0EFF               	movlw	high _AdcChArr
  1781  000270  22F7               	addwfc	tblptrh,f,c
  1782  000272                     	if	1	;There are 3 active tblptr bytes
  1783  000272  6AF8               	clrf	tblptru,c
  1784  000274  0E00               	movlw	low (__mediumconst shr (0+16))
  1785  000276  22F8               	addwfc	tblptru,f,c
  1786  000278                     	endif
  1787  000278  0008               	tblrd		*
  1788  00027A  CFF5 F0D1          	movff	tablat,??_LISR
  1789  00027E  47D1               	rlncf	??_LISR& (0+255),f,b
  1790  000280  47D1               	rlncf	??_LISR& (0+255),f,b
  1791  000282  50C2               	movf	4034,w,c	;volatile
  1792  000284  19D1               	xorwf	??_LISR& (0+255),w,b
  1793  000286  0BC3               	andlw	-61
  1794  000288  19D1               	xorwf	??_LISR& (0+255),w,b
  1795  00028A  6EC2               	movwf	4034,c	;volatile
  1796                           
  1797                           ;interrupt.c: 59: } else{
  1798  00028C  D003               	goto	i1l251
  1799  00028E                     i1l252:
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;interrupt.c: 60: GO_DONE = 1;
  1803  00028E  82C2               	bsf	4034,1,c	;volatile
  1804                           
  1805                           ;interrupt.c: 61: TMR2ON = 0;
  1806  000290  94CA               	bcf	4042,2,c	;volatile
  1807                           
  1808                           ;interrupt.c: 62: TMR2 = 0;
  1809  000292  6ACC               	clrf	4044,c	;volatile
  1810  000294                     i1l251:
  1811                           
  1812                           ;interrupt.c: 63: }
  1813                           ;interrupt.c: 64: }
  1814                           ;interrupt.c: 65: if(ADIF && ADIE){
  1815  000294  BC9E               	btfsc	3998,6,c	;volatile
  1816  000296  AC9D               	btfss	3997,6,c	;volatile
  1817  000298  D174               	goto	i1l280
  1818                           
  1819                           ;interrupt.c: 66: ADIF = 0;
  1820  00029A  9C9E               	bcf	3998,6,c	;volatile
  1821                           
  1822                           ;interrupt.c: 67: AdcMeasData[AdcCh] = ADRES;
  1823  00029C  0100               	movlb	0	; () banked
  1824  00029E  5199               	movf	_AdcCh& (0+255),w,b
  1825  0002A0  0D02               	mullw	2
  1826  0002A2  50F3               	movf	prodl,w,c
  1827  0002A4  0F60               	addlw	low _AdcMeasData
  1828  0002A6  6ED9               	movwf	fsr2l,c
  1829  0002A8  6ADA               	clrf	fsr2h,c
  1830  0002AA  CFC3 FFDE          	movff	4035,postinc2	;volatile
  1831  0002AE  CFC4 FFDD          	movff	4036,postdec2	;volatile
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;interrupt.c: 68: if(++AdcCh == 14){
  1835  0002B2  2B99               	incf	_AdcCh& (0+255),f,b
  1836  0002B4  5199               	movf	_AdcCh& (0+255),w,b
  1837  0002B6  0A0E               	xorlw	14
  1838  0002B8  E001 D162          	bnz	i1l3393
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;interrupt.c: 69: AdcCh = 0;
  1842  0002BC  6B99               	clrf	_AdcCh& (0+255),b
  1843                           
  1844                           ;interrupt.c: 71: for(ErrCounterX = 0, i = 0; i < 8; ++i){
  1845  0002BE  6B9D               	clrf	_ErrCounterX& (0+255),b
  1846  0002C0  6BA0               	clrf	_i& (0+255),b
  1847  0002C2  D01D               	goto	i1l3319
  1848  0002C4                     i1l3305:
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;interrupt.c: 72: if(AdcMeasData[i] > 15){
  1852  0002C4  51A0               	movf	_i& (0+255),w,b
  1853  0002C6  0D02               	mullw	2
  1854  0002C8  50F3               	movf	prodl,w,c
  1855  0002CA  0F60               	addlw	low _AdcMeasData
  1856  0002CC  6ED9               	movwf	fsr2l,c
  1857  0002CE  6ADA               	clrf	fsr2h,c
  1858  0002D0  CFDE F0D1          	movff	postinc2,??_LISR
  1859  0002D4  CFDD F0D2          	movff	postdec2,??_LISR+1
  1860  0002D8  0E10               	movlw	16
  1861  0002DA  5DD1               	subwf	??_LISR& (0+255),w,b
  1862  0002DC  0E00               	movlw	0
  1863  0002DE  59D2               	subwfb	(??_LISR+1)& (0+255),w,b
  1864  0002E0  E307               	bnc	i1l3311
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;interrupt.c: 73: AdcChData[ErrCounterX++] = i;
  1868  0002E2  519D               	movf	_ErrCounterX& (0+255),w,b
  1869  0002E4  0F7C               	addlw	low _AdcChData
  1870  0002E6  6ED9               	movwf	fsr2l,c
  1871  0002E8  6ADA               	clrf	fsr2h,c
  1872  0002EA  C0A0  FFDF         	movff	_i,indf2
  1873                           
  1874                           ; BSR set to: 0
  1875  0002EE  2B9D               	incf	_ErrCounterX& (0+255),f,b
  1876  0002F0                     i1l3311:
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;interrupt.c: 74: }
  1880                           ;interrupt.c: 75: if(ErrCounterX == 2){
  1881  0002F0  519D               	movf	_ErrCounterX& (0+255),w,b
  1882  0002F2  0A02               	xorlw	2
  1883  0002F4  E103               	bnz	i1l3317
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;interrupt.c: 76: ++ErrCounterX;
  1887  0002F6  2B9D               	incf	_ErrCounterX& (0+255),f,b
  1888                           
  1889                           ; BSR set to: 0
  1890                           ;interrupt.c: 77: i = 8;
  1891  0002F8  0E08               	movlw	8
  1892  0002FA  6FA0               	movwf	_i& (0+255),b
  1893  0002FC                     i1l3317:
  1894                           
  1895                           ; BSR set to: 0
  1896  0002FC  2BA0               	incf	_i& (0+255),f,b
  1897  0002FE                     i1l3319:
  1898                           
  1899                           ; BSR set to: 0
  1900  0002FE  0E07               	movlw	7
  1901  000300  65A0               	cpfsgt	_i& (0+255),b
  1902  000302  D7E0               	goto	i1l3305
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;interrupt.c: 78: }
  1906                           ;interrupt.c: 79: }
  1907                           ;interrupt.c: 81: for(ErrCounterY = 0, i = 8; i < 14; ++i){
  1908  000304  6B9E               	clrf	_ErrCounterY& (0+255),b
  1909                           
  1910                           ; BSR set to: 0
  1911  000306  0E08               	movlw	8
  1912  000308  6FA0               	movwf	_i& (0+255),b
  1913  00030A  D01E               	goto	i1l3337
  1914  00030C                     i1l3323:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;interrupt.c: 82: if(AdcMeasData[i] > 15){
  1918  00030C  51A0               	movf	_i& (0+255),w,b
  1919  00030E  0D02               	mullw	2
  1920  000310  50F3               	movf	prodl,w,c
  1921  000312  0F60               	addlw	low _AdcMeasData
  1922  000314  6ED9               	movwf	fsr2l,c
  1923  000316  6ADA               	clrf	fsr2h,c
  1924  000318  CFDE F0D1          	movff	postinc2,??_LISR
  1925  00031C  CFDD F0D2          	movff	postdec2,??_LISR+1
  1926  000320  0E10               	movlw	16
  1927  000322  5DD1               	subwf	??_LISR& (0+255),w,b
  1928  000324  0E00               	movlw	0
  1929  000326  59D2               	subwfb	(??_LISR+1)& (0+255),w,b
  1930  000328  E308               	bnc	i1l3329
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;interrupt.c: 83: AdcChData[ErrCounterX + ErrCounterY++] = i;
  1934  00032A  519D               	movf	_ErrCounterX& (0+255),w,b
  1935  00032C  0F7C               	addlw	low _AdcChData
  1936  00032E  259E               	addwf	_ErrCounterY& (0+255),w,b
  1937  000330  6ED9               	movwf	fsr2l,c
  1938  000332  6ADA               	clrf	fsr2h,c
  1939  000334  C0A0  FFDF         	movff	_i,indf2
  1940                           
  1941                           ; BSR set to: 0
  1942  000338  2B9E               	incf	_ErrCounterY& (0+255),f,b
  1943  00033A                     i1l3329:
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;interrupt.c: 84: }
  1947                           ;interrupt.c: 85: if(ErrCounterY == 2){
  1948  00033A  519E               	movf	_ErrCounterY& (0+255),w,b
  1949  00033C  0A02               	xorlw	2
  1950  00033E  E103               	bnz	i1l3335
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;interrupt.c: 86: ++ErrCounterY;
  1954  000340  2B9E               	incf	_ErrCounterY& (0+255),f,b
  1955                           
  1956                           ; BSR set to: 0
  1957                           ;interrupt.c: 87: i = 14;
  1958  000342  0E0E               	movlw	14
  1959  000344  6FA0               	movwf	_i& (0+255),b
  1960  000346                     i1l3335:
  1961                           
  1962                           ; BSR set to: 0
  1963  000346  2BA0               	incf	_i& (0+255),f,b
  1964  000348                     i1l3337:
  1965                           
  1966                           ; BSR set to: 0
  1967  000348  0E0D               	movlw	13
  1968  00034A  65A0               	cpfsgt	_i& (0+255),b
  1969  00034C  D7DF               	goto	i1l3323
  1970  00034E  D103               	goto	i1l3389
  1971  000350                     i1l3339:
  1972                           
  1973                           ; BSR set to: 0
  1974                           ;interrupt.c: 92: case 1:
  1975                           ;interrupt.c: 93: if(PresCounter > 30){
  1976  000350  0E1E               	movlw	30
  1977  000352  659F               	cpfsgt	_PresCounter& (0+255),b
  1978  000354  D006               	goto	i1l3343
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;interrupt.c: 94: BtnPressed = 0;
  1982  000356  6B9B               	clrf	_BtnPressed& (0+255),b
  1983                           
  1984                           ;interrupt.c: 95: Rez = 0.0;
  1985  000358  6B8A               	clrf	_Rez& (0+255),b
  1986  00035A  6B8B               	clrf	(_Rez+1)& (0+255),b
  1987  00035C  6B8C               	clrf	(_Rez+2)& (0+255),b
  1988  00035E  6B8D               	clrf	(_Rez+3)& (0+255),b
  1989                           
  1990                           ;interrupt.c: 96: } else{
  1991  000360  D10D               	goto	i1l3391
  1992  000362                     i1l3343:
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;interrupt.c: 97: ++PresCounter;
  1996  000362  2B9F               	incf	_PresCounter& (0+255),f,b
  1997  000364  D10B               	goto	i1l3391
  1998  000366                     i1l272:
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;interrupt.c: 101: PresCounter = 0;
  2002  000366  6B9F               	clrf	_PresCounter& (0+255),b
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;interrupt.c: 104: U1 = AdcMeasData[AdcChData[0]];
  2006  000368  517C               	movf	_AdcChData& (0+255),w,b
  2007  00036A  0D02               	mullw	2
  2008  00036C  50F3               	movf	prodl,w,c
  2009  00036E  0F60               	addlw	low _AdcMeasData
  2010  000370  6ED9               	movwf	fsr2l,c
  2011  000372  6ADA               	clrf	fsr2h,c
  2012  000374  CFDE F092          	movff	postinc2,_U1
  2013  000378  CFDD F093          	movff	postdec2,_U1+1
  2014                           
  2015                           ;interrupt.c: 105: U2 = AdcMeasData[AdcChData[1]];
  2016  00037C  517D               	movf	(_AdcChData+1)& (0+255),w,b
  2017  00037E  0D02               	mullw	2
  2018  000380  50F3               	movf	prodl,w,c
  2019  000382  0F60               	addlw	low _AdcMeasData
  2020  000384  6ED9               	movwf	fsr2l,c
  2021  000386  6ADA               	clrf	fsr2h,c
  2022  000388  CFDE F094          	movff	postinc2,_U2
  2023  00038C  CFDD F095          	movff	postdec2,_U2+1
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;interrupt.c: 106: if(U1 > U2){
  2027  000390  5192               	movf	_U1& (0+255),w,b
  2028  000392  5D94               	subwf	_U2& (0+255),w,b
  2029  000394  5193               	movf	(_U1+1)& (0+255),w,b
  2030  000396  5995               	subwfb	(_U2+1)& (0+255),w,b
  2031  000398  E219               	bc	i1l3351
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;interrupt.c: 107: U *= (U1 - U2);
  2035  00039A  C05C  F001         	movff	LISR@U,___lmul@multiplier
  2036  00039E  C05D  F002         	movff	LISR@U+1,___lmul@multiplier+1
  2037  0003A2  C05E  F003         	movff	LISR@U+2,___lmul@multiplier+2
  2038  0003A6  C05F  F004         	movff	LISR@U+3,___lmul@multiplier+3
  2039  0003AA  C092  F0D1         	movff	_U1,??_LISR
  2040  0003AE  C093  F0D2         	movff	_U1+1,??_LISR+1
  2041  0003B2  5194               	movf	_U2& (0+255),w,b
  2042  0003B4  5FD1               	subwf	??_LISR& (0+255),f,b
  2043  0003B6  5195               	movf	(_U2+1)& (0+255),w,b
  2044  0003B8  5BD2               	subwfb	(??_LISR+1)& (0+255),f,b
  2045  0003BA  C0D1  F005         	movff	??_LISR,___lmul@multiplicand
  2046  0003BE  C0D2  F006         	movff	??_LISR+1,___lmul@multiplicand+1
  2047  0003C2  6A07               	clrf	___lmul@multiplicand+2,c
  2048  0003C4  6A08               	clrf	___lmul@multiplicand+3,c
  2049  0003C6  ECC7  F08E         	call	___lmul	;wreg free
  2050  0003CA  D018               	goto	L3
  2051  0003CC                     i1l3351:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;interrupt.c: 109: U *= (U2 - U1);
  2055  0003CC  C05C  F001         	movff	LISR@U,___lmul@multiplier
  2056  0003D0  C05D  F002         	movff	LISR@U+1,___lmul@multiplier+1
  2057  0003D4  C05E  F003         	movff	LISR@U+2,___lmul@multiplier+2
  2058  0003D8  C05F  F004         	movff	LISR@U+3,___lmul@multiplier+3
  2059  0003DC  C094  F0D1         	movff	_U2,??_LISR
  2060  0003E0  C095  F0D2         	movff	_U2+1,??_LISR+1
  2061  0003E4  5192               	movf	_U1& (0+255),w,b
  2062  0003E6  5FD1               	subwf	??_LISR& (0+255),f,b
  2063  0003E8  5193               	movf	(_U1+1)& (0+255),w,b
  2064  0003EA  5BD2               	subwfb	(??_LISR+1)& (0+255),f,b
  2065  0003EC  C0D1  F005         	movff	??_LISR,___lmul@multiplicand
  2066  0003F0  C0D2  F006         	movff	??_LISR+1,___lmul@multiplicand+1
  2067  0003F4  6A07               	clrf	___lmul@multiplicand+2,c
  2068  0003F6  6A08               	clrf	___lmul@multiplicand+3,c
  2069  0003F8  ECC7  F08E         	call	___lmul	;wreg free
  2070  0003FC                     L3:
  2071  0003FC  C001  F05C         	movff	?___lmul,LISR@U
  2072  000400  C002  F05D         	movff	?___lmul+1,LISR@U+1
  2073  000404  C003  F05E         	movff	?___lmul+2,LISR@U+2
  2074  000408  C004  F05F         	movff	?___lmul+3,LISR@U+3
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;interrupt.c: 110: }
  2078                           ;interrupt.c: 111: Rez2 = U / (float) U2;
  2079  00040C  C05C  F00B         	movff	LISR@U,___lltofl@c
  2080  000410  C05D  F00C         	movff	LISR@U+1,___lltofl@c+1
  2081  000414  C05E  F00D         	movff	LISR@U+2,___lltofl@c+2
  2082  000418  C05F  F00E         	movff	LISR@U+3,___lltofl@c+3
  2083  00041C  EC5F  F08F         	call	___lltofl	;wreg free
  2084  000420  C00B  F00F         	movff	?___lltofl,___fldiv@f1
  2085  000424  C00C  F010         	movff	?___lltofl+1,___fldiv@f1+1
  2086  000428  C00D  F011         	movff	?___lltofl+2,___fldiv@f1+2
  2087  00042C  C00E  F012         	movff	?___lltofl+3,___fldiv@f1+3
  2088  000430  C094  F00B         	movff	_U2,___lwtofl@c
  2089  000434  C095  F00C         	movff	_U2+1,___lwtofl@c+1
  2090  000438  EC76  F08F         	call	___lwtofl	;wreg free
  2091  00043C  C00B  F013         	movff	?___lwtofl,___fldiv@f2
  2092  000440  C00C  F014         	movff	?___lwtofl+1,___fldiv@f2+1
  2093  000444  C00D  F015         	movff	?___lwtofl+2,___fldiv@f2+2
  2094  000448  C00E  F016         	movff	?___lwtofl+3,___fldiv@f2+3
  2095  00044C  ECD7  F08B         	call	___fldiv	;wreg free
  2096  000450  C00F  F08E         	movff	?___fldiv,_Rez2
  2097  000454  C010  F08F         	movff	?___fldiv+1,_Rez2+1
  2098  000458  C011  F090         	movff	?___fldiv+2,_Rez2+2
  2099  00045C  C012  F091         	movff	?___fldiv+3,_Rez2+3
  2100                           
  2101                           ;interrupt.c: 112: if(!BtnPressed){
  2102  000460  0100               	movlb	0	; () banked
  2103  000462  679B               	tstfsz	_BtnPressed& (0+255),b
  2104  000464  D00A               	goto	i1l3359
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;interrupt.c: 113: BtnPressed = 1;
  2108  000466  0E01               	movlw	1
  2109  000468  6F9B               	movwf	_BtnPressed& (0+255),b
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;interrupt.c: 114: Rez = Rez2;
  2113  00046A  C08E  F08A         	movff	_Rez2,_Rez
  2114  00046E  C08F  F08B         	movff	_Rez2+1,_Rez+1
  2115  000472  C090  F08C         	movff	_Rez2+2,_Rez+2
  2116  000476  C091  F08D         	movff	_Rez2+3,_Rez+3
  2117  00047A                     i1l3359:
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;interrupt.c: 115: }
  2121                           ;interrupt.c: 118: Rez = ((Rez * (1.0 - 0.05)) + (Rez2 * 0.05));
  2122  00047A  0E33               	movlw	51
  2123  00047C  6E13               	movwf	___flmul@f2,c
  2124  00047E  6E14               	movwf	___flmul@f2+1,c
  2125  000480  0E73               	movlw	115
  2126  000482  6E15               	movwf	___flmul@f2+2,c
  2127  000484  0E3F               	movlw	63
  2128  000486  6E16               	movwf	___flmul@f2+3,c
  2129  000488  C08A  F00F         	movff	_Rez,___flmul@f1
  2130  00048C  C08B  F010         	movff	_Rez+1,___flmul@f1+1
  2131  000490  C08C  F011         	movff	_Rez+2,___flmul@f1+2
  2132  000494  C08D  F012         	movff	_Rez+3,___flmul@f1+3
  2133  000498  EC44  F08A         	call	___flmul	;wreg free
  2134  00049C  C00F  F033         	movff	?___flmul,___fladd@f1
  2135  0004A0  C010  F034         	movff	?___flmul+1,___fladd@f1+1
  2136  0004A4  C011  F035         	movff	?___flmul+2,___fladd@f1+2
  2137  0004A8  C012  F036         	movff	?___flmul+3,___fladd@f1+3
  2138  0004AC  0ECD               	movlw	205
  2139  0004AE  6E13               	movwf	___flmul@f2,c
  2140  0004B0  0ECC               	movlw	204
  2141  0004B2  6E14               	movwf	___flmul@f2+1,c
  2142  0004B4  0E4C               	movlw	76
  2143  0004B6  6E15               	movwf	___flmul@f2+2,c
  2144  0004B8  0E3D               	movlw	61
  2145  0004BA  6E16               	movwf	___flmul@f2+3,c
  2146  0004BC  C08E  F00F         	movff	_Rez2,___flmul@f1
  2147  0004C0  C08F  F010         	movff	_Rez2+1,___flmul@f1+1
  2148  0004C4  C090  F011         	movff	_Rez2+2,___flmul@f1+2
  2149  0004C8  C091  F012         	movff	_Rez2+3,___flmul@f1+3
  2150  0004CC  EC44  F08A         	call	___flmul	;wreg free
  2151  0004D0  C00F  F037         	movff	?___flmul,___fladd@f2
  2152  0004D4  C010  F038         	movff	?___flmul+1,___fladd@f2+1
  2153  0004D8  C011  F039         	movff	?___flmul+2,___fladd@f2+2
  2154  0004DC  C012  F03A         	movff	?___flmul+3,___fladd@f2+3
  2155  0004E0  EC49  F087         	call	___fladd	;wreg free
  2156  0004E4  C033  F08A         	movff	?___fladd,_Rez
  2157  0004E8  C034  F08B         	movff	?___fladd+1,_Rez+1
  2158  0004EC  C035  F08C         	movff	?___fladd+2,_Rez+2
  2159  0004F0  C036  F08D         	movff	?___fladd+3,_Rez+3
  2160                           
  2161                           ;interrupt.c: 119: TMR1ON = 1;
  2162  0004F4  80CD               	bsf	4045,0,c	;volatile
  2163                           
  2164                           ;interrupt.c: 120: break;
  2165  0004F6  D042               	goto	i1l3391
  2166  0004F8                     i1l3363:
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;interrupt.c: 122: UpdateLedColor(255);
  2170  0004F8  0EFF               	movlw	255
  2171  0004FA  ECD6  F08F         	call	_UpdateLedColor
  2172                           
  2173                           ;interrupt.c: 123: if(ErrCounterX > 2 && ErrCounterY < 2){
  2174  0004FE  0E02               	movlw	2
  2175  000500  0100               	movlb	0	; () banked
  2176  000502  659D               	cpfsgt	_ErrCounterX& (0+255),b
  2177  000504  D008               	goto	i1l3371
  2178                           
  2179                           ; BSR set to: 0
  2180  000506  5D9E               	subwf	_ErrCounterY& (0+255),w,b
  2181  000508  E206               	bc	i1l3371
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;interrupt.c: 124: UpdateLedData("E1");
  2185  00050A  0EFF               	movlw	high STR_7
  2186  00050C  6E02               	movwf	i1UpdateLedData@data+1,c
  2187  00050E  0EF2               	movlw	low STR_7
  2188  000510  6E01               	movwf	i1UpdateLedData@data,c
  2189  000512  ECE7  F088         	call	i1_UpdateLedData	;wreg free
  2190  000516                     i1l3371:
  2191                           
  2192                           ;interrupt.c: 125: }
  2193                           ;interrupt.c: 126: if(ErrCounterX < 2 && ErrCounterY > 2){
  2194  000516  0E02               	movlw	2
  2195  000518  0100               	movlb	0	; () banked
  2196  00051A  5D9D               	subwf	_ErrCounterX& (0+255),w,b
  2197  00051C  E209               	bc	i1l3377
  2198                           
  2199                           ; BSR set to: 0
  2200  00051E  0E02               	movlw	2
  2201  000520  659E               	cpfsgt	_ErrCounterY& (0+255),b
  2202  000522  D006               	goto	i1l3377
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;interrupt.c: 127: UpdateLedData("E2");
  2206  000524  0EFF               	movlw	high STR_8
  2207  000526  6E02               	movwf	i1UpdateLedData@data+1,c
  2208  000528  0EF5               	movlw	low STR_8
  2209  00052A  6E01               	movwf	i1UpdateLedData@data,c
  2210  00052C  ECE7  F088         	call	i1_UpdateLedData	;wreg free
  2211  000530                     i1l3377:
  2212                           
  2213                           ;interrupt.c: 128: }
  2214                           ;interrupt.c: 129: if(ErrCounterX > 2 && ErrCounterY > 2){
  2215  000530  0E02               	movlw	2
  2216  000532  0100               	movlb	0	; () banked
  2217  000534  659D               	cpfsgt	_ErrCounterX& (0+255),b
  2218  000536  D008               	goto	i1l3383
  2219                           
  2220                           ; BSR set to: 0
  2221  000538  659E               	cpfsgt	_ErrCounterY& (0+255),b
  2222  00053A  D006               	goto	i1l3383
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;interrupt.c: 130: UpdateLedData("E3");
  2226  00053C  0EFF               	movlw	high STR_9
  2227  00053E  6E02               	movwf	i1UpdateLedData@data+1,c
  2228  000540  0EF8               	movlw	low STR_9
  2229  000542  6E01               	movwf	i1UpdateLedData@data,c
  2230  000544  ECE7  F088         	call	i1_UpdateLedData	;wreg free
  2231  000548                     i1l3383:
  2232                           
  2233                           ;interrupt.c: 131: }
  2234                           ;interrupt.c: 132: Rez = 0.0;
  2235  000548  0100               	movlb	0	; () banked
  2236  00054A  6B8A               	clrf	_Rez& (0+255),b
  2237  00054C  6B8B               	clrf	(_Rez+1)& (0+255),b
  2238  00054E  6B8C               	clrf	(_Rez+2)& (0+255),b
  2239  000550  6B8D               	clrf	(_Rez+3)& (0+255),b
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;interrupt.c: 133: TMR1ON = 0;
  2243  000552  90CD               	bcf	4045,0,c	;volatile
  2244                           
  2245                           ;interrupt.c: 134: break;
  2246  000554  D013               	goto	i1l3391
  2247  000556                     i1l3389:
  2248                           
  2249                           ; BSR set to: 0
  2250  000556  519E               	movf	_ErrCounterY& (0+255),w,b
  2251  000558  C09D  F0D1         	movff	_ErrCounterX,??_LISR
  2252  00055C  6BD2               	clrf	(??_LISR+1)& (0+255),b
  2253  00055E  27D1               	addwf	??_LISR& (0+255),f,b
  2254  000560  0E00               	movlw	0
  2255  000562  23D2               	addwfc	(??_LISR+1)& (0+255),f,b
  2256                           
  2257                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2258                           ; Switch size 1, requested type "space"
  2259                           ; Number of cases is 1, Range of values is 0 to 0
  2260                           ; switch strategies available:
  2261                           ; Name         Instructions Cycles
  2262                           ; simple_byte            4     3 (average)
  2263                           ;	Chosen strategy is simple_byte
  2264  000564  51D2               	movf	(??_LISR+1)& (0+255),w,b
  2265  000566  E1C8               	bnz	i1l3363
  2266                           
  2267                           ; BSR set to: 0
  2268                           ; Switch size 1, requested type "space"
  2269                           ; Number of cases is 3, Range of values is 0 to 2
  2270                           ; switch strategies available:
  2271                           ; Name         Instructions Cycles
  2272                           ; simple_byte           10     6 (average)
  2273                           ;	Chosen strategy is simple_byte
  2274  000568  51D1               	movf	??_LISR& (0+255),w,b
  2275  00056A  E101 D6F1          	bz	i1l3339
  2276  00056E  0A01               	xorlw	1	; case 1
  2277  000570  E101 D6EE          	bz	i1l3339
  2278  000574  0A03               	xorlw	3	; case 2
  2279  000576  E101 D6F6          	bz	i1l272
  2280  00057A  D7BE               	goto	i1l3363
  2281  00057C                     i1l3391:
  2282                           
  2283                           ;interrupt.c: 136: UpdatePins();
  2284  00057C  ECCC  F08A         	call	_UpdatePins	;wreg free
  2285  000580                     i1l3393:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;interrupt.c: 137: }
  2289                           ;interrupt.c: 138: TMR2ON = 1;
  2290  000580  84CA               	bsf	4042,2,c	;volatile
  2291  000582                     i1l280:
  2292  000582  C0E1  FFF5         	movff	??_LISR+16,tablat
  2293  000586  C0E0  FFF8         	movff	??_LISR+15,tblptru
  2294  00058A  C0DF  FFF7         	movff	??_LISR+14,tblptrh
  2295  00058E  C0DE  FFF6         	movff	??_LISR+13,tblptrl
  2296  000592  C0DD  FFF4         	movff	??_LISR+12,prodh
  2297  000596  C0DC  FFF3         	movff	??_LISR+11,prodl
  2298  00059A  C0DB  FFDA         	movff	??_LISR+10,fsr2h
  2299  00059E  C0DA  FFD9         	movff	??_LISR+9,fsr2l
  2300  0005A2  C0D9  FFEA         	movff	??_LISR+8,fsr0h
  2301  0005A6  C0D8  FFE9         	movff	??_LISR+7,fsr0l
  2302  0005AA  C0D7  FFE0         	movff	??_LISR+6,bsr
  2303  0005AE  C0D6  FFE8         	movff	??_LISR+5,wreg
  2304  0005B2  C0D5  FFD8         	movff	??_LISR+4,status
  2305  0005B6  0010               	retfie	
  2306  0005B8                     __end_of_LISR:
  2307                           	opt stack 0
  2308                           tblptru	equ	0xFF8
  2309                           tblptrh	equ	0xFF7
  2310                           tblptrl	equ	0xFF6
  2311                           tablat	equ	0xFF5
  2312                           prodh	equ	0xFF4
  2313                           prodl	equ	0xFF3
  2314                           intcon	equ	0xFF2
  2315                           indf0	equ	0xFEF
  2316                           postinc0	equ	0xFEE
  2317                           fsr0h	equ	0xFEA
  2318                           fsr0l	equ	0xFE9
  2319                           wreg	equ	0xFE8
  2320                           postdec1	equ	0xFE5
  2321                           fsr1l	equ	0xFE1
  2322                           bsr	equ	0xFE0
  2323                           indf2	equ	0xFDF
  2324                           postinc2	equ	0xFDE
  2325                           postdec2	equ	0xFDD
  2326                           fsr2h	equ	0xFDA
  2327                           fsr2l	equ	0xFD9
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function i1_UpdateLedData *****************
  2331 ;; Defined at:
  2332 ;;		line 46 in file "led_display.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;  data            2    0[COMRAM] PTR unsigned char 
  2335 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(5), 
  2336 ;;		 -> Buf(10), STR_1(7), 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  UpdateLedDat    1    4[COMRAM] unsigned char 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;		None               void
  2341 ;; Registers used:
  2342 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2343 ;; Tracked objects:
  2344 ;;		On entry : F/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2351 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2352 ;;Total ram usage:        5 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    2
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_LISR
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text3
  2363  0111CE                     __ptext3:
  2364                           	opt stack 0
  2365  0111CE                     i1_UpdateLedData:
  2366                           	opt stack 26
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;led_display.c: 47: for(uint8_t i = 0; data[i]; i++){
  2370                           
  2371                           ;incstack = 0
  2372  0111CE  6A05               	clrf	i1UpdateLedData@i,c
  2373  0111D0  D0AB               	goto	i1l3185
  2374  0111D2                     i1l3161:
  2375                           
  2376                           ;led_display.c: 50: case '1':
  2377                           ;led_display.c: 51: case '2':
  2378                           ;led_display.c: 52: case '3':
  2379                           ;led_display.c: 53: case '4':
  2380                           ;led_display.c: 54: case '5':
  2381                           ;led_display.c: 55: case '6':
  2382                           ;led_display.c: 56: case '7':
  2383                           ;led_display.c: 57: case '8':
  2384                           ;led_display.c: 58: case '9':
  2385                           ;led_display.c: 59: Data[i] = data[i] - '0';
  2386  0111D2  5005               	movf	i1UpdateLedData@i,w,c
  2387  0111D4  0100               	movlb	0	; () banked
  2388  0111D6  0FE2               	addlw	low _Data
  2389  0111D8  6ED9               	movwf	fsr2l,c
  2390  0111DA  6ADA               	clrf	fsr2h,c
  2391  0111DC  5005               	movf	i1UpdateLedData@i,w,c
  2392  0111DE  2401               	addwf	i1UpdateLedData@data,w,c
  2393  0111E0  6E03               	movwf	??i1_UpdateLedData& (0+255),c
  2394  0111E2  0E00               	movlw	0
  2395  0111E4  2002               	addwfc	i1UpdateLedData@data+1,w,c
  2396  0111E6  6E04               	movwf	(??i1_UpdateLedData+1)& (0+255),c
  2397  0111E8  C003  FFF6         	movff	??i1_UpdateLedData,tblptrl
  2398  0111EC  C004  FFF7         	movff	??i1_UpdateLedData+1,tblptrh
  2399  0111F0  0E00               	movlw	low (__mediumconst shr (0+16))
  2400  0111F2  6EF8               	movwf	tblptru,c
  2401  0111F4  0E0E               	movlw	(high __ramtop+-1)
  2402  0111F6  64F7               	cpfsgt	tblptrh,c
  2403  0111F8  D003               	bra	i1u339_27
  2404  0111FA  0008               	tblrd		*
  2405  0111FC  50F5               	movf	tablat,w,c
  2406  0111FE  D005               	bra	i1u339_20
  2407  011200                     i1u339_27:
  2408  011200  CFF6 FFE9          	movff	tblptrl,fsr0l
  2409  011204  CFF7 FFEA          	movff	tblptrh,fsr0h
  2410  011208  50EF               	movf	indf0,w,c
  2411  01120A                     i1u339_20:
  2412  01120A  0FD0               	addlw	208
  2413  01120C  D02A               	goto	L5
  2414  01120E                     i1l3163:
  2415                           
  2416                           ;led_display.c: 62: Data[i] = 10;
  2417  01120E  5005               	movf	i1UpdateLedData@i,w,c
  2418  011210  0100               	movlb	0	; () banked
  2419  011212  0FE2               	addlw	low _Data
  2420  011214  6ED9               	movwf	fsr2l,c
  2421  011216  6ADA               	clrf	fsr2h,c
  2422  011218  0E0A               	movlw	10
  2423  01121A  D023               	goto	L5
  2424  01121C                     i1l3165:
  2425                           
  2426                           ;led_display.c: 65: Data[i] = data[i];
  2427  01121C  5005               	movf	i1UpdateLedData@i,w,c
  2428  01121E  2401               	addwf	i1UpdateLedData@data,w,c
  2429  011220  6E03               	movwf	??i1_UpdateLedData& (0+255),c
  2430  011222  0E00               	movlw	0
  2431  011224  2002               	addwfc	i1UpdateLedData@data+1,w,c
  2432  011226  6E04               	movwf	(??i1_UpdateLedData+1)& (0+255),c
  2433  011228  C003  FFF6         	movff	??i1_UpdateLedData,tblptrl
  2434  01122C  C004  FFF7         	movff	??i1_UpdateLedData+1,tblptrh
  2435  011230  0E00               	movlw	low (__mediumconst shr (0+16))
  2436  011232  6EF8               	movwf	tblptru,c
  2437  011234  5005               	movf	i1UpdateLedData@i,w,c
  2438  011236  0100               	movlb	0	; () banked
  2439  011238  0FE2               	addlw	low _Data
  2440  01123A  6ED9               	movwf	fsr2l,c
  2441  01123C  6ADA               	clrf	fsr2h,c
  2442  01123E  0E0E               	movlw	(high __ramtop+-1)
  2443  011240  64F7               	cpfsgt	tblptrh,c
  2444  011242  D003               	bra	i1u340_27
  2445  011244  0008               	tblrd		*
  2446  011246  50F5               	movf	tablat,w,c
  2447  011248  D005               	bra	i1u340_20
  2448  01124A                     i1u340_27:
  2449  01124A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2450  01124E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2451  011252  50EF               	movf	indf0,w,c
  2452  011254                     i1u340_20:
  2453  011254  D006               	goto	L5
  2454  011256                     i1l3167:
  2455                           
  2456                           ;led_display.c: 68: Data[i] = 11;
  2457  011256  5005               	movf	i1UpdateLedData@i,w,c
  2458  011258  0100               	movlb	0	; () banked
  2459  01125A  0FE2               	addlw	low _Data
  2460  01125C  6ED9               	movwf	fsr2l,c
  2461  01125E  6ADA               	clrf	fsr2h,c
  2462  011260  0E0B               	movlw	11
  2463  011262                     L5:
  2464  011262  6EDF               	movwf	indf2,c
  2465                           
  2466                           ;led_display.c: 69: break;
  2467  011264  D060               	goto	i1l3183
  2468  011266                     i1l3169:
  2469                           
  2470                           ;led_display.c: 71: Data[0] = 12;
  2471  011266  0E0C               	movlw	12
  2472  011268  0100               	movlb	0	; () banked
  2473  01126A  6FE2               	movwf	_Data& (0+255),b
  2474                           
  2475                           ;led_display.c: 72: Data[1] = 13;
  2476  01126C  0E0D               	movlw	13
  2477  01126E  6FE3               	movwf	(_Data+1)& (0+255),b
  2478                           
  2479                           ;led_display.c: 73: Data[2] = 13;
  2480  011270  6FE4               	movwf	(_Data+2)& (0+255),b
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;led_display.c: 74: Data[3] = data[++i] - '0';
  2484  011272  2A05               	incf	i1UpdateLedData@i,f,c
  2485  011274  5005               	movf	i1UpdateLedData@i& (0+255),w,c
  2486  011276  2401               	addwf	i1UpdateLedData@data,w,c
  2487  011278  6E03               	movwf	??i1_UpdateLedData& (0+255),c
  2488  01127A  0E00               	movlw	0
  2489  01127C  2002               	addwfc	i1UpdateLedData@data+1,w,c
  2490  01127E  6E04               	movwf	(??i1_UpdateLedData+1)& (0+255),c
  2491  011280  C003  FFF6         	movff	??i1_UpdateLedData,tblptrl
  2492  011284  C004  FFF7         	movff	??i1_UpdateLedData+1,tblptrh
  2493  011288  0E00               	movlw	low (__mediumconst shr (0+16))
  2494  01128A  6EF8               	movwf	tblptru,c
  2495  01128C  0E0E               	movlw	(high __ramtop+-1)
  2496  01128E  64F7               	cpfsgt	tblptrh,c
  2497  011290  D003               	bra	i1u341_27
  2498  011292  0008               	tblrd		*
  2499  011294  50F5               	movf	tablat,w,c
  2500  011296  D005               	bra	i1u341_20
  2501  011298                     i1u341_27:
  2502  011298  CFF6 FFE9          	movff	tblptrl,fsr0l
  2503  01129C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2504  0112A0  50EF               	movf	indf0,w,c
  2505  0112A2                     i1u341_20:
  2506  0112A2  0FD0               	addlw	208
  2507  0112A4  0100               	movlb	0	; () banked
  2508  0112A6  6FE5               	movwf	(_Data+3)& (0+255),b
  2509  0112A8  D058               	goto	i1l92
  2510  0112AA                     i1l3181:
  2511  0112AA  5005               	movf	i1UpdateLedData@i,w,c
  2512  0112AC  2401               	addwf	i1UpdateLedData@data,w,c
  2513  0112AE  6E03               	movwf	??i1_UpdateLedData& (0+255),c
  2514  0112B0  0E00               	movlw	0
  2515  0112B2  2002               	addwfc	i1UpdateLedData@data+1,w,c
  2516  0112B4  6E04               	movwf	(??i1_UpdateLedData+1)& (0+255),c
  2517  0112B6  C003  FFF6         	movff	??i1_UpdateLedData,tblptrl
  2518  0112BA  C004  FFF7         	movff	??i1_UpdateLedData+1,tblptrh
  2519  0112BE  0E00               	movlw	low (__mediumconst shr (0+16))
  2520  0112C0  6EF8               	movwf	tblptru,c
  2521  0112C2  0E0E               	movlw	(high __ramtop+-1)
  2522  0112C4  64F7               	cpfsgt	tblptrh,c
  2523  0112C6  D003               	bra	i1u342_27
  2524  0112C8  0008               	tblrd		*
  2525  0112CA  50F5               	movf	tablat,w,c
  2526  0112CC  D005               	bra	i1u342_20
  2527  0112CE                     i1u342_27:
  2528  0112CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  2529  0112D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  2530  0112D6  50EF               	movf	indf0,w,c
  2531  0112D8                     i1u342_20:
  2532                           
  2533                           ; Switch size 1, requested type "space"
  2534                           ; Number of cases is 14, Range of values is 32 to 69
  2535                           ; switch strategies available:
  2536                           ; Name         Instructions Cycles
  2537                           ; simple_byte           43    22 (average)
  2538                           ;	Chosen strategy is simple_byte
  2539  0112D8  0A20               	xorlw	32	; case 32
  2540  0112DA  E0BD               	bz	i1l3167
  2541  0112DC  0A0D               	xorlw	13	; case 45
  2542  0112DE  E097               	bz	i1l3163
  2543  0112E0  0A03               	xorlw	3	; case 46
  2544  0112E2  E09C               	bz	i1l3165
  2545  0112E4  0A1E               	xorlw	30	; case 48
  2546  0112E6  E101 D774          	bz	i1l3161
  2547  0112EA  0A01               	xorlw	1	; case 49
  2548  0112EC  E101 D771          	bz	i1l3161
  2549  0112F0  0A03               	xorlw	3	; case 50
  2550  0112F2  E101 D76E          	bz	i1l3161
  2551  0112F6  0A01               	xorlw	1	; case 51
  2552  0112F8  E101 D76B          	bz	i1l3161
  2553  0112FC  0A07               	xorlw	7	; case 52
  2554  0112FE  E101 D768          	bz	i1l3161
  2555  011302  0A01               	xorlw	1	; case 53
  2556  011304  E101 D765          	bz	i1l3161
  2557  011308  0A03               	xorlw	3	; case 54
  2558  01130A  E101 D762          	bz	i1l3161
  2559  01130E  0A01               	xorlw	1	; case 55
  2560  011310  E101 D75F          	bz	i1l3161
  2561  011314  0A0F               	xorlw	15	; case 56
  2562  011316  E101 D75C          	bz	i1l3161
  2563  01131A  0A01               	xorlw	1	; case 57
  2564  01131C  E101 D759          	bz	i1l3161
  2565  011320  0A7C               	xorlw	124	; case 69
  2566  011322  E0A1               	bz	i1l3169
  2567  011324  D798               	goto	i1l3167
  2568  011326                     i1l3183:
  2569  011326  2A05               	incf	i1UpdateLedData@i,f,c
  2570  011328                     i1l3185:
  2571  011328  5005               	movf	i1UpdateLedData@i,w,c
  2572  01132A  2401               	addwf	i1UpdateLedData@data,w,c
  2573  01132C  6E03               	movwf	??i1_UpdateLedData& (0+255),c
  2574  01132E  0E00               	movlw	0
  2575  011330  2002               	addwfc	i1UpdateLedData@data+1,w,c
  2576  011332  6E04               	movwf	(??i1_UpdateLedData+1)& (0+255),c
  2577  011334  C003  FFF6         	movff	??i1_UpdateLedData,tblptrl
  2578  011338  C004  FFF7         	movff	??i1_UpdateLedData+1,tblptrh
  2579  01133C  0E00               	movlw	low (__mediumconst shr (0+16))
  2580  01133E  6EF8               	movwf	tblptru,c
  2581  011340  0E0E               	movlw	(high __ramtop+-1)
  2582  011342  64F7               	cpfsgt	tblptrh,c
  2583  011344  D003               	bra	i1u343_27
  2584  011346  0008               	tblrd		*
  2585  011348  50F5               	movf	tablat,w,c
  2586  01134A  D005               	bra	i1u343_20
  2587  01134C                     i1u343_27:
  2588  01134C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2589  011350  CFF7 FFEA          	movff	tblptrh,fsr0h
  2590  011354  50EF               	movf	indf0,w,c
  2591  011356                     i1u343_20:
  2592  011356  0900               	iorlw	0
  2593  011358  E1A8               	bnz	i1l3181
  2594  01135A                     i1l92:
  2595  01135A  0012               	return	
  2596  01135C                     __end_ofi1_UpdateLedData:
  2597                           	opt stack 0
  2598                           tblptru	equ	0xFF8
  2599                           tblptrh	equ	0xFF7
  2600                           tblptrl	equ	0xFF6
  2601                           tablat	equ	0xFF5
  2602                           prodh	equ	0xFF4
  2603                           prodl	equ	0xFF3
  2604                           intcon	equ	0xFF2
  2605                           indf0	equ	0xFEF
  2606                           postinc0	equ	0xFEE
  2607                           fsr0h	equ	0xFEA
  2608                           fsr0l	equ	0xFE9
  2609                           wreg	equ	0xFE8
  2610                           postdec1	equ	0xFE5
  2611                           fsr1l	equ	0xFE1
  2612                           bsr	equ	0xFE0
  2613                           indf2	equ	0xFDF
  2614                           postinc2	equ	0xFDE
  2615                           postdec2	equ	0xFDD
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _sprintf *****************
  2621 ;; Defined at:
  2622 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  sp              1    wreg     PTR unsigned char 
  2625 ;;		 -> Buf(10), 
  2626 ;;  f               2   75[COMRAM] PTR const unsigned char 
  2627 ;;		 -> STR_5(3), STR_4(5), STR_3(6), STR_2(7), 
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;  sp              1   32[BANK0 ] PTR unsigned char 
  2630 ;;		 -> Buf(10), 
  2631 ;;  vd              4    8[BANK0 ] unsigned long 
  2632 ;;  vd              4   12[BANK0 ] unsigned long 
  2633 ;;  _val            5   23[BANK0 ] struct .
  2634 ;;  fval            4   33[BANK0 ] struct .
  2635 ;;  integ           4   19[BANK0 ] struct .
  2636 ;;  ival            4    0        struct .
  2637 ;;  prec            2   30[BANK0 ] int 
  2638 ;;  exp             2   28[BANK0 ] int 
  2639 ;;  flag            2   17[BANK0 ] unsigned short 
  2640 ;;  width           2    0        int 
  2641 ;;  c               1   37[BANK0 ] char 
  2642 ;;  ap              1   16[BANK0 ] PTR void [1]
  2643 ;;		 -> ?_sprintf(2), 
  2644 ;;  d               1    0        unsigned char 
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  2   75[COMRAM] int 
  2647 ;; Registers used:
  2648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : F/0
  2651 ;;		On exit  : F/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2654 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2655 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2656 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2657 ;;      Totals:        12      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2658 ;;Total ram usage:       50 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    5
  2661 ;; This function calls:
  2662 ;;		___awdiv
  2663 ;;		___fladd
  2664 ;;		___flge
  2665 ;;		___flmul
  2666 ;;		___flneg
  2667 ;;		___flsub
  2668 ;;		___fltol
  2669 ;;		___lldiv
  2670 ;;		___llmod
  2671 ;;		___lltofl
  2672 ;;		___wmul
  2673 ;;		__div_to_l_
  2674 ;;		__tdiv_to_l_
  2675 ;;		_fround
  2676 ;;		_isdigit
  2677 ;;		_scale
  2678 ;; This function is called by:
  2679 ;;		_LISR
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text4
  2684  010000                     __ptext4:
  2685                           	opt stack 0
  2686  010000                     _sprintf:
  2687                           	opt stack 23
  2688                           
  2689                           ;incstack = 0
  2690                           ;sprintf@sp stored from wreg
  2691  010000  6FCB               	movwf	sprintf@sp& (0+255),b
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;doprnt.c: 494: va_list ap;
  2695                           ;doprnt.c: 499: signed char c;
  2696                           ;doprnt.c: 501: int width;
  2697                           ;doprnt.c: 504: int prec;
  2698                           ;doprnt.c: 508: unsigned short flag;
  2699                           ;doprnt.c: 515: char d;
  2700                           ;doprnt.c: 516: double fval, integ;
  2701                           ;doprnt.c: 517: int exp;
  2702                           ;doprnt.c: 518: double ival;
  2703                           ;doprnt.c: 519: union {
  2704                           ;doprnt.c: 520: unsigned long _val;
  2705                           ;doprnt.c: 521: struct {
  2706                           ;doprnt.c: 522: const char * _cp;
  2707                           ;doprnt.c: 523: unsigned _len;
  2708                           ;doprnt.c: 524: } _str;
  2709                           ;doprnt.c: 525: } _val;
  2710                           ;doprnt.c: 542: *ap = __va_start();
  2711  010002  0E4E               	movlw	low (?_sprintf+2)
  2712  010004  6FBB               	movwf	sprintf@ap& (0+255),b
  2713                           
  2714                           ;doprnt.c: 545: while(c = *f++) {
  2715  010006  D3FA               	goto	i1l3105
  2716  010008                     i1l2881:
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;doprnt.c: 547: if(c != '%')
  2720  010008  51D0               	movf	sprintf@c& (0+255),w,b
  2721  01000A  0A25               	xorlw	37
  2722  01000C  E007               	bz	i1l333
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;doprnt.c: 549: {
  2726                           ;doprnt.c: 550: ((*sp++ = (c)));
  2727  01000E  51CB               	movf	sprintf@sp& (0+255),w,b
  2728  010010  6ED9               	movwf	fsr2l,c
  2729  010012  6ADA               	clrf	fsr2h,c
  2730  010014  C0D0  FFDF         	movff	sprintf@c,indf2
  2731                           
  2732                           ; BSR set to: 0
  2733  010018  2BCB               	incf	sprintf@sp& (0+255),f,b
  2734                           
  2735                           ;doprnt.c: 551: continue;
  2736  01001A  D3F0               	goto	i1l3105
  2737  01001C                     i1l333:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 552: }
  2741                           ;doprnt.c: 557: flag = 0;
  2742  01001C  6BBC               	clrf	sprintf@flag& (0+255),b
  2743  01001E  6BBD               	clrf	(sprintf@flag+1)& (0+255),b
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;doprnt.c: 620: if(*f == '.') {
  2747  010020  C04C  FFF6         	movff	sprintf@f,tblptrl
  2748  010024  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  2749  010028                     	if	0	;tblptru may be non-zero
  2750  010028                     	endif
  2751  010028                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2752  010028  0E00               	movlw	low (__mediumconst shr (0+16))
  2753  01002A  6EF8               	movwf	tblptru,c
  2754  01002C                     	endif
  2755  01002C  0008               	tblrd		*
  2756  01002E  50F5               	movf	tablat,w,c
  2757  010030  0A2E               	xorlw	46
  2758  010032  E12E               	bnz	i1l334
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;doprnt.c: 621: flag |= 0x4000;
  2762  010034  8DBD               	bsf	(sprintf@flag+1)& (0+255),6,b
  2763                           
  2764                           ;doprnt.c: 622: f++;
  2765  010036  4A4C               	infsnz	sprintf@f,f,c
  2766  010038  2A4D               	incf	sprintf@f+1,f,c
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;doprnt.c: 629: {
  2770                           ;doprnt.c: 630: prec = 0;
  2771  01003A  6BC9               	clrf	sprintf@prec& (0+255),b
  2772  01003C  6BCA               	clrf	(sprintf@prec+1)& (0+255),b
  2773                           
  2774                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  2775  01003E  D01C               	goto	i1l2897
  2776  010040                     i1l2893:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  2780  010040  C0C9  F001         	movff	sprintf@prec,___wmul@multiplier
  2781  010044  C0CA  F002         	movff	sprintf@prec+1,___wmul@multiplier+1
  2782  010048  6A04               	clrf	___wmul@multiplicand+1,c
  2783  01004A  0E0A               	movlw	10
  2784  01004C  6E03               	movwf	___wmul@multiplicand,c
  2785  01004E  EC9E  F08F         	call	___wmul	;wreg free
  2786  010052  C04C  FFF6         	movff	sprintf@f,tblptrl
  2787  010056  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  2788  01005A                     	if	0	;tblptru may be non-zero
  2789  01005A                     	endif
  2790  01005A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2791  01005A  0E00               	movlw	low (__mediumconst shr (0+16))
  2792  01005C  6EF8               	movwf	tblptru,c
  2793  01005E                     	endif
  2794  01005E  0008               	tblrd		*
  2795  010060  50F5               	movf	tablat,w,c
  2796  010062  2601               	addwf	?___wmul,f,c
  2797  010064  0E00               	movlw	0
  2798  010066  2202               	addwfc	?___wmul+1,f,c
  2799  010068  0ED0               	movlw	208
  2800  01006A  2401               	addwf	?___wmul,w,c
  2801  01006C  6FC9               	movwf	sprintf@prec& (0+255),b
  2802  01006E  0EFF               	movlw	255
  2803  010070  2002               	addwfc	?___wmul+1,w,c
  2804  010072  6FCA               	movwf	(sprintf@prec+1)& (0+255),b
  2805                           
  2806                           ; BSR set to: 0
  2807  010074  4A4C               	infsnz	sprintf@f,f,c
  2808  010076  2A4D               	incf	sprintf@f+1,f,c
  2809  010078                     i1l2897:
  2810                           
  2811                           ; BSR set to: 0
  2812  010078  C04C  FFF6         	movff	sprintf@f,tblptrl
  2813  01007C  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  2814  010080                     	if	0	;tblptru may be non-zero
  2815  010080                     	endif
  2816  010080                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2817  010080  0E00               	movlw	low (__mediumconst shr (0+16))
  2818  010082  6EF8               	movwf	tblptru,c
  2819  010084                     	endif
  2820  010084  0008               	tblrd		*
  2821  010086  50F5               	movf	tablat,w,c
  2822  010088  ECC3  F08F         	call	_isdigit
  2823  01008C  E30A               	bnc	i1l2907
  2824  01008E  D7D8               	goto	i1l2893
  2825  010090                     i1l334:
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;doprnt.c: 635: prec = 0;
  2829  010090  6BC9               	clrf	sprintf@prec& (0+255),b
  2830  010092  6BCA               	clrf	(sprintf@prec+1)& (0+255),b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;doprnt.c: 637: flag |= 0x1000;
  2834  010094  89BD               	bsf	(sprintf@flag+1)& (0+255),4,b
  2835  010096  D005               	goto	i1l2907
  2836  010098                     i1l2901:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;doprnt.c: 672: flag |= 0x400;
  2840  010098  85BD               	bsf	(sprintf@flag+1)& (0+255),2,b
  2841                           
  2842                           ;doprnt.c: 673: break;
  2843  01009A  D017               	goto	i1l2909
  2844  01009C                     i1l2903:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;doprnt.c: 827: flag |= 0xC0;
  2848  01009C  0EC0               	movlw	192
  2849  01009E  13BC               	iorwf	sprintf@flag& (0+255),f,b
  2850                           
  2851                           ;doprnt.c: 828: break;
  2852  0100A0  D014               	goto	i1l2909
  2853  0100A2                     i1l2907:
  2854                           
  2855                           ; BSR set to: 0
  2856  0100A2  C04C  FFF6         	movff	sprintf@f,tblptrl
  2857  0100A6  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  2858  0100AA  4A4C               	infsnz	sprintf@f,f,c
  2859  0100AC  2A4D               	incf	sprintf@f+1,f,c
  2860  0100AE                     	if	0	;tblptru may be non-zero
  2861  0100AE                     	endif
  2862  0100AE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  2863  0100AE  0E00               	movlw	low (__mediumconst shr (0+16))
  2864  0100B0  6EF8               	movwf	tblptru,c
  2865  0100B2                     	endif
  2866  0100B2  0008               	tblrd		*
  2867  0100B4  CFF5 F0D0          	movff	tablat,sprintf@c
  2868  0100B8  0100               	movlb	0	; () banked
  2869  0100BA  51D0               	movf	sprintf@c& (0+255),w,b
  2870                           
  2871                           ; Switch size 1, requested type "space"
  2872                           ; Number of cases is 3, Range of values is 0 to 117
  2873                           ; switch strategies available:
  2874                           ; Name         Instructions Cycles
  2875                           ; simple_byte           10     6 (average)
  2876                           ;	Chosen strategy is simple_byte
  2877  0100BC  E101 D3AD          	bz	i1l3107
  2878  0100C0  0A66               	xorlw	102	; case 102
  2879  0100C2  E0EA               	bz	i1l2901
  2880  0100C4  0A13               	xorlw	19	; case 117
  2881  0100C6  E0EA               	bz	i1l2903
  2882  0100C8  D399               	goto	i1l3105
  2883  0100CA                     i1l2909:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;doprnt.c: 834: if(flag & (0x700)) {
  2887  0100CA  0E07               	movlw	7
  2888  0100CC  15BD               	andwf	(sprintf@flag+1)& (0+255),w,b
  2889  0100CE  E101 D2E7          	bz	i1l3059
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;doprnt.c: 836: if(flag & 0x1000)
  2893  0100D2  A9BD               	btfss	(sprintf@flag+1)& (0+255),4,b
  2894  0100D4  D003               	goto	i1l2915
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;doprnt.c: 838: prec = 6;
  2898  0100D6  6BCA               	clrf	(sprintf@prec+1)& (0+255),b
  2899  0100D8  0E06               	movlw	6
  2900  0100DA  6FC9               	movwf	sprintf@prec& (0+255),b
  2901  0100DC                     i1l2915:
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2905  0100DC  51BB               	movf	sprintf@ap& (0+255),w,b
  2906  0100DE  6ED9               	movwf	fsr2l,c
  2907  0100E0  6ADA               	clrf	fsr2h,c
  2908  0100E2  CFDE F0CC          	movff	postinc2,sprintf@fval
  2909  0100E6  CFDE F0CD          	movff	postinc2,sprintf@fval+1
  2910  0100EA  CFDE F0CE          	movff	postinc2,sprintf@fval+2
  2911  0100EE  CFDE F0CF          	movff	postinc2,sprintf@fval+3
  2912                           
  2913                           ; BSR set to: 0
  2914  0100F2  0E04               	movlw	4
  2915  0100F4  27BB               	addwf	sprintf@ap& (0+255),f,b
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;doprnt.c: 840: if(fval < 0.0) {
  2919  0100F6  AFCF               	btfss	(sprintf@fval+3)& (0+255),7,b
  2920  0100F8  D014               	goto	i1l2925
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;doprnt.c: 841: fval = -fval;
  2924  0100FA  C0CC  F001         	movff	sprintf@fval,___flneg@f1
  2925  0100FE  C0CD  F002         	movff	sprintf@fval+1,___flneg@f1+1
  2926  010102  C0CE  F003         	movff	sprintf@fval+2,___flneg@f1+2
  2927  010106  C0CF  F004         	movff	sprintf@fval+3,___flneg@f1+3
  2928  01010A  ECB1  F08F         	call	___flneg	;wreg free
  2929  01010E  C001  F0CC         	movff	?___flneg,sprintf@fval
  2930  010112  C002  F0CD         	movff	?___flneg+1,sprintf@fval+1
  2931  010116  C003  F0CE         	movff	?___flneg+2,sprintf@fval+2
  2932  01011A  C004  F0CF         	movff	?___flneg+3,sprintf@fval+3
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;doprnt.c: 842: flag |= 0x03;
  2936  01011E  0E03               	movlw	3
  2937  010120  13BC               	iorwf	sprintf@flag& (0+255),f,b
  2938  010122                     i1l2925:
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;doprnt.c: 843: }
  2942                           ;doprnt.c: 844: exp = 0;
  2943  010122  6BC7               	clrf	sprintf@exp& (0+255),b
  2944  010124  6BC8               	clrf	(sprintf@exp+1)& (0+255),b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;doprnt.c: 845: if( fval!=0) {
  2948  010126  EE20  F0CC         	lfsr	2,sprintf@fval
  2949  01012A  50DE               	movf	postinc2,w,c
  2950  01012C  10DE               	iorwf	postinc2,w,c
  2951  01012E  10DE               	iorwf	postinc2,w,c
  2952  010130  10DE               	iorwf	postinc2,w,c
  2953  010132  E101 D081          	bz	i1l2953
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;doprnt.c: 846: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2957  010136  35CE               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2958  010138  35CF               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2959  01013A  0F82               	addlw	130
  2960  01013C  6FC7               	movwf	sprintf@exp& (0+255),b
  2961  01013E  6BC8               	clrf	(sprintf@exp+1)& (0+255),b
  2962  010140  0EFF               	movlw	255
  2963  010142  23C8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;doprnt.c: 847: exp--;
  2967  010144  07C7               	decf	sprintf@exp& (0+255),f,b
  2968  010146  A0D8               	btfss	status,0,c
  2969  010148  07C8               	decf	(sprintf@exp+1)& (0+255),f,b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 848: exp *= 3;
  2973  01014A  C0C7  F001         	movff	sprintf@exp,___wmul@multiplier
  2974  01014E  C0C8  F002         	movff	sprintf@exp+1,___wmul@multiplier+1
  2975  010152  6A04               	clrf	___wmul@multiplicand+1,c
  2976  010154  0E03               	movlw	3
  2977  010156  6E03               	movwf	___wmul@multiplicand,c
  2978  010158  EC9E  F08F         	call	___wmul	;wreg free
  2979  01015C  C001  F0C7         	movff	?___wmul,sprintf@exp
  2980  010160  C002  F0C8         	movff	?___wmul+1,sprintf@exp+1
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;doprnt.c: 849: exp /= 10;
  2984  010164  C0C7  F007         	movff	sprintf@exp,___awdiv@dividend
  2985  010168  C0C8  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2986  01016C  6A0A               	clrf	___awdiv@divisor+1,c
  2987  01016E  0E0A               	movlw	10
  2988  010170  6E09               	movwf	___awdiv@divisor,c
  2989  010172  EC78  F08D         	call	___awdiv	;wreg free
  2990  010176  C007  F0C7         	movff	?___awdiv,sprintf@exp
  2991  01017A  C008  F0C8         	movff	?___awdiv+1,sprintf@exp+1
  2992                           
  2993                           ;doprnt.c: 850: if(exp < 0)
  2994  01017E  0100               	movlb	0	; () banked
  2995  010180  51C8               	movf	(sprintf@exp+1)& (0+255),w,b
  2996  010182  0A80               	xorlw	128
  2997  010184  6EF3               	movwf	prodl,c
  2998  010186  0E80               	movlw	128
  2999  010188  5CF3               	subwf	prodl,w,c
  3000  01018A  0E00               	movlw	0
  3001  01018C  B4D8               	btfsc	status,2,c
  3002  01018E  5DC7               	subwf	sprintf@exp& (0+255),w,b
  3003  010190  E203               	bc	i1l2941
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;doprnt.c: 851: exp--;
  3007  010192  07C7               	decf	sprintf@exp& (0+255),f,b
  3008  010194  A0D8               	btfss	status,0,c
  3009  010196  07C8               	decf	(sprintf@exp+1)& (0+255),f,b
  3010  010198                     i1l2941:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;doprnt.c: 855: integ = scale(-exp);
  3014  010198  51C7               	movf	sprintf@exp& (0+255),w,b
  3015  01019A  0800               	sublw	0
  3016  01019C  EC13  F084         	call	_scale
  3017  0101A0  C022  F0BE         	movff	?_scale,sprintf@integ
  3018  0101A4  C023  F0BF         	movff	?_scale+1,sprintf@integ+1
  3019  0101A8  C024  F0C0         	movff	?_scale+2,sprintf@integ+2
  3020  0101AC  C025  F0C1         	movff	?_scale+3,sprintf@integ+3
  3021                           
  3022                           ;doprnt.c: 856: integ *= fval;
  3023  0101B0  C0BE  F00F         	movff	sprintf@integ,___flmul@f1
  3024  0101B4  C0BF  F010         	movff	sprintf@integ+1,___flmul@f1+1
  3025  0101B8  C0C0  F011         	movff	sprintf@integ+2,___flmul@f1+2
  3026  0101BC  C0C1  F012         	movff	sprintf@integ+3,___flmul@f1+3
  3027  0101C0  C0CC  F013         	movff	sprintf@fval,___flmul@f2
  3028  0101C4  C0CD  F014         	movff	sprintf@fval+1,___flmul@f2+1
  3029  0101C8  C0CE  F015         	movff	sprintf@fval+2,___flmul@f2+2
  3030  0101CC  C0CF  F016         	movff	sprintf@fval+3,___flmul@f2+3
  3031  0101D0  EC44  F08A         	call	___flmul	;wreg free
  3032  0101D4  C00F  F0BE         	movff	?___flmul,sprintf@integ
  3033  0101D8  C010  F0BF         	movff	?___flmul+1,sprintf@integ+1
  3034  0101DC  C011  F0C0         	movff	?___flmul+2,sprintf@integ+2
  3035  0101E0  C012  F0C1         	movff	?___flmul+3,sprintf@integ+3
  3036                           
  3037                           ;doprnt.c: 857: if(integ < 1.0)
  3038  0101E4  C0BE  F001         	movff	sprintf@integ,___flge@ff1
  3039  0101E8  C0BF  F002         	movff	sprintf@integ+1,___flge@ff1+1
  3040  0101EC  C0C0  F003         	movff	sprintf@integ+2,___flge@ff1+2
  3041  0101F0  C0C1  F004         	movff	sprintf@integ+3,___flge@ff1+3
  3042  0101F4  6A05               	clrf	___flge@ff2,c
  3043  0101F6  6A06               	clrf	___flge@ff2+1,c
  3044  0101F8  0E80               	movlw	128
  3045  0101FA  6E07               	movwf	___flge@ff2+2,c
  3046  0101FC  0E3F               	movlw	63
  3047  0101FE  6E08               	movwf	___flge@ff2+3,c
  3048  010200  ECA1  F08E         	call	___flge	;wreg free
  3049  010204  E205               	bc	i1l2949
  3050                           
  3051                           ;doprnt.c: 858: exp--;
  3052  010206  0100               	movlb	0	; () banked
  3053  010208  07C7               	decf	sprintf@exp& (0+255),f,b
  3054  01020A  A0D8               	btfss	status,0,c
  3055  01020C  07C8               	decf	(sprintf@exp+1)& (0+255),f,b
  3056  01020E  D014               	goto	i1l2953
  3057  010210                     i1l2949:
  3058                           
  3059                           ;doprnt.c: 859: else if(integ >= 10.0)
  3060  010210  C0BE  F001         	movff	sprintf@integ,___flge@ff1
  3061  010214  C0BF  F002         	movff	sprintf@integ+1,___flge@ff1+1
  3062  010218  C0C0  F003         	movff	sprintf@integ+2,___flge@ff1+2
  3063  01021C  C0C1  F004         	movff	sprintf@integ+3,___flge@ff1+3
  3064  010220  6A05               	clrf	___flge@ff2,c
  3065  010222  6A06               	clrf	___flge@ff2+1,c
  3066  010224  0E20               	movlw	32
  3067  010226  6E07               	movwf	___flge@ff2+2,c
  3068  010228  0E41               	movlw	65
  3069  01022A  6E08               	movwf	___flge@ff2+3,c
  3070  01022C  ECA1  F08E         	call	___flge	;wreg free
  3071  010230  E303               	bnc	i1l2953
  3072                           
  3073                           ;doprnt.c: 860: exp++;
  3074  010232  0100               	movlb	0	; () banked
  3075  010234  4BC7               	infsnz	sprintf@exp& (0+255),f,b
  3076  010236  2BC8               	incf	(sprintf@exp+1)& (0+255),f,b
  3077  010238                     i1l2953:
  3078                           
  3079                           ;doprnt.c: 861: }
  3080                           ;doprnt.c: 1121: if(prec <= 12)
  3081  010238  0100               	movlb	0	; () banked
  3082  01023A  51CA               	movf	(sprintf@prec+1)& (0+255),w,b
  3083  01023C  0A80               	xorlw	128
  3084  01023E  6EF3               	movwf	prodl,c
  3085  010240  0E80               	movlw	128
  3086  010242  5CF3               	subwf	prodl,w,c
  3087  010244  0E0D               	movlw	13
  3088  010246  B4D8               	btfsc	status,2,c
  3089  010248  5DC9               	subwf	sprintf@prec& (0+255),w,b
  3090  01024A  E21D               	bc	i1l2957
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;doprnt.c: 1122: fval += fround(prec);
  3094  01024C  C0CC  F033         	movff	sprintf@fval,___fladd@f1
  3095  010250  C0CD  F034         	movff	sprintf@fval+1,___fladd@f1+1
  3096  010254  C0CE  F035         	movff	sprintf@fval+2,___fladd@f1+2
  3097  010258  C0CF  F036         	movff	sprintf@fval+3,___fladd@f1+3
  3098  01025C  51C9               	movf	sprintf@prec& (0+255),w,b
  3099  01025E  EC1C  F086         	call	_fround
  3100  010262  C022  F037         	movff	?_fround,___fladd@f2
  3101  010266  C023  F038         	movff	?_fround+1,___fladd@f2+1
  3102  01026A  C024  F039         	movff	?_fround+2,___fladd@f2+2
  3103  01026E  C025  F03A         	movff	?_fround+3,___fladd@f2+3
  3104  010272  EC49  F087         	call	___fladd	;wreg free
  3105  010276  C033  F0CC         	movff	?___fladd,sprintf@fval
  3106  01027A  C034  F0CD         	movff	?___fladd+1,sprintf@fval+1
  3107  01027E  C035  F0CE         	movff	?___fladd+2,sprintf@fval+2
  3108  010282  C036  F0CF         	movff	?___fladd+3,sprintf@fval+3
  3109  010286                     i1l2957:
  3110                           
  3111                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3112  010286  0100               	movlb	0	; () banked
  3113  010288  51C8               	movf	(sprintf@exp+1)& (0+255),w,b
  3114  01028A  0A80               	xorlw	128
  3115  01028C  6EF3               	movwf	prodl,c
  3116  01028E  0E80               	movlw	128
  3117  010290  5CF3               	subwf	prodl,w,c
  3118  010292  0E0A               	movlw	10
  3119  010294  B4D8               	btfsc	status,2,c
  3120  010296  5DC7               	subwf	sprintf@exp& (0+255),w,b
  3121  010298  E226               	bc	i1l2965
  3122                           
  3123                           ; BSR set to: 0
  3124  01029A  EE20  F0CC         	lfsr	2,sprintf@fval
  3125  01029E  50DE               	movf	postinc2,w,c
  3126  0102A0  10DE               	iorwf	postinc2,w,c
  3127  0102A2  10DE               	iorwf	postinc2,w,c
  3128  0102A4  10DE               	iorwf	postinc2,w,c
  3129  0102A6  E06D               	bz	i1l2981
  3130                           
  3131                           ; BSR set to: 0
  3132  0102A8  C0CC  F042         	movff	sprintf@fval,___fltol@f1
  3133  0102AC  C0CD  F043         	movff	sprintf@fval+1,___fltol@f1+1
  3134  0102B0  C0CE  F044         	movff	sprintf@fval+2,___fltol@f1+2
  3135  0102B4  C0CF  F045         	movff	sprintf@fval+3,___fltol@f1+3
  3136  0102B8  ECB7  F08C         	call	___fltol	;wreg free
  3137  0102BC  C042  F052         	movff	?___fltol,??_sprintf
  3138  0102C0  C043  F053         	movff	?___fltol+1,??_sprintf+1
  3139  0102C4  C044  F054         	movff	?___fltol+2,??_sprintf+2
  3140  0102C8  C045  F055         	movff	?___fltol+3,??_sprintf+3
  3141  0102CC  5055               	movf	??_sprintf+3,w,c
  3142  0102CE  1052               	iorwf	??_sprintf,w,c
  3143  0102D0  1053               	iorwf	??_sprintf+1,w,c
  3144  0102D2  1054               	iorwf	??_sprintf+2,w,c
  3145  0102D4  E156               	bnz	i1l2981
  3146  0102D6  0100               	movlb	0	; () banked
  3147  0102D8  51C8               	movf	(sprintf@exp+1)& (0+255),w,b
  3148  0102DA  0A80               	xorlw	128
  3149  0102DC  0F80               	addlw	-128
  3150  0102DE  0E02               	movlw	2
  3151  0102E0  B4D8               	btfsc	status,2,c
  3152  0102E2  5DC7               	subwf	sprintf@exp& (0+255),w,b
  3153  0102E4  E34E               	bnc	i1l2981
  3154  0102E6                     i1l2965:
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;doprnt.c: 1129: if(integ < 4.294967296){
  3158  0102E6  C0BE  F001         	movff	sprintf@integ,___flge@ff1
  3159  0102EA  C0BF  F002         	movff	sprintf@integ+1,___flge@ff1+1
  3160  0102EE  C0C0  F003         	movff	sprintf@integ+2,___flge@ff1+2
  3161  0102F2  C0C1  F004         	movff	sprintf@integ+3,___flge@ff1+3
  3162  0102F6  0E5F               	movlw	95
  3163  0102F8  6E05               	movwf	___flge@ff2,c
  3164  0102FA  0E70               	movlw	112
  3165  0102FC  6E06               	movwf	___flge@ff2+1,c
  3166  0102FE  0E89               	movlw	137
  3167  010300  6E07               	movwf	___flge@ff2+2,c
  3168  010302  0E40               	movlw	64
  3169  010304  6E08               	movwf	___flge@ff2+3,c
  3170  010306  ECA1  F08E         	call	___flge	;wreg free
  3171  01030A  E203               	bc	i1l2969
  3172                           
  3173                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3174  01030C  0100               	movlb	0	; () banked
  3175  01030E  0EF7               	movlw	247
  3176  010310  D002               	goto	L6
  3177  010312                     i1l2969:
  3178                           
  3179                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3180  010312  0100               	movlb	0	; () banked
  3181  010314  0EF8               	movlw	248
  3182  010316                     L6:
  3183  010316  27C7               	addwf	sprintf@exp& (0+255),f,b
  3184  010318  0EFF               	movlw	255
  3185  01031A  23C8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  3189  01031C  51C7               	movf	sprintf@exp& (0+255),w,b
  3190  01031E  EC13  F084         	call	_scale
  3191  010322  C022  F0BE         	movff	?_scale,sprintf@integ
  3192  010326  C023  F0BF         	movff	?_scale+1,sprintf@integ+1
  3193  01032A  C024  F0C0         	movff	?_scale+2,sprintf@integ+2
  3194  01032E  C025  F0C1         	movff	?_scale+3,sprintf@integ+3
  3195  010332  C0CC  F001         	movff	sprintf@fval,__div_to_l_@f1
  3196  010336  C0CD  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  3197  01033A  C0CE  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  3198  01033E  C0CF  F004         	movff	sprintf@fval+3,__div_to_l_@f1+3
  3199  010342  C0BE  F005         	movff	sprintf@integ,__div_to_l_@f2
  3200  010346  C0BF  F006         	movff	sprintf@integ+1,__div_to_l_@f2+1
  3201  01034A  C0C0  F007         	movff	sprintf@integ+2,__div_to_l_@f2+2
  3202  01034E  C0C1  F008         	movff	sprintf@integ+3,__div_to_l_@f2+3
  3203  010352  EC54  F08B         	call	__div_to_l_	;wreg free
  3204  010356  C001  F0AF         	movff	?__div_to_l_,_sprintf$684
  3205  01035A  C002  F0B0         	movff	?__div_to_l_+1,_sprintf$684+1
  3206  01035E  C003  F0B1         	movff	?__div_to_l_+2,_sprintf$684+2
  3207  010362  C004  F0B2         	movff	?__div_to_l_+3,_sprintf$684+3
  3208  010366  C0AF  F0C2         	movff	_sprintf$684,sprintf@_val
  3209  01036A  C0B0  F0C3         	movff	_sprintf$684+1,sprintf@_val+1
  3210  01036E  C0B1  F0C4         	movff	_sprintf$684+2,sprintf@_val+2
  3211  010372  C0B2  F0C5         	movff	_sprintf$684+3,sprintf@_val+3
  3212                           
  3213                           ;doprnt.c: 1138: fval = 0.0;
  3214  010376  0100               	movlb	0	; () banked
  3215  010378  6BCC               	clrf	sprintf@fval& (0+255),b
  3216  01037A  6BCD               	clrf	(sprintf@fval+1)& (0+255),b
  3217  01037C  6BCE               	clrf	(sprintf@fval+2)& (0+255),b
  3218  01037E  6BCF               	clrf	(sprintf@fval+3)& (0+255),b
  3219                           
  3220                           ;doprnt.c: 1139: } else {
  3221  010380  D039               	goto	i1l2985
  3222  010382                     i1l2981:
  3223                           
  3224                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3225  010382  C0CC  F042         	movff	sprintf@fval,___fltol@f1
  3226  010386  C0CD  F043         	movff	sprintf@fval+1,___fltol@f1+1
  3227  01038A  C0CE  F044         	movff	sprintf@fval+2,___fltol@f1+2
  3228  01038E  C0CF  F045         	movff	sprintf@fval+3,___fltol@f1+3
  3229  010392  ECB7  F08C         	call	___fltol	;wreg free
  3230  010396  C042  F0C2         	movff	?___fltol,sprintf@_val
  3231  01039A  C043  F0C3         	movff	?___fltol+1,sprintf@_val+1
  3232  01039E  C044  F0C4         	movff	?___fltol+2,sprintf@_val+2
  3233  0103A2  C045  F0C5         	movff	?___fltol+3,sprintf@_val+3
  3234                           
  3235                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3236  0103A6  C0CC  F042         	movff	sprintf@fval,___flsub@f1
  3237  0103AA  C0CD  F043         	movff	sprintf@fval+1,___flsub@f1+1
  3238  0103AE  C0CE  F044         	movff	sprintf@fval+2,___flsub@f1+2
  3239  0103B2  C0CF  F045         	movff	sprintf@fval+3,___flsub@f1+3
  3240  0103B6  C0C2  F00B         	movff	sprintf@_val,___lltofl@c
  3241  0103BA  C0C3  F00C         	movff	sprintf@_val+1,___lltofl@c+1
  3242  0103BE  C0C4  F00D         	movff	sprintf@_val+2,___lltofl@c+2
  3243  0103C2  C0C5  F00E         	movff	sprintf@_val+3,___lltofl@c+3
  3244  0103C6  EC5F  F08F         	call	___lltofl	;wreg free
  3245  0103CA  C00B  F046         	movff	?___lltofl,___flsub@f2
  3246  0103CE  C00C  F047         	movff	?___lltofl+1,___flsub@f2+1
  3247  0103D2  C00D  F048         	movff	?___lltofl+2,___flsub@f2+2
  3248  0103D6  C00E  F049         	movff	?___lltofl+3,___flsub@f2+3
  3249  0103DA  EC0F  F08F         	call	___flsub	;wreg free
  3250  0103DE  C042  F0CC         	movff	?___flsub,sprintf@fval
  3251  0103E2  C043  F0CD         	movff	?___flsub+1,sprintf@fval+1
  3252  0103E6  C044  F0CE         	movff	?___flsub+2,sprintf@fval+2
  3253  0103EA  C045  F0CF         	movff	?___flsub+3,sprintf@fval+3
  3254                           
  3255                           ;doprnt.c: 1142: exp = 0;
  3256  0103EE  0100               	movlb	0	; () banked
  3257  0103F0  6BC7               	clrf	sprintf@exp& (0+255),b
  3258  0103F2  6BC8               	clrf	(sprintf@exp+1)& (0+255),b
  3259  0103F4                     i1l2985:
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;doprnt.c: 1143: }
  3263                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3264  0103F4  0E01               	movlw	1
  3265  0103F6  6FD0               	movwf	sprintf@c& (0+255),b
  3266  0103F8                     i1l2991:
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3270  0103F8  51D0               	movf	sprintf@c& (0+255),w,b
  3271  0103FA  0D04               	mullw	4
  3272  0103FC  0EB7               	movlw	low _dpowers
  3273  0103FE  24F3               	addwf	prodl,w,c
  3274  010400  6EF6               	movwf	tblptrl,c
  3275  010402  0EFF               	movlw	high _dpowers
  3276  010404  20F4               	addwfc	prodh,w,c
  3277  010406  6EF7               	movwf	tblptrh,c
  3278  010408                     	if	1	;There are 3 active tblptr bytes
  3279  010408  6AF8               	clrf	tblptru,c
  3280  01040A  0E00               	movlw	low (__mediumconst shr (0+16))
  3281  01040C  22F8               	addwfc	tblptru,f,c
  3282  01040E                     	endif
  3283  01040E  0009               	tblrd		*+
  3284  010410  50F5               	movf	tablat,w,c
  3285  010412  5DC2               	subwf	sprintf@_val& (0+255),w,b
  3286  010414  0009               	tblrd		*+
  3287  010416  50F5               	movf	tablat,w,c
  3288  010418  59C3               	subwfb	(sprintf@_val+1)& (0+255),w,b
  3289  01041A  0009               	tblrd		*+
  3290  01041C  50F5               	movf	tablat,w,c
  3291  01041E  59C4               	subwfb	(sprintf@_val+2)& (0+255),w,b
  3292  010420  0009               	tblrd		*+
  3293  010422  50F5               	movf	tablat,w,c
  3294  010424  59C5               	subwfb	(sprintf@_val+3)& (0+255),w,b
  3295  010426  E304               	bnc	i1l2999
  3296                           
  3297                           ; BSR set to: 0
  3298  010428  2BD0               	incf	sprintf@c& (0+255),f,b
  3299                           
  3300                           ; BSR set to: 0
  3301  01042A  51D0               	movf	sprintf@c& (0+255),w,b
  3302  01042C  0A0A               	xorlw	10
  3303  01042E  E1E4               	bnz	i1l2991
  3304  010430                     i1l2999:
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;doprnt.c: 1184: {
  3308                           ;doprnt.c: 1197: if(flag & 0x03)
  3309  010430  C0BC  F052         	movff	sprintf@flag,??_sprintf
  3310  010434  0E03               	movlw	3
  3311  010436  1652               	andwf	??_sprintf,f,c
  3312  010438  E04E               	bz	i1l3013
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  3316  01043A  51CB               	movf	sprintf@sp& (0+255),w,b
  3317  01043C  6ED9               	movwf	fsr2l,c
  3318  01043E  6ADA               	clrf	fsr2h,c
  3319  010440  0E2D               	movlw	45
  3320  010442  6EDF               	movwf	indf2,c
  3321                           
  3322                           ; BSR set to: 0
  3323  010444  2BCB               	incf	sprintf@sp& (0+255),f,b
  3324  010446  D047               	goto	i1l3013
  3325  010448                     i1l3005:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;doprnt.c: 1209: {
  3329                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3330  010448  C0C2  F001         	movff	sprintf@_val,___lldiv@dividend
  3331  01044C  C0C3  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  3332  010450  C0C4  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  3333  010454  C0C5  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  3334  010458  51D0               	movf	sprintf@c& (0+255),w,b
  3335  01045A  0D04               	mullw	4
  3336  01045C  0EB7               	movlw	low _dpowers
  3337  01045E  24F3               	addwf	prodl,w,c
  3338  010460  6EF6               	movwf	tblptrl,c
  3339  010462  0EFF               	movlw	high _dpowers
  3340  010464  20F4               	addwfc	prodh,w,c
  3341  010466  6EF7               	movwf	tblptrh,c
  3342  010468                     	if	1	;There are 3 active tblptr bytes
  3343  010468  6AF8               	clrf	tblptru,c
  3344  01046A  0E00               	movlw	low (__mediumconst shr (0+16))
  3345  01046C  22F8               	addwfc	tblptru,f,c
  3346  01046E                     	endif
  3347  01046E  0009               	tblrd		*+
  3348  010470  CFF5 F005          	movff	tablat,___lldiv@divisor
  3349  010474  0009               	tblrd		*+
  3350  010476  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3351  01047A  0009               	tblrd		*+
  3352  01047C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3353  010480  000A               	tblrd		*-
  3354  010482  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3355  010486  EC04  F08E         	call	___lldiv	;wreg free
  3356  01048A  C001  F0B3         	movff	?___lldiv,sprintf@vd
  3357  01048E  C002  F0B4         	movff	?___lldiv+1,sprintf@vd+1
  3358  010492  C003  F0B5         	movff	?___lldiv+2,sprintf@vd+2
  3359  010496  C004  F0B6         	movff	?___lldiv+3,sprintf@vd+3
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;doprnt.c: 1211: vd %= 10;
  3363  01049A  C0B3  F00E         	movff	sprintf@vd,___llmod@dividend
  3364  01049E  C0B4  F00F         	movff	sprintf@vd+1,___llmod@dividend+1
  3365  0104A2  C0B5  F010         	movff	sprintf@vd+2,___llmod@dividend+2
  3366  0104A6  C0B6  F011         	movff	sprintf@vd+3,___llmod@dividend+3
  3367  0104AA  0E0A               	movlw	10
  3368  0104AC  6E12               	movwf	___llmod@divisor,c
  3369  0104AE  0E00               	movlw	0
  3370  0104B0  6A13               	clrf	___llmod@divisor+1,c
  3371  0104B2  6A14               	clrf	___llmod@divisor+2,c
  3372  0104B4  6A15               	clrf	___llmod@divisor+3,c
  3373  0104B6  EC70  F08E         	call	___llmod	;wreg free
  3374  0104BA  C00E  F0B3         	movff	?___llmod,sprintf@vd
  3375  0104BE  C00F  F0B4         	movff	?___llmod+1,sprintf@vd+1
  3376  0104C2  C010  F0B5         	movff	?___llmod+2,sprintf@vd+2
  3377  0104C6  C011  F0B6         	movff	?___llmod+3,sprintf@vd+3
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  3381  0104CA  51CB               	movf	sprintf@sp& (0+255),w,b
  3382  0104CC  6ED9               	movwf	fsr2l,c
  3383  0104CE  6ADA               	clrf	fsr2h,c
  3384  0104D0  51B3               	movf	sprintf@vd& (0+255),w,b
  3385  0104D2  0F30               	addlw	48
  3386  0104D4  D7B6               	goto	L7
  3387  0104D6                     i1l3013:
  3388                           
  3389                           ; BSR set to: 0
  3390  0104D6  07D0               	decf	sprintf@c& (0+255),f,b
  3391  0104D8  0100               	movlb	0	; () banked
  3392  0104DA  29D0               	incf	sprintf@c& (0+255),w,b
  3393  0104DC  E00A               	bz	i1l3021
  3394  0104DE  D7B4               	goto	i1l3005
  3395  0104E0                     i1l3015:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  3399  0104E0  51CB               	movf	sprintf@sp& (0+255),w,b
  3400  0104E2  6ED9               	movwf	fsr2l,c
  3401  0104E4  6ADA               	clrf	fsr2h,c
  3402  0104E6  0E30               	movlw	48
  3403  0104E8  6EDF               	movwf	indf2,c
  3404                           
  3405                           ; BSR set to: 0
  3406  0104EA  2BCB               	incf	sprintf@sp& (0+255),f,b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;doprnt.c: 1218: exp--;
  3410  0104EC  07C7               	decf	sprintf@exp& (0+255),f,b
  3411  0104EE  A0D8               	btfss	status,0,c
  3412  0104F0  07C8               	decf	(sprintf@exp+1)& (0+255),f,b
  3413  0104F2                     i1l3021:
  3414                           
  3415                           ; BSR set to: 0
  3416  0104F2  51C8               	movf	(sprintf@exp+1)& (0+255),w,b
  3417  0104F4  0A80               	xorlw	128
  3418  0104F6  6EF3               	movwf	prodl,c
  3419  0104F8  0E80               	movlw	128
  3420  0104FA  5CF3               	subwf	prodl,w,c
  3421  0104FC  0E01               	movlw	1
  3422  0104FE  B4D8               	btfsc	status,2,c
  3423  010500  5DC7               	subwf	sprintf@exp& (0+255),w,b
  3424  010502  E2EE               	bc	i1l3015
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;doprnt.c: 1219: }
  3428                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3429  010504  51CA               	movf	(sprintf@prec+1)& (0+255),w,b
  3430  010506  0A80               	xorlw	128
  3431  010508  0F80               	addlw	-128
  3432  01050A  0E09               	movlw	9
  3433  01050C  B4D8               	btfsc	status,2,c
  3434  01050E  5DC9               	subwf	sprintf@prec& (0+255),w,b
  3435  010510  E303               	bnc	i1l375
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3439  010512  0E08               	movlw	8
  3440  010514  6FD0               	movwf	sprintf@c& (0+255),b
  3441  010516  D002               	goto	i1l3027
  3442  010518                     i1l375:
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;doprnt.c: 1222: else
  3446                           ;doprnt.c: 1223: c = prec;
  3447  010518  C0C9  F0D0         	movff	sprintf@prec,sprintf@c
  3448  01051C                     i1l3027:
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;doprnt.c: 1224: prec -= c;
  3452  01051C  51D0               	movf	sprintf@c& (0+255),w,b
  3453  01051E  5FC9               	subwf	sprintf@prec& (0+255),f,b
  3454  010520  0E00               	movlw	0
  3455  010522  BFD0               	btfsc	sprintf@c& (0+255),7,b
  3456  010524  0EFF               	movlw	255
  3457  010526  5BCA               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;doprnt.c: 1228: if(c)
  3461  010528  51D0               	movf	sprintf@c& (0+255),w,b
  3462  01052A  E006               	bz	i1l3035
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  3466  01052C  51CB               	movf	sprintf@sp& (0+255),w,b
  3467  01052E  6ED9               	movwf	fsr2l,c
  3468  010530  6ADA               	clrf	fsr2h,c
  3469  010532  0E2E               	movlw	46
  3470  010534  6EDF               	movwf	indf2,c
  3471                           
  3472                           ; BSR set to: 0
  3473  010536  2BCB               	incf	sprintf@sp& (0+255),f,b
  3474  010538                     i1l3035:
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3478  010538  51D0               	movf	sprintf@c& (0+255),w,b
  3479  01053A  EC13  F084         	call	_scale
  3480  01053E  C022  F0AB         	movff	?_scale,_sprintf$1215
  3481  010542  C023  F0AC         	movff	?_scale+1,_sprintf$1215+1
  3482  010546  C024  F0AD         	movff	?_scale+2,_sprintf$1215+2
  3483  01054A  C025  F0AE         	movff	?_scale+3,_sprintf$1215+3
  3484                           
  3485                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3486  01054E  C0CC  F013         	movff	sprintf@fval,___flmul@f2
  3487  010552  C0CD  F014         	movff	sprintf@fval+1,___flmul@f2+1
  3488  010556  C0CE  F015         	movff	sprintf@fval+2,___flmul@f2+2
  3489  01055A  C0CF  F016         	movff	sprintf@fval+3,___flmul@f2+3
  3490  01055E  C0AB  F00F         	movff	_sprintf$1215,___flmul@f1
  3491  010562  C0AC  F010         	movff	_sprintf$1215+1,___flmul@f1+1
  3492  010566  C0AD  F011         	movff	_sprintf$1215+2,___flmul@f1+2
  3493  01056A  C0AE  F012         	movff	_sprintf$1215+3,___flmul@f1+3
  3494  01056E  EC44  F08A         	call	___flmul	;wreg free
  3495  010572  C00F  F042         	movff	?___flmul,___fltol@f1
  3496  010576  C010  F043         	movff	?___flmul+1,___fltol@f1+1
  3497  01057A  C011  F044         	movff	?___flmul+2,___fltol@f1+2
  3498  01057E  C012  F045         	movff	?___flmul+3,___fltol@f1+3
  3499  010582  ECB7  F08C         	call	___fltol	;wreg free
  3500  010586  C042  F0C2         	movff	?___fltol,sprintf@_val
  3501  01058A  C043  F0C3         	movff	?___fltol+1,sprintf@_val+1
  3502  01058E  C044  F0C4         	movff	?___fltol+2,sprintf@_val+2
  3503  010592  C045  F0C5         	movff	?___fltol+3,sprintf@_val+3
  3504                           
  3505                           ;doprnt.c: 1237: while(c--) {
  3506  010596  D071               	goto	i1l3049
  3507  010598                     i1l3039:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  3511  010598  C0C2  F001         	movff	sprintf@_val,___lldiv@dividend
  3512  01059C  C0C3  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  3513  0105A0  C0C4  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  3514  0105A4  C0C5  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  3515  0105A8  51D0               	movf	sprintf@c& (0+255),w,b
  3516  0105AA  0D04               	mullw	4
  3517  0105AC  0EB7               	movlw	low _dpowers
  3518  0105AE  24F3               	addwf	prodl,w,c
  3519  0105B0  6EF6               	movwf	tblptrl,c
  3520  0105B2  0EFF               	movlw	high _dpowers
  3521  0105B4  20F4               	addwfc	prodh,w,c
  3522  0105B6  6EF7               	movwf	tblptrh,c
  3523  0105B8                     	if	1	;There are 3 active tblptr bytes
  3524  0105B8  6AF8               	clrf	tblptru,c
  3525  0105BA  0E00               	movlw	low (__mediumconst shr (0+16))
  3526  0105BC  22F8               	addwfc	tblptru,f,c
  3527  0105BE                     	endif
  3528  0105BE  0009               	tblrd		*+
  3529  0105C0  CFF5 F005          	movff	tablat,___lldiv@divisor
  3530  0105C4  0009               	tblrd		*+
  3531  0105C6  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3532  0105CA  0009               	tblrd		*+
  3533  0105CC  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3534  0105D0  000A               	tblrd		*-
  3535  0105D2  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3536  0105D6  EC04  F08E         	call	___lldiv	;wreg free
  3537  0105DA  C001  F0B7         	movff	?___lldiv,sprintf@vd_686
  3538  0105DE  C002  F0B8         	movff	?___lldiv+1,sprintf@vd_686+1
  3539  0105E2  C003  F0B9         	movff	?___lldiv+2,sprintf@vd_686+2
  3540  0105E6  C004  F0BA         	movff	?___lldiv+3,sprintf@vd_686+3
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;doprnt.c: 1239: vd %= 10;
  3544  0105EA  C0B7  F00E         	movff	sprintf@vd_686,___llmod@dividend
  3545  0105EE  C0B8  F00F         	movff	sprintf@vd_686+1,___llmod@dividend+1
  3546  0105F2  C0B9  F010         	movff	sprintf@vd_686+2,___llmod@dividend+2
  3547  0105F6  C0BA  F011         	movff	sprintf@vd_686+3,___llmod@dividend+3
  3548  0105FA  0E0A               	movlw	10
  3549  0105FC  6E12               	movwf	___llmod@divisor,c
  3550  0105FE  0E00               	movlw	0
  3551  010600  6A13               	clrf	___llmod@divisor+1,c
  3552  010602  6A14               	clrf	___llmod@divisor+2,c
  3553  010604  6A15               	clrf	___llmod@divisor+3,c
  3554  010606  EC70  F08E         	call	___llmod	;wreg free
  3555  01060A  C00E  F0B7         	movff	?___llmod,sprintf@vd_686
  3556  01060E  C00F  F0B8         	movff	?___llmod+1,sprintf@vd_686+1
  3557  010612  C010  F0B9         	movff	?___llmod+2,sprintf@vd_686+2
  3558  010616  C011  F0BA         	movff	?___llmod+3,sprintf@vd_686+3
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  3562  01061A  51CB               	movf	sprintf@sp& (0+255),w,b
  3563  01061C  6ED9               	movwf	fsr2l,c
  3564  01061E  6ADA               	clrf	fsr2h,c
  3565  010620  51B7               	movf	sprintf@vd_686& (0+255),w,b
  3566  010622  0F30               	addlw	48
  3567  010624  6EDF               	movwf	indf2,c
  3568                           
  3569                           ; BSR set to: 0
  3570  010626  2BCB               	incf	sprintf@sp& (0+255),f,b
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  3574  010628  C0C2  F00E         	movff	sprintf@_val,___llmod@dividend
  3575  01062C  C0C3  F00F         	movff	sprintf@_val+1,___llmod@dividend+1
  3576  010630  C0C4  F010         	movff	sprintf@_val+2,___llmod@dividend+2
  3577  010634  C0C5  F011         	movff	sprintf@_val+3,___llmod@dividend+3
  3578  010638  51D0               	movf	sprintf@c& (0+255),w,b
  3579  01063A  0D04               	mullw	4
  3580  01063C  0EB7               	movlw	low _dpowers
  3581  01063E  24F3               	addwf	prodl,w,c
  3582  010640  6EF6               	movwf	tblptrl,c
  3583  010642  0EFF               	movlw	high _dpowers
  3584  010644  20F4               	addwfc	prodh,w,c
  3585  010646  6EF7               	movwf	tblptrh,c
  3586  010648                     	if	1	;There are 3 active tblptr bytes
  3587  010648  6AF8               	clrf	tblptru,c
  3588  01064A  0E00               	movlw	low (__mediumconst shr (0+16))
  3589  01064C  22F8               	addwfc	tblptru,f,c
  3590  01064E                     	endif
  3591  01064E  0009               	tblrd		*+
  3592  010650  CFF5 F012          	movff	tablat,___llmod@divisor
  3593  010654  0009               	tblrd		*+
  3594  010656  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3595  01065A  0009               	tblrd		*+
  3596  01065C  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3597  010660  000A               	tblrd		*-
  3598  010662  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3599  010666  EC70  F08E         	call	___llmod	;wreg free
  3600  01066A  C00E  F0C2         	movff	?___llmod,sprintf@_val
  3601  01066E  C00F  F0C3         	movff	?___llmod+1,sprintf@_val+1
  3602  010672  C010  F0C4         	movff	?___llmod+2,sprintf@_val+2
  3603  010676  C011  F0C5         	movff	?___llmod+3,sprintf@_val+3
  3604  01067A                     i1l3049:
  3605  01067A  0100               	movlb	0	; () banked
  3606  01067C  07D0               	decf	sprintf@c& (0+255),f,b
  3607  01067E  29D0               	incf	sprintf@c& (0+255),w,b
  3608  010680  E00A               	bz	i1l3057
  3609  010682  D78A               	goto	i1l3039
  3610  010684                     i1l3051:
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  3614  010684  51CB               	movf	sprintf@sp& (0+255),w,b
  3615  010686  6ED9               	movwf	fsr2l,c
  3616  010688  6ADA               	clrf	fsr2h,c
  3617  01068A  0E30               	movlw	48
  3618  01068C  6EDF               	movwf	indf2,c
  3619                           
  3620                           ; BSR set to: 0
  3621  01068E  2BCB               	incf	sprintf@sp& (0+255),f,b
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;doprnt.c: 1246: prec--;
  3625  010690  07C9               	decf	sprintf@prec& (0+255),f,b
  3626  010692  A0D8               	btfss	status,0,c
  3627  010694  07CA               	decf	(sprintf@prec+1)& (0+255),f,b
  3628  010696                     i1l3057:
  3629                           
  3630                           ; BSR set to: 0
  3631  010696  51CA               	movf	(sprintf@prec+1)& (0+255),w,b
  3632  010698  11C9               	iorwf	sprintf@prec& (0+255),w,b
  3633  01069A  E101 D0AF          	bz	i1l3105
  3634  01069E  D7F2               	goto	i1l3051
  3635  0106A0                     i1l3059:
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;doprnt.c: 1255: }
  3639                           ;doprnt.c: 1282: {
  3640                           ;doprnt.c: 1295: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3641  0106A0  51BB               	movf	sprintf@ap& (0+255),w,b
  3642  0106A2  6ED9               	movwf	fsr2l,c
  3643  0106A4  6ADA               	clrf	fsr2h,c
  3644  0106A6  CFDE F052          	movff	postinc2,??_sprintf
  3645  0106AA  CFDD F053          	movff	postdec2,??_sprintf+1
  3646  0106AE  C052  F0C2         	movff	??_sprintf,sprintf@_val
  3647  0106B2  C053  F0C3         	movff	??_sprintf+1,sprintf@_val+1
  3648  0106B6  6BC4               	clrf	(sprintf@_val+2)& (0+255),b
  3649  0106B8  6BC5               	clrf	(sprintf@_val+3)& (0+255),b
  3650                           
  3651                           ; BSR set to: 0
  3652  0106BA  0E02               	movlw	2
  3653  0106BC  27BB               	addwf	sprintf@ap& (0+255),f,b
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;doprnt.c: 1296: }
  3657                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  3658  0106BE  51CA               	movf	(sprintf@prec+1)& (0+255),w,b
  3659  0106C0  11C9               	iorwf	sprintf@prec& (0+255),w,b
  3660  0106C2  E107               	bnz	i1l3069
  3661                           
  3662                           ; BSR set to: 0
  3663  0106C4  51C5               	movf	(sprintf@_val+3)& (0+255),w,b
  3664  0106C6  11C2               	iorwf	sprintf@_val& (0+255),w,b
  3665  0106C8  11C3               	iorwf	(sprintf@_val+1)& (0+255),w,b
  3666  0106CA  11C4               	iorwf	(sprintf@_val+2)& (0+255),w,b
  3667  0106CC  E102               	bnz	i1l3069
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;doprnt.c: 1300: prec++;
  3671  0106CE  4BC9               	infsnz	sprintf@prec& (0+255),f,b
  3672  0106D0  2BCA               	incf	(sprintf@prec+1)& (0+255),f,b
  3673  0106D2                     i1l3069:
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3677  0106D2  0E01               	movlw	1
  3678  0106D4  6FD0               	movwf	sprintf@c& (0+255),b
  3679  0106D6                     i1l3075:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  3683  0106D6  51D0               	movf	sprintf@c& (0+255),w,b
  3684  0106D8  0D04               	mullw	4
  3685  0106DA  0EB7               	movlw	low _dpowers
  3686  0106DC  24F3               	addwf	prodl,w,c
  3687  0106DE  6EF6               	movwf	tblptrl,c
  3688  0106E0  0EFF               	movlw	high _dpowers
  3689  0106E2  20F4               	addwfc	prodh,w,c
  3690  0106E4  6EF7               	movwf	tblptrh,c
  3691  0106E6                     	if	1	;There are 3 active tblptr bytes
  3692  0106E6  6AF8               	clrf	tblptru,c
  3693  0106E8  0E00               	movlw	low (__mediumconst shr (0+16))
  3694  0106EA  22F8               	addwfc	tblptru,f,c
  3695  0106EC                     	endif
  3696  0106EC  0009               	tblrd		*+
  3697  0106EE  50F5               	movf	tablat,w,c
  3698  0106F0  5DC2               	subwf	sprintf@_val& (0+255),w,b
  3699  0106F2  0009               	tblrd		*+
  3700  0106F4  50F5               	movf	tablat,w,c
  3701  0106F6  59C3               	subwfb	(sprintf@_val+1)& (0+255),w,b
  3702  0106F8  0009               	tblrd		*+
  3703  0106FA  50F5               	movf	tablat,w,c
  3704  0106FC  59C4               	subwfb	(sprintf@_val+2)& (0+255),w,b
  3705  0106FE  0009               	tblrd		*+
  3706  010700  50F5               	movf	tablat,w,c
  3707  010702  59C5               	subwfb	(sprintf@_val+3)& (0+255),w,b
  3708  010704  E304               	bnc	i1l3083
  3709                           
  3710                           ; BSR set to: 0
  3711  010706  2BD0               	incf	sprintf@c& (0+255),f,b
  3712                           
  3713                           ; BSR set to: 0
  3714  010708  51D0               	movf	sprintf@c& (0+255),w,b
  3715  01070A  0A0A               	xorlw	10
  3716  01070C  E1E4               	bnz	i1l3075
  3717  01070E                     i1l3083:
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;doprnt.c: 1348: if(c < prec)
  3721  01070E  0E80               	movlw	128
  3722  010710  BFD0               	btfsc	sprintf@c& (0+255),7,b
  3723  010712  0E7F               	movlw	127
  3724  010714  6E52               	movwf	??_sprintf& (0+255),c
  3725  010716  51C9               	movf	sprintf@prec& (0+255),w,b
  3726  010718  5DD0               	subwf	sprintf@c& (0+255),w,b
  3727  01071A  51CA               	movf	(sprintf@prec+1)& (0+255),w,b
  3728  01071C  0A80               	xorlw	128
  3729  01071E  5852               	subwfb	??_sprintf& (0+255),w,c
  3730  010720  E30F               	bnc	i1l3091
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;doprnt.c: 1350: else if(prec < c)
  3734                           
  3735                           ; BSR set to: 0
  3736  010722  51CA               	movf	(sprintf@prec+1)& (0+255),w,b
  3737  010724  0A80               	xorlw	128
  3738  010726  6E52               	movwf	??_sprintf& (0+255),c
  3739  010728  51D0               	movf	sprintf@c& (0+255),w,b
  3740  01072A  5DC9               	subwf	sprintf@prec& (0+255),w,b
  3741  01072C  0E80               	movlw	128
  3742  01072E  BFD0               	btfsc	sprintf@c& (0+255),7,b
  3743  010730  0E7F               	movlw	127
  3744  010732  5852               	subwfb	??_sprintf& (0+255),w,c
  3745  010734  E205               	bc	i1l3091
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;doprnt.c: 1351: prec = c;
  3749  010736  51D0               	movf	sprintf@c& (0+255),w,b
  3750  010738  6FC9               	movwf	sprintf@prec& (0+255),b
  3751  01073A  6BCA               	clrf	(sprintf@prec+1)& (0+255),b
  3752  01073C  BFC9               	btfsc	sprintf@prec& (0+255),7,b
  3753  01073E  07CA               	decf	(sprintf@prec+1)& (0+255),f,b
  3754  010740                     i1l3091:
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;doprnt.c: 1431: {
  3758                           ;doprnt.c: 1447: if(flag & 0x03)
  3759  010740  C0BC  F052         	movff	sprintf@flag,??_sprintf
  3760  010744  0E03               	movlw	3
  3761  010746  1652               	andwf	??_sprintf,f,c
  3762  010748  E051               	bz	i1l3103
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  3766  01074A  51CB               	movf	sprintf@sp& (0+255),w,b
  3767  01074C  6ED9               	movwf	fsr2l,c
  3768  01074E  6ADA               	clrf	fsr2h,c
  3769  010750  0E2D               	movlw	45
  3770  010752  6EDF               	movwf	indf2,c
  3771  010754                     i1l3095:
  3772                           
  3773                           ; BSR set to: 0
  3774  010754  2BCB               	incf	sprintf@sp& (0+255),f,b
  3775  010756  D04A               	goto	i1l3103
  3776  010758                     i1l3097:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;doprnt.c: 1487: {
  3780                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  3781  010758  C0C9  F052         	movff	sprintf@prec,??_sprintf
  3782  01075C  C0CA  F053         	movff	sprintf@prec+1,??_sprintf+1
  3783  010760  90D8               	bcf	status,0,c
  3784  010762  3652               	rlcf	??_sprintf,f,c
  3785  010764  3653               	rlcf	??_sprintf+1,f,c
  3786  010766  90D8               	bcf	status,0,c
  3787  010768  3652               	rlcf	??_sprintf,f,c
  3788  01076A  3653               	rlcf	??_sprintf+1,f,c
  3789  01076C  0EB7               	movlw	low _dpowers
  3790  01076E  2452               	addwf	??_sprintf,w,c
  3791  010770  6EF6               	movwf	tblptrl,c
  3792  010772  0EFF               	movlw	high _dpowers
  3793  010774  2053               	addwfc	??_sprintf+1,w,c
  3794  010776  6EF7               	movwf	tblptrh,c
  3795  010778                     	if	1	;There are 3 active tblptr bytes
  3796  010778  6AF8               	clrf	tblptru,c
  3797  01077A  0E00               	movlw	low (__mediumconst shr (0+16))
  3798  01077C  22F8               	addwfc	tblptru,f,c
  3799  01077E                     	endif
  3800  01077E  0009               	tblrd		*+
  3801  010780  CFF5 F005          	movff	tablat,___lldiv@divisor
  3802  010784  0009               	tblrd		*+
  3803  010786  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3804  01078A  0009               	tblrd		*+
  3805  01078C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3806  010790  000A               	tblrd		*-
  3807  010792  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3808  010796  C0C2  F001         	movff	sprintf@_val,___lldiv@dividend
  3809  01079A  C0C3  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  3810  01079E  C0C4  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  3811  0107A2  C0C5  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  3812  0107A6  EC04  F08E         	call	___lldiv	;wreg free
  3813  0107AA  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3814  0107AE  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3815  0107B2  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3816  0107B6  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3817  0107BA  0E0A               	movlw	10
  3818  0107BC  6E12               	movwf	___llmod@divisor,c
  3819  0107BE  0E00               	movlw	0
  3820  0107C0  6A13               	clrf	___llmod@divisor+1,c
  3821  0107C2  6A14               	clrf	___llmod@divisor+2,c
  3822  0107C4  6A15               	clrf	___llmod@divisor+3,c
  3823  0107C6  EC70  F08E         	call	___llmod	;wreg free
  3824  0107CA  C00E  F054         	movff	?___llmod,??_sprintf+2
  3825  0107CE  C00F  F055         	movff	?___llmod+1,??_sprintf+3
  3826  0107D2  C010  F056         	movff	?___llmod+2,??_sprintf+4
  3827  0107D6  C011  F057         	movff	?___llmod+3,??_sprintf+5
  3828  0107DA  5054               	movf	??_sprintf+2,w,c
  3829  0107DC  0F30               	addlw	48
  3830  0107DE  6FD0               	movwf	sprintf@c& (0+255),b
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;doprnt.c: 1532: }
  3834                           ;doprnt.c: 1533: ((*sp++ = (c)));
  3835  0107E0  51CB               	movf	sprintf@sp& (0+255),w,b
  3836  0107E2  6ED9               	movwf	fsr2l,c
  3837  0107E4  6ADA               	clrf	fsr2h,c
  3838  0107E6  C0D0  FFDF         	movff	sprintf@c,indf2
  3839  0107EA  D7B4               	goto	i1l3095
  3840  0107EC                     i1l3103:
  3841                           
  3842                           ; BSR set to: 0
  3843  0107EC  07C9               	decf	sprintf@prec& (0+255),f,b
  3844  0107EE  A0D8               	btfss	status,0,c
  3845  0107F0  07CA               	decf	(sprintf@prec+1)& (0+255),f,b
  3846  0107F2  0100               	movlb	0	; () banked
  3847  0107F4  29C9               	incf	sprintf@prec& (0+255),w,b
  3848  0107F6  B4D8               	btfsc	status,2,c
  3849  0107F8  29CA               	incf	(sprintf@prec+1)& (0+255),w,b
  3850  0107FA  E1AE               	bnz	i1l3097
  3851  0107FC                     i1l3105:
  3852                           
  3853                           ; BSR set to: 0
  3854  0107FC  C04C  FFF6         	movff	sprintf@f,tblptrl
  3855  010800  C04D  FFF7         	movff	sprintf@f+1,tblptrh
  3856  010804  4A4C               	infsnz	sprintf@f,f,c
  3857  010806  2A4D               	incf	sprintf@f+1,f,c
  3858  010808                     	if	0	;tblptru may be non-zero
  3859  010808                     	endif
  3860  010808                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3861  010808  0E00               	movlw	low (__mediumconst shr (0+16))
  3862  01080A  6EF8               	movwf	tblptru,c
  3863  01080C                     	endif
  3864  01080C  0008               	tblrd		*
  3865  01080E  CFF5 F0D0          	movff	tablat,sprintf@c
  3866  010812  0100               	movlb	0	; () banked
  3867  010814  67D0               	tstfsz	sprintf@c& (0+255),b
  3868  010816  EF04  F080         	goto	i1l2881
  3869  01081A                     i1l3107:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;doprnt.c: 1547: *sp = 0;
  3873  01081A  51CB               	movf	sprintf@sp& (0+255),w,b
  3874  01081C  6ED9               	movwf	fsr2l,c
  3875  01081E  6ADA               	clrf	fsr2h,c
  3876  010820  0E00               	movlw	0
  3877  010822  6EDF               	movwf	indf2,c
  3878                           
  3879                           ; BSR set to: 0
  3880  010824  0C00               	retlw	0
  3881  010826                     __end_of_sprintf:
  3882                           	opt stack 0
  3883                           tblptru	equ	0xFF8
  3884                           tblptrh	equ	0xFF7
  3885                           tblptrl	equ	0xFF6
  3886                           tablat	equ	0xFF5
  3887                           prodh	equ	0xFF4
  3888                           prodl	equ	0xFF3
  3889                           intcon	equ	0xFF2
  3890                           indf0	equ	0xFEF
  3891                           postinc0	equ	0xFEE
  3892                           fsr0h	equ	0xFEA
  3893                           fsr0l	equ	0xFE9
  3894                           wreg	equ	0xFE8
  3895                           postdec1	equ	0xFE5
  3896                           fsr1l	equ	0xFE1
  3897                           bsr	equ	0xFE0
  3898                           indf2	equ	0xFDF
  3899                           postinc2	equ	0xFDE
  3900                           postdec2	equ	0xFDD
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8
  3904                           
  3905 ;; *************** function _scale *****************
  3906 ;; Defined at:
  3907 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  scl             1    wreg     char 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  scl             1   41[COMRAM] char 
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  4   33[COMRAM] char 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3916 ;; Tracked objects:
  3917 ;;		On entry : F/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3922 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3924 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3925 ;;Total ram usage:        9 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    4
  3928 ;; This function calls:
  3929 ;;		___awdiv
  3930 ;;		___awmod
  3931 ;;		___flmul
  3932 ;; This function is called by:
  3933 ;;		_sprintf
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text5
  3938  010826                     __ptext5:
  3939                           	opt stack 0
  3940  010826                     _scale:
  3941                           	opt stack 23
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;incstack = 0
  3945                           ;scale@scl stored from wreg
  3946  010826  6E2A               	movwf	scale@scl,c
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;doprnt.c: 428: if(scl < 0) {
  3950  010828  AE2A               	btfss	scale@scl,7,c
  3951  01082A  D0F7               	goto	i1l2541
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;doprnt.c: 429: scl = -scl;
  3955  01082C  6C2A               	negf	scale@scl,c
  3956                           
  3957                           ;doprnt.c: 430: if(scl>=110)
  3958  01082E  502A               	movf	scale@scl,w,c
  3959  010830  0A80               	xorlw	128
  3960  010832  0F12               	addlw	-238
  3961  010834  E201 D095          	bnc	i1l2531
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3965  010838  6A0A               	clrf	___awdiv@divisor+1,c
  3966  01083A  0E0A               	movlw	10
  3967  01083C  6E09               	movwf	___awdiv@divisor,c
  3968  01083E  6A04               	clrf	___awmod@divisor+1,c
  3969  010840  0E64               	movlw	100
  3970  010842  6E03               	movwf	___awmod@divisor,c
  3971  010844  502A               	movf	scale@scl,w,c
  3972  010846  6E01               	movwf	___awmod@dividend,c
  3973  010848  6A02               	clrf	___awmod@dividend+1,c
  3974  01084A  BE01               	btfsc	___awmod@dividend,7,c
  3975  01084C  0602               	decf	___awmod@dividend+1,f,c
  3976  01084E  ECC2  F08D         	call	___awmod	;wreg free
  3977  010852  C001  F007         	movff	?___awmod,___awdiv@dividend
  3978  010856  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3979  01085A  EC78  F08D         	call	___awdiv	;wreg free
  3980  01085E  90D8               	bcf	status,0,c
  3981  010860  3607               	rlcf	?___awdiv,f,c
  3982  010862  3608               	rlcf	?___awdiv+1,f,c
  3983  010864  90D8               	bcf	status,0,c
  3984  010866  3607               	rlcf	?___awdiv,f,c
  3985  010868  3608               	rlcf	?___awdiv+1,f,c
  3986  01086A  0E24               	movlw	36
  3987  01086C  2607               	addwf	?___awdiv,f,c
  3988  01086E  0E00               	movlw	0
  3989  010870  2208               	addwfc	?___awdiv+1,f,c
  3990  010872  0ECB               	movlw	low __npowers_
  3991  010874  2407               	addwf	?___awdiv,w,c
  3992  010876  6EF6               	movwf	tblptrl,c
  3993  010878  0EFE               	movlw	high __npowers_
  3994  01087A  2008               	addwfc	?___awdiv+1,w,c
  3995  01087C  6EF7               	movwf	tblptrh,c
  3996  01087E                     	if	1	;There are 3 active tblptr bytes
  3997  01087E  6AF8               	clrf	tblptru,c
  3998  010880  0E00               	movlw	low (__mediumconst shr (0+16))
  3999  010882  22F8               	addwfc	tblptru,f,c
  4000  010884                     	endif
  4001  010884  0009               	tblrd		*+
  4002  010886  CFF5 F013          	movff	tablat,___flmul@f2
  4003  01088A  0009               	tblrd		*+
  4004  01088C  CFF5 F014          	movff	tablat,___flmul@f2+1
  4005  010890  0009               	tblrd		*+
  4006  010892  CFF5 F015          	movff	tablat,___flmul@f2+2
  4007  010896  000A               	tblrd		*-
  4008  010898  CFF5 F016          	movff	tablat,___flmul@f2+3
  4009  01089C  6A0A               	clrf	___awdiv@divisor+1,c
  4010  01089E  0E64               	movlw	100
  4011  0108A0  6E09               	movwf	___awdiv@divisor,c
  4012  0108A2  502A               	movf	scale@scl,w,c
  4013  0108A4  6E07               	movwf	___awdiv@dividend,c
  4014  0108A6  6A08               	clrf	___awdiv@dividend+1,c
  4015  0108A8  BE07               	btfsc	___awdiv@dividend,7,c
  4016  0108AA  0608               	decf	___awdiv@dividend+1,f,c
  4017  0108AC  EC78  F08D         	call	___awdiv	;wreg free
  4018  0108B0  90D8               	bcf	status,0,c
  4019  0108B2  3607               	rlcf	?___awdiv,f,c
  4020  0108B4  3608               	rlcf	?___awdiv+1,f,c
  4021  0108B6  90D8               	bcf	status,0,c
  4022  0108B8  3607               	rlcf	?___awdiv,f,c
  4023  0108BA  3608               	rlcf	?___awdiv+1,f,c
  4024  0108BC  0E48               	movlw	72
  4025  0108BE  2607               	addwf	?___awdiv,f,c
  4026  0108C0  0E00               	movlw	0
  4027  0108C2  2208               	addwfc	?___awdiv+1,f,c
  4028  0108C4  0ECB               	movlw	low __npowers_
  4029  0108C6  2407               	addwf	?___awdiv,w,c
  4030  0108C8  6EF6               	movwf	tblptrl,c
  4031  0108CA  0EFE               	movlw	high __npowers_
  4032  0108CC  2008               	addwfc	?___awdiv+1,w,c
  4033  0108CE  6EF7               	movwf	tblptrh,c
  4034  0108D0                     	if	1	;There are 3 active tblptr bytes
  4035  0108D0  6AF8               	clrf	tblptru,c
  4036  0108D2  0E00               	movlw	low (__mediumconst shr (0+16))
  4037  0108D4  22F8               	addwfc	tblptru,f,c
  4038  0108D6                     	endif
  4039  0108D6  0009               	tblrd		*+
  4040  0108D8  CFF5 F00F          	movff	tablat,___flmul@f1
  4041  0108DC  0009               	tblrd		*+
  4042  0108DE  CFF5 F010          	movff	tablat,___flmul@f1+1
  4043  0108E2  0009               	tblrd		*+
  4044  0108E4  CFF5 F011          	movff	tablat,___flmul@f1+2
  4045  0108E8  000A               	tblrd		*-
  4046  0108EA  CFF5 F012          	movff	tablat,___flmul@f1+3
  4047  0108EE  EC44  F08A         	call	___flmul	;wreg free
  4048  0108F2  C00F  F026         	movff	?___flmul,_scale$1214
  4049  0108F6  C010  F027         	movff	?___flmul+1,_scale$1214+1
  4050  0108FA  C011  F028         	movff	?___flmul+2,_scale$1214+2
  4051  0108FE  C012  F029         	movff	?___flmul+3,_scale$1214+3
  4052                           
  4053                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4054  010902  C026  F00F         	movff	_scale$1214,___flmul@f1
  4055  010906  C027  F010         	movff	_scale$1214+1,___flmul@f1+1
  4056  01090A  C028  F011         	movff	_scale$1214+2,___flmul@f1+2
  4057  01090E  C029  F012         	movff	_scale$1214+3,___flmul@f1+3
  4058  010912  6A04               	clrf	___awmod@divisor+1,c
  4059  010914  0E0A               	movlw	10
  4060  010916  6E03               	movwf	___awmod@divisor,c
  4061  010918  502A               	movf	scale@scl,w,c
  4062  01091A  6E01               	movwf	___awmod@dividend,c
  4063  01091C  6A02               	clrf	___awmod@dividend+1,c
  4064  01091E  BE01               	btfsc	___awmod@dividend,7,c
  4065  010920  0602               	decf	___awmod@dividend+1,f,c
  4066  010922  ECC2  F08D         	call	___awmod	;wreg free
  4067  010926  90D8               	bcf	status,0,c
  4068  010928  3601               	rlcf	?___awmod,f,c
  4069  01092A  3602               	rlcf	?___awmod+1,f,c
  4070  01092C  90D8               	bcf	status,0,c
  4071  01092E  3601               	rlcf	?___awmod,f,c
  4072  010930  3602               	rlcf	?___awmod+1,f,c
  4073  010932  0ECB               	movlw	low __npowers_
  4074  010934  2401               	addwf	?___awmod,w,c
  4075  010936  6EF6               	movwf	tblptrl,c
  4076  010938  0EFE               	movlw	high __npowers_
  4077  01093A  2002               	addwfc	?___awmod+1,w,c
  4078  01093C  6EF7               	movwf	tblptrh,c
  4079  01093E                     	if	1	;There are 3 active tblptr bytes
  4080  01093E  6AF8               	clrf	tblptru,c
  4081  010940  0E00               	movlw	low (__mediumconst shr (0+16))
  4082  010942  22F8               	addwfc	tblptru,f,c
  4083  010944                     	endif
  4084  010944  0009               	tblrd		*+
  4085  010946  CFF5 F013          	movff	tablat,___flmul@f2
  4086  01094A  0009               	tblrd		*+
  4087  01094C  CFF5 F014          	movff	tablat,___flmul@f2+1
  4088  010950  0009               	tblrd		*+
  4089  010952  CFF5 F015          	movff	tablat,___flmul@f2+2
  4090  010956  000A               	tblrd		*-
  4091  010958  CFF5 F016          	movff	tablat,___flmul@f2+3
  4092  01095C  EC44  F08A         	call	___flmul	;wreg free
  4093  010960  D14A               	goto	L11
  4094  010962                     i1l2531:
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;doprnt.c: 432: else if(scl > 10)
  4098  010962  502A               	movf	scale@scl,w,c
  4099  010964  0A80               	xorlw	128
  4100  010966  0F75               	addlw	-139
  4101  010968  E351               	bnc	i1l2537
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4105  01096A  6A0A               	clrf	___awdiv@divisor+1,c
  4106  01096C  0E0A               	movlw	10
  4107  01096E  6E09               	movwf	___awdiv@divisor,c
  4108  010970  502A               	movf	scale@scl,w,c
  4109  010972  6E07               	movwf	___awdiv@dividend,c
  4110  010974  6A08               	clrf	___awdiv@dividend+1,c
  4111  010976  BE07               	btfsc	___awdiv@dividend,7,c
  4112  010978  0608               	decf	___awdiv@dividend+1,f,c
  4113  01097A  EC78  F08D         	call	___awdiv	;wreg free
  4114  01097E  90D8               	bcf	status,0,c
  4115  010980  3607               	rlcf	?___awdiv,f,c
  4116  010982  3608               	rlcf	?___awdiv+1,f,c
  4117  010984  90D8               	bcf	status,0,c
  4118  010986  3607               	rlcf	?___awdiv,f,c
  4119  010988  3608               	rlcf	?___awdiv+1,f,c
  4120  01098A  0E24               	movlw	36
  4121  01098C  2607               	addwf	?___awdiv,f,c
  4122  01098E  0E00               	movlw	0
  4123  010990  2208               	addwfc	?___awdiv+1,f,c
  4124  010992  0ECB               	movlw	low __npowers_
  4125  010994  2407               	addwf	?___awdiv,w,c
  4126  010996  6EF6               	movwf	tblptrl,c
  4127  010998  0EFE               	movlw	high __npowers_
  4128  01099A  2008               	addwfc	?___awdiv+1,w,c
  4129  01099C  6EF7               	movwf	tblptrh,c
  4130  01099E                     	if	1	;There are 3 active tblptr bytes
  4131  01099E  6AF8               	clrf	tblptru,c
  4132  0109A0  0E00               	movlw	low (__mediumconst shr (0+16))
  4133  0109A2  22F8               	addwfc	tblptru,f,c
  4134  0109A4                     	endif
  4135  0109A4  0009               	tblrd		*+
  4136  0109A6  CFF5 F00F          	movff	tablat,___flmul@f1
  4137  0109AA  0009               	tblrd		*+
  4138  0109AC  CFF5 F010          	movff	tablat,___flmul@f1+1
  4139  0109B0  0009               	tblrd		*+
  4140  0109B2  CFF5 F011          	movff	tablat,___flmul@f1+2
  4141  0109B6  000A               	tblrd		*-
  4142  0109B8  CFF5 F012          	movff	tablat,___flmul@f1+3
  4143  0109BC  6A04               	clrf	___awmod@divisor+1,c
  4144  0109BE  0E0A               	movlw	10
  4145  0109C0  6E03               	movwf	___awmod@divisor,c
  4146  0109C2  502A               	movf	scale@scl,w,c
  4147  0109C4  6E01               	movwf	___awmod@dividend,c
  4148  0109C6  6A02               	clrf	___awmod@dividend+1,c
  4149  0109C8  BE01               	btfsc	___awmod@dividend,7,c
  4150  0109CA  0602               	decf	___awmod@dividend+1,f,c
  4151  0109CC  ECC2  F08D         	call	___awmod	;wreg free
  4152  0109D0  90D8               	bcf	status,0,c
  4153  0109D2  3601               	rlcf	?___awmod,f,c
  4154  0109D4  3602               	rlcf	?___awmod+1,f,c
  4155  0109D6  90D8               	bcf	status,0,c
  4156  0109D8  3601               	rlcf	?___awmod,f,c
  4157  0109DA  3602               	rlcf	?___awmod+1,f,c
  4158  0109DC  0ECB               	movlw	low __npowers_
  4159  0109DE  2401               	addwf	?___awmod,w,c
  4160  0109E0  6EF6               	movwf	tblptrl,c
  4161  0109E2  0EFE               	movlw	high __npowers_
  4162  0109E4  2002               	addwfc	?___awmod+1,w,c
  4163  0109E6  6EF7               	movwf	tblptrh,c
  4164  0109E8                     	if	1	;There are 3 active tblptr bytes
  4165  0109E8  6AF8               	clrf	tblptru,c
  4166  0109EA  0E00               	movlw	low (__mediumconst shr (0+16))
  4167  0109EC  22F8               	addwfc	tblptru,f,c
  4168  0109EE                     	endif
  4169  0109EE  0009               	tblrd		*+
  4170  0109F0  CFF5 F013          	movff	tablat,___flmul@f2
  4171  0109F4  0009               	tblrd		*+
  4172  0109F6  CFF5 F014          	movff	tablat,___flmul@f2+1
  4173  0109FA  0009               	tblrd		*+
  4174  0109FC  CFF5 F015          	movff	tablat,___flmul@f2+2
  4175  010A00  000A               	tblrd		*-
  4176  010A02  CFF5 F016          	movff	tablat,___flmul@f2+3
  4177  010A06  EC44  F08A         	call	___flmul	;wreg free
  4178  010A0A  D0F5               	goto	L11
  4179  010A0C                     i1l2537:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;doprnt.c: 434: return _npowers_[scl];
  4183  010A0C  502A               	movf	scale@scl,w,c
  4184  010A0E  0D04               	mullw	4
  4185  010A10  0ECB               	movlw	low __npowers_
  4186  010A12  24F3               	addwf	prodl,w,c
  4187  010A14  6EF6               	movwf	tblptrl,c
  4188  010A16  0EFE               	movlw	high __npowers_
  4189  010A18  D0FD               	goto	L10
  4190  010A1A                     i1l2541:
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;doprnt.c: 435: }
  4194                           ;doprnt.c: 436: if(scl>=110)
  4195  010A1A  502A               	movf	scale@scl,w,c
  4196  010A1C  0A80               	xorlw	128
  4197  010A1E  0F12               	addlw	-238
  4198  010A20  E201 D095          	bnc	i1l2549
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4202  010A24  6A0A               	clrf	___awdiv@divisor+1,c
  4203  010A26  0E0A               	movlw	10
  4204  010A28  6E09               	movwf	___awdiv@divisor,c
  4205  010A2A  6A04               	clrf	___awmod@divisor+1,c
  4206  010A2C  0E64               	movlw	100
  4207  010A2E  6E03               	movwf	___awmod@divisor,c
  4208  010A30  502A               	movf	scale@scl,w,c
  4209  010A32  6E01               	movwf	___awmod@dividend,c
  4210  010A34  6A02               	clrf	___awmod@dividend+1,c
  4211  010A36  BE01               	btfsc	___awmod@dividend,7,c
  4212  010A38  0602               	decf	___awmod@dividend+1,f,c
  4213  010A3A  ECC2  F08D         	call	___awmod	;wreg free
  4214  010A3E  C001  F007         	movff	?___awmod,___awdiv@dividend
  4215  010A42  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4216  010A46  EC78  F08D         	call	___awdiv	;wreg free
  4217  010A4A  90D8               	bcf	status,0,c
  4218  010A4C  3607               	rlcf	?___awdiv,f,c
  4219  010A4E  3608               	rlcf	?___awdiv+1,f,c
  4220  010A50  90D8               	bcf	status,0,c
  4221  010A52  3607               	rlcf	?___awdiv,f,c
  4222  010A54  3608               	rlcf	?___awdiv+1,f,c
  4223  010A56  0E24               	movlw	36
  4224  010A58  2607               	addwf	?___awdiv,f,c
  4225  010A5A  0E00               	movlw	0
  4226  010A5C  2208               	addwfc	?___awdiv+1,f,c
  4227  010A5E  0EFF               	movlw	low __powers_
  4228  010A60  2407               	addwf	?___awdiv,w,c
  4229  010A62  6EF6               	movwf	tblptrl,c
  4230  010A64  0EFE               	movlw	high __powers_
  4231  010A66  2008               	addwfc	?___awdiv+1,w,c
  4232  010A68  6EF7               	movwf	tblptrh,c
  4233  010A6A                     	if	1	;There are 3 active tblptr bytes
  4234  010A6A  6AF8               	clrf	tblptru,c
  4235  010A6C  0E00               	movlw	low (__mediumconst shr (0+16))
  4236  010A6E  22F8               	addwfc	tblptru,f,c
  4237  010A70                     	endif
  4238  010A70  0009               	tblrd		*+
  4239  010A72  CFF5 F013          	movff	tablat,___flmul@f2
  4240  010A76  0009               	tblrd		*+
  4241  010A78  CFF5 F014          	movff	tablat,___flmul@f2+1
  4242  010A7C  0009               	tblrd		*+
  4243  010A7E  CFF5 F015          	movff	tablat,___flmul@f2+2
  4244  010A82  000A               	tblrd		*-
  4245  010A84  CFF5 F016          	movff	tablat,___flmul@f2+3
  4246  010A88  6A0A               	clrf	___awdiv@divisor+1,c
  4247  010A8A  0E64               	movlw	100
  4248  010A8C  6E09               	movwf	___awdiv@divisor,c
  4249  010A8E  502A               	movf	scale@scl,w,c
  4250  010A90  6E07               	movwf	___awdiv@dividend,c
  4251  010A92  6A08               	clrf	___awdiv@dividend+1,c
  4252  010A94  BE07               	btfsc	___awdiv@dividend,7,c
  4253  010A96  0608               	decf	___awdiv@dividend+1,f,c
  4254  010A98  EC78  F08D         	call	___awdiv	;wreg free
  4255  010A9C  90D8               	bcf	status,0,c
  4256  010A9E  3607               	rlcf	?___awdiv,f,c
  4257  010AA0  3608               	rlcf	?___awdiv+1,f,c
  4258  010AA2  90D8               	bcf	status,0,c
  4259  010AA4  3607               	rlcf	?___awdiv,f,c
  4260  010AA6  3608               	rlcf	?___awdiv+1,f,c
  4261  010AA8  0E48               	movlw	72
  4262  010AAA  2607               	addwf	?___awdiv,f,c
  4263  010AAC  0E00               	movlw	0
  4264  010AAE  2208               	addwfc	?___awdiv+1,f,c
  4265  010AB0  0EFF               	movlw	low __powers_
  4266  010AB2  2407               	addwf	?___awdiv,w,c
  4267  010AB4  6EF6               	movwf	tblptrl,c
  4268  010AB6  0EFE               	movlw	high __powers_
  4269  010AB8  2008               	addwfc	?___awdiv+1,w,c
  4270  010ABA  6EF7               	movwf	tblptrh,c
  4271  010ABC                     	if	1	;There are 3 active tblptr bytes
  4272  010ABC  6AF8               	clrf	tblptru,c
  4273  010ABE  0E00               	movlw	low (__mediumconst shr (0+16))
  4274  010AC0  22F8               	addwfc	tblptru,f,c
  4275  010AC2                     	endif
  4276  010AC2  0009               	tblrd		*+
  4277  010AC4  CFF5 F00F          	movff	tablat,___flmul@f1
  4278  010AC8  0009               	tblrd		*+
  4279  010ACA  CFF5 F010          	movff	tablat,___flmul@f1+1
  4280  010ACE  0009               	tblrd		*+
  4281  010AD0  CFF5 F011          	movff	tablat,___flmul@f1+2
  4282  010AD4  000A               	tblrd		*-
  4283  010AD6  CFF5 F012          	movff	tablat,___flmul@f1+3
  4284  010ADA  EC44  F08A         	call	___flmul	;wreg free
  4285  010ADE  C00F  F026         	movff	?___flmul,_scale$1214
  4286  010AE2  C010  F027         	movff	?___flmul+1,_scale$1214+1
  4287  010AE6  C011  F028         	movff	?___flmul+2,_scale$1214+2
  4288  010AEA  C012  F029         	movff	?___flmul+3,_scale$1214+3
  4289                           
  4290                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4291  010AEE  C026  F00F         	movff	_scale$1214,___flmul@f1
  4292  010AF2  C027  F010         	movff	_scale$1214+1,___flmul@f1+1
  4293  010AF6  C028  F011         	movff	_scale$1214+2,___flmul@f1+2
  4294  010AFA  C029  F012         	movff	_scale$1214+3,___flmul@f1+3
  4295  010AFE  6A04               	clrf	___awmod@divisor+1,c
  4296  010B00  0E0A               	movlw	10
  4297  010B02  6E03               	movwf	___awmod@divisor,c
  4298  010B04  502A               	movf	scale@scl,w,c
  4299  010B06  6E01               	movwf	___awmod@dividend,c
  4300  010B08  6A02               	clrf	___awmod@dividend+1,c
  4301  010B0A  BE01               	btfsc	___awmod@dividend,7,c
  4302  010B0C  0602               	decf	___awmod@dividend+1,f,c
  4303  010B0E  ECC2  F08D         	call	___awmod	;wreg free
  4304  010B12  90D8               	bcf	status,0,c
  4305  010B14  3601               	rlcf	?___awmod,f,c
  4306  010B16  3602               	rlcf	?___awmod+1,f,c
  4307  010B18  90D8               	bcf	status,0,c
  4308  010B1A  3601               	rlcf	?___awmod,f,c
  4309  010B1C  3602               	rlcf	?___awmod+1,f,c
  4310  010B1E  0EFF               	movlw	low __powers_
  4311  010B20  2401               	addwf	?___awmod,w,c
  4312  010B22  6EF6               	movwf	tblptrl,c
  4313  010B24  0EFE               	movlw	high __powers_
  4314  010B26  2002               	addwfc	?___awmod+1,w,c
  4315  010B28  6EF7               	movwf	tblptrh,c
  4316  010B2A                     	if	1	;There are 3 active tblptr bytes
  4317  010B2A  6AF8               	clrf	tblptru,c
  4318  010B2C  0E00               	movlw	low (__mediumconst shr (0+16))
  4319  010B2E  22F8               	addwfc	tblptru,f,c
  4320  010B30                     	endif
  4321  010B30  0009               	tblrd		*+
  4322  010B32  CFF5 F013          	movff	tablat,___flmul@f2
  4323  010B36  0009               	tblrd		*+
  4324  010B38  CFF5 F014          	movff	tablat,___flmul@f2+1
  4325  010B3C  0009               	tblrd		*+
  4326  010B3E  CFF5 F015          	movff	tablat,___flmul@f2+2
  4327  010B42  000A               	tblrd		*-
  4328  010B44  CFF5 F016          	movff	tablat,___flmul@f2+3
  4329  010B48  EC44  F08A         	call	___flmul	;wreg free
  4330  010B4C  D054               	goto	L11
  4331  010B4E                     i1l2549:
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;doprnt.c: 438: else if(scl > 10)
  4335  010B4E  502A               	movf	scale@scl,w,c
  4336  010B50  0A80               	xorlw	128
  4337  010B52  0F75               	addlw	-139
  4338  010B54  E359               	bnc	i1l2555
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4342  010B56  6A0A               	clrf	___awdiv@divisor+1,c
  4343  010B58  0E0A               	movlw	10
  4344  010B5A  6E09               	movwf	___awdiv@divisor,c
  4345  010B5C  502A               	movf	scale@scl,w,c
  4346  010B5E  6E07               	movwf	___awdiv@dividend,c
  4347  010B60  6A08               	clrf	___awdiv@dividend+1,c
  4348  010B62  BE07               	btfsc	___awdiv@dividend,7,c
  4349  010B64  0608               	decf	___awdiv@dividend+1,f,c
  4350  010B66  EC78  F08D         	call	___awdiv	;wreg free
  4351  010B6A  90D8               	bcf	status,0,c
  4352  010B6C  3607               	rlcf	?___awdiv,f,c
  4353  010B6E  3608               	rlcf	?___awdiv+1,f,c
  4354  010B70  90D8               	bcf	status,0,c
  4355  010B72  3607               	rlcf	?___awdiv,f,c
  4356  010B74  3608               	rlcf	?___awdiv+1,f,c
  4357  010B76  0E24               	movlw	36
  4358  010B78  2607               	addwf	?___awdiv,f,c
  4359  010B7A  0E00               	movlw	0
  4360  010B7C  2208               	addwfc	?___awdiv+1,f,c
  4361  010B7E  0EFF               	movlw	low __powers_
  4362  010B80  2407               	addwf	?___awdiv,w,c
  4363  010B82  6EF6               	movwf	tblptrl,c
  4364  010B84  0EFE               	movlw	high __powers_
  4365  010B86  2008               	addwfc	?___awdiv+1,w,c
  4366  010B88  6EF7               	movwf	tblptrh,c
  4367  010B8A                     	if	1	;There are 3 active tblptr bytes
  4368  010B8A  6AF8               	clrf	tblptru,c
  4369  010B8C  0E00               	movlw	low (__mediumconst shr (0+16))
  4370  010B8E  22F8               	addwfc	tblptru,f,c
  4371  010B90                     	endif
  4372  010B90  0009               	tblrd		*+
  4373  010B92  CFF5 F00F          	movff	tablat,___flmul@f1
  4374  010B96  0009               	tblrd		*+
  4375  010B98  CFF5 F010          	movff	tablat,___flmul@f1+1
  4376  010B9C  0009               	tblrd		*+
  4377  010B9E  CFF5 F011          	movff	tablat,___flmul@f1+2
  4378  010BA2  000A               	tblrd		*-
  4379  010BA4  CFF5 F012          	movff	tablat,___flmul@f1+3
  4380  010BA8  6A04               	clrf	___awmod@divisor+1,c
  4381  010BAA  0E0A               	movlw	10
  4382  010BAC  6E03               	movwf	___awmod@divisor,c
  4383  010BAE  502A               	movf	scale@scl,w,c
  4384  010BB0  6E01               	movwf	___awmod@dividend,c
  4385  010BB2  6A02               	clrf	___awmod@dividend+1,c
  4386  010BB4  BE01               	btfsc	___awmod@dividend,7,c
  4387  010BB6  0602               	decf	___awmod@dividend+1,f,c
  4388  010BB8  ECC2  F08D         	call	___awmod	;wreg free
  4389  010BBC  90D8               	bcf	status,0,c
  4390  010BBE  3601               	rlcf	?___awmod,f,c
  4391  010BC0  3602               	rlcf	?___awmod+1,f,c
  4392  010BC2  90D8               	bcf	status,0,c
  4393  010BC4  3601               	rlcf	?___awmod,f,c
  4394  010BC6  3602               	rlcf	?___awmod+1,f,c
  4395  010BC8  0EFF               	movlw	low __powers_
  4396  010BCA  2401               	addwf	?___awmod,w,c
  4397  010BCC  6EF6               	movwf	tblptrl,c
  4398  010BCE  0EFE               	movlw	high __powers_
  4399  010BD0  2002               	addwfc	?___awmod+1,w,c
  4400  010BD2  6EF7               	movwf	tblptrh,c
  4401  010BD4                     	if	1	;There are 3 active tblptr bytes
  4402  010BD4  6AF8               	clrf	tblptru,c
  4403  010BD6  0E00               	movlw	low (__mediumconst shr (0+16))
  4404  010BD8  22F8               	addwfc	tblptru,f,c
  4405  010BDA                     	endif
  4406  010BDA  0009               	tblrd		*+
  4407  010BDC  CFF5 F013          	movff	tablat,___flmul@f2
  4408  010BE0  0009               	tblrd		*+
  4409  010BE2  CFF5 F014          	movff	tablat,___flmul@f2+1
  4410  010BE6  0009               	tblrd		*+
  4411  010BE8  CFF5 F015          	movff	tablat,___flmul@f2+2
  4412  010BEC  000A               	tblrd		*-
  4413  010BEE  CFF5 F016          	movff	tablat,___flmul@f2+3
  4414  010BF2  EC44  F08A         	call	___flmul	;wreg free
  4415  010BF6                     L11:
  4416  010BF6  C00F  F022         	movff	?___flmul,?_scale
  4417  010BFA  C010  F023         	movff	?___flmul+1,?_scale+1
  4418  010BFE  C011  F024         	movff	?___flmul+2,?_scale+2
  4419  010C02  C012  F025         	movff	?___flmul+3,?_scale+3
  4420  010C06  D017               	goto	i1l323
  4421  010C08                     i1l2555:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;doprnt.c: 440: return _powers_[scl];
  4425  010C08  502A               	movf	scale@scl,w,c
  4426  010C0A  0D04               	mullw	4
  4427  010C0C  0EFF               	movlw	low __powers_
  4428  010C0E  24F3               	addwf	prodl,w,c
  4429  010C10  6EF6               	movwf	tblptrl,c
  4430  010C12  0EFE               	movlw	high __powers_
  4431  010C14                     L10:
  4432  010C14  20F4               	addwfc	prodh,w,c
  4433  010C16  6EF7               	movwf	tblptrh,c
  4434  010C18                     	if	1	;There are 3 active tblptr bytes
  4435  010C18  6AF8               	clrf	tblptru,c
  4436  010C1A  0E00               	movlw	low (__mediumconst shr (0+16))
  4437  010C1C  22F8               	addwfc	tblptru,f,c
  4438  010C1E                     	endif
  4439  010C1E  0009               	tblrd		*+
  4440  010C20  CFF5 F022          	movff	tablat,?_scale
  4441  010C24  0009               	tblrd		*+
  4442  010C26  CFF5 F023          	movff	tablat,?_scale+1
  4443  010C2A  0009               	tblrd		*+
  4444  010C2C  CFF5 F024          	movff	tablat,?_scale+2
  4445  010C30  000A               	tblrd		*-
  4446  010C32  CFF5 F025          	movff	tablat,?_scale+3
  4447  010C36                     i1l323:
  4448  010C36  0012               	return	
  4449  010C38                     __end_of_scale:
  4450                           	opt stack 0
  4451                           tblptru	equ	0xFF8
  4452                           tblptrh	equ	0xFF7
  4453                           tblptrl	equ	0xFF6
  4454                           tablat	equ	0xFF5
  4455                           prodh	equ	0xFF4
  4456                           prodl	equ	0xFF3
  4457                           intcon	equ	0xFF2
  4458                           indf0	equ	0xFEF
  4459                           postinc0	equ	0xFEE
  4460                           fsr0h	equ	0xFEA
  4461                           fsr0l	equ	0xFE9
  4462                           wreg	equ	0xFE8
  4463                           postdec1	equ	0xFE5
  4464                           fsr1l	equ	0xFE1
  4465                           bsr	equ	0xFE0
  4466                           indf2	equ	0xFDF
  4467                           postinc2	equ	0xFDE
  4468                           postdec2	equ	0xFDD
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function ___awmod *****************
  4474 ;; Defined at:
  4475 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;  dividend        2    0[COMRAM] int 
  4478 ;;  divisor         2    2[COMRAM] int 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  sign            1    5[COMRAM] unsigned char 
  4481 ;;  counter         1    4[COMRAM] unsigned char 
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  2    0[COMRAM] int 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0, prodl
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4492 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4494 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4495 ;;Total ram usage:        6 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    2
  4498 ;; This function calls:
  4499 ;;		Nothing
  4500 ;; This function is called by:
  4501 ;;		_scale
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text6
  4506  011B84                     __ptext6:
  4507                           	opt stack 0
  4508  011B84                     ___awmod:
  4509                           	opt stack 24
  4510                           
  4511                           ;incstack = 0
  4512  011B84  6A06               	clrf	___awmod@sign,c
  4513  011B86  5002               	movf	___awmod@dividend+1,w,c
  4514  011B88  0A80               	xorlw	128
  4515  011B8A  6EF3               	movwf	prodl,c
  4516  011B8C  0E80               	movlw	128
  4517  011B8E  5CF3               	subwf	prodl,w,c
  4518  011B90  0E00               	movlw	0
  4519  011B92  B4D8               	btfsc	status,2,c
  4520  011B94  5C01               	subwf	___awmod@dividend,w,c
  4521  011B96  E206               	bc	i1l2427
  4522  011B98  6C01               	negf	___awmod@dividend,c
  4523  011B9A  1E02               	comf	___awmod@dividend+1,f,c
  4524  011B9C  B0D8               	btfsc	status,0,c
  4525  011B9E  2A02               	incf	___awmod@dividend+1,f,c
  4526  011BA0  0E01               	movlw	1
  4527  011BA2  6E06               	movwf	___awmod@sign,c
  4528  011BA4                     i1l2427:
  4529  011BA4  5004               	movf	___awmod@divisor+1,w,c
  4530  011BA6  0A80               	xorlw	128
  4531  011BA8  6EF3               	movwf	prodl,c
  4532  011BAA  0E80               	movlw	128
  4533  011BAC  5CF3               	subwf	prodl,w,c
  4534  011BAE  0E00               	movlw	0
  4535  011BB0  B4D8               	btfsc	status,2,c
  4536  011BB2  5C03               	subwf	___awmod@divisor,w,c
  4537  011BB4  E204               	bc	i1l2431
  4538  011BB6  6C03               	negf	___awmod@divisor,c
  4539  011BB8  1E04               	comf	___awmod@divisor+1,f,c
  4540  011BBA  B0D8               	btfsc	status,0,c
  4541  011BBC  2A04               	incf	___awmod@divisor+1,f,c
  4542  011BBE                     i1l2431:
  4543  011BBE  5004               	movf	___awmod@divisor+1,w,c
  4544  011BC0  1003               	iorwf	___awmod@divisor,w,c
  4545  011BC2  E017               	bz	i1l2447
  4546  011BC4  0E01               	movlw	1
  4547  011BC6  6E05               	movwf	___awmod@counter,c
  4548  011BC8  D004               	goto	i1l2437
  4549  011BCA                     i1l2435:
  4550  011BCA  90D8               	bcf	status,0,c
  4551  011BCC  3603               	rlcf	___awmod@divisor,f,c
  4552  011BCE  3604               	rlcf	___awmod@divisor+1,f,c
  4553  011BD0  2A05               	incf	___awmod@counter,f,c
  4554  011BD2                     i1l2437:
  4555  011BD2  AE04               	btfss	___awmod@divisor+1,7,c
  4556  011BD4  D7FA               	goto	i1l2435
  4557  011BD6                     i1l2439:
  4558  011BD6  5003               	movf	___awmod@divisor,w,c
  4559  011BD8  5C01               	subwf	___awmod@dividend,w,c
  4560  011BDA  5004               	movf	___awmod@divisor+1,w,c
  4561  011BDC  5802               	subwfb	___awmod@dividend+1,w,c
  4562  011BDE  E304               	bnc	i1l2443
  4563  011BE0  5003               	movf	___awmod@divisor,w,c
  4564  011BE2  5E01               	subwf	___awmod@dividend,f,c
  4565  011BE4  5004               	movf	___awmod@divisor+1,w,c
  4566  011BE6  5A02               	subwfb	___awmod@dividend+1,f,c
  4567  011BE8                     i1l2443:
  4568  011BE8  90D8               	bcf	status,0,c
  4569  011BEA  3204               	rrcf	___awmod@divisor+1,f,c
  4570  011BEC  3203               	rrcf	___awmod@divisor,f,c
  4571  011BEE  2E05               	decfsz	___awmod@counter,f,c
  4572  011BF0  D7F2               	goto	i1l2439
  4573  011BF2                     i1l2447:
  4574  011BF2  5006               	movf	___awmod@sign,w,c
  4575  011BF4  E004               	bz	i1l2451
  4576  011BF6  6C01               	negf	___awmod@dividend,c
  4577  011BF8  1E02               	comf	___awmod@dividend+1,f,c
  4578  011BFA  B0D8               	btfsc	status,0,c
  4579  011BFC  2A02               	incf	___awmod@dividend+1,f,c
  4580  011BFE                     i1l2451:
  4581  011BFE  C001  F001         	movff	___awmod@dividend,?___awmod
  4582  011C02  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4583  011C06  0012               	return	
  4584  011C08                     __end_of___awmod:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           indf0	equ	0xFEF
  4594                           postinc0	equ	0xFEE
  4595                           fsr0h	equ	0xFEA
  4596                           fsr0l	equ	0xFE9
  4597                           wreg	equ	0xFE8
  4598                           postdec1	equ	0xFE5
  4599                           fsr1l	equ	0xFE1
  4600                           bsr	equ	0xFE0
  4601                           indf2	equ	0xFDF
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function ___awdiv *****************
  4609 ;; Defined at:
  4610 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  dividend        2    6[COMRAM] int 
  4613 ;;  divisor         2    8[COMRAM] int 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  quotient        2   12[COMRAM] int 
  4616 ;;  sign            1   11[COMRAM] unsigned char 
  4617 ;;  counter         1   10[COMRAM] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  2    6[COMRAM] int 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, prodl
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4627 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4628 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4630 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4631 ;;Total ram usage:        8 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    2
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_scale
  4638 ;;		_sprintf
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text7
  4643  011AF0                     __ptext7:
  4644                           	opt stack 0
  4645  011AF0                     ___awdiv:
  4646                           	opt stack 24
  4647                           
  4648                           ;incstack = 0
  4649  011AF0  6A0C               	clrf	___awdiv@sign,c
  4650  011AF2  500A               	movf	___awdiv@divisor+1,w,c
  4651  011AF4  0A80               	xorlw	128
  4652  011AF6  6EF3               	movwf	prodl,c
  4653  011AF8  0E80               	movlw	128
  4654  011AFA  5CF3               	subwf	prodl,w,c
  4655  011AFC  0E00               	movlw	0
  4656  011AFE  B4D8               	btfsc	status,2,c
  4657  011B00  5C09               	subwf	___awdiv@divisor,w,c
  4658  011B02  E206               	bc	i1l2383
  4659  011B04  6C09               	negf	___awdiv@divisor,c
  4660  011B06  1E0A               	comf	___awdiv@divisor+1,f,c
  4661  011B08  B0D8               	btfsc	status,0,c
  4662  011B0A  2A0A               	incf	___awdiv@divisor+1,f,c
  4663  011B0C  0E01               	movlw	1
  4664  011B0E  6E0C               	movwf	___awdiv@sign,c
  4665  011B10                     i1l2383:
  4666  011B10  5008               	movf	___awdiv@dividend+1,w,c
  4667  011B12  0A80               	xorlw	128
  4668  011B14  6EF3               	movwf	prodl,c
  4669  011B16  0E80               	movlw	128
  4670  011B18  5CF3               	subwf	prodl,w,c
  4671  011B1A  0E00               	movlw	0
  4672  011B1C  B4D8               	btfsc	status,2,c
  4673  011B1E  5C07               	subwf	___awdiv@dividend,w,c
  4674  011B20  E206               	bc	i1l2389
  4675  011B22  6C07               	negf	___awdiv@dividend,c
  4676  011B24  1E08               	comf	___awdiv@dividend+1,f,c
  4677  011B26  B0D8               	btfsc	status,0,c
  4678  011B28  2A08               	incf	___awdiv@dividend+1,f,c
  4679  011B2A  0E01               	movlw	1
  4680  011B2C  1A0C               	xorwf	___awdiv@sign,f,c
  4681  011B2E                     i1l2389:
  4682  011B2E  6A0D               	clrf	___awdiv@quotient,c
  4683  011B30  6A0E               	clrf	___awdiv@quotient+1,c
  4684  011B32  500A               	movf	___awdiv@divisor+1,w,c
  4685  011B34  1009               	iorwf	___awdiv@divisor,w,c
  4686  011B36  E01B               	bz	i1l2411
  4687  011B38  0E01               	movlw	1
  4688  011B3A  6E0B               	movwf	___awdiv@counter,c
  4689  011B3C  D004               	goto	i1l2397
  4690  011B3E                     i1l2395:
  4691  011B3E  90D8               	bcf	status,0,c
  4692  011B40  3609               	rlcf	___awdiv@divisor,f,c
  4693  011B42  360A               	rlcf	___awdiv@divisor+1,f,c
  4694  011B44  2A0B               	incf	___awdiv@counter,f,c
  4695  011B46                     i1l2397:
  4696  011B46  AE0A               	btfss	___awdiv@divisor+1,7,c
  4697  011B48  D7FA               	goto	i1l2395
  4698  011B4A                     i1l2399:
  4699  011B4A  90D8               	bcf	status,0,c
  4700  011B4C  360D               	rlcf	___awdiv@quotient,f,c
  4701  011B4E  360E               	rlcf	___awdiv@quotient+1,f,c
  4702  011B50  5009               	movf	___awdiv@divisor,w,c
  4703  011B52  5C07               	subwf	___awdiv@dividend,w,c
  4704  011B54  500A               	movf	___awdiv@divisor+1,w,c
  4705  011B56  5808               	subwfb	___awdiv@dividend+1,w,c
  4706  011B58  E305               	bnc	i1l2407
  4707  011B5A  5009               	movf	___awdiv@divisor,w,c
  4708  011B5C  5E07               	subwf	___awdiv@dividend,f,c
  4709  011B5E  500A               	movf	___awdiv@divisor+1,w,c
  4710  011B60  5A08               	subwfb	___awdiv@dividend+1,f,c
  4711  011B62  800D               	bsf	___awdiv@quotient,0,c
  4712  011B64                     i1l2407:
  4713  011B64  90D8               	bcf	status,0,c
  4714  011B66  320A               	rrcf	___awdiv@divisor+1,f,c
  4715  011B68  3209               	rrcf	___awdiv@divisor,f,c
  4716  011B6A  2E0B               	decfsz	___awdiv@counter,f,c
  4717  011B6C  D7EE               	goto	i1l2399
  4718  011B6E                     i1l2411:
  4719  011B6E  500C               	movf	___awdiv@sign,w,c
  4720  011B70  E004               	bz	i1l2415
  4721  011B72  6C0D               	negf	___awdiv@quotient,c
  4722  011B74  1E0E               	comf	___awdiv@quotient+1,f,c
  4723  011B76  B0D8               	btfsc	status,0,c
  4724  011B78  2A0E               	incf	___awdiv@quotient+1,f,c
  4725  011B7A                     i1l2415:
  4726  011B7A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4727  011B7E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4728  011B82  0012               	return	
  4729  011B84                     __end_of___awdiv:
  4730                           	opt stack 0
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           indf0	equ	0xFEF
  4739                           postinc0	equ	0xFEE
  4740                           fsr0h	equ	0xFEA
  4741                           fsr0l	equ	0xFE9
  4742                           wreg	equ	0xFE8
  4743                           postdec1	equ	0xFE5
  4744                           fsr1l	equ	0xFE1
  4745                           bsr	equ	0xFE0
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _isdigit *****************
  4754 ;; Defined at:
  4755 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\isdigit.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  c               1    wreg     unsigned char 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  c               1    2[COMRAM] unsigned char 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;		None               void
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0
  4764 ;; Tracked objects:
  4765 ;;		On entry : F/0
  4766 ;;		On exit  : F/0
  4767 ;;		Unchanged: F/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4770 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4772 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4773 ;;Total ram usage:        3 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    2
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_sprintf
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text8
  4784  011F86                     __ptext8:
  4785                           	opt stack 0
  4786  011F86                     _isdigit:
  4787                           	opt stack 25
  4788                           
  4789                           ;incstack = 0
  4790                           ;isdigit@c stored from wreg
  4791  011F86  6E03               	movwf	isdigit@c,c
  4792                           
  4793                           ; BSR set to: 0
  4794  011F88  6A02               	clrf	_isdigit$967,c
  4795                           
  4796                           ; BSR set to: 0
  4797  011F8A  0E3A               	movlw	58
  4798  011F8C  5C03               	subwf	isdigit@c,w,c
  4799  011F8E  E205               	bc	i1l2567
  4800                           
  4801                           ; BSR set to: 0
  4802  011F90  0E2F               	movlw	47
  4803  011F92  6403               	cpfsgt	isdigit@c,c
  4804  011F94  D002               	goto	i1l2567
  4805                           
  4806                           ; BSR set to: 0
  4807  011F96  0E01               	movlw	1
  4808  011F98  6E02               	movwf	_isdigit$967,c
  4809  011F9A                     i1l2567:
  4810                           
  4811                           ; BSR set to: 0
  4812  011F9A  C002  F001         	movff	_isdigit$967,??_isdigit
  4813  011F9E  3001               	rrcf	??_isdigit,w,c
  4814                           
  4815                           ; BSR set to: 0
  4816  011FA0  0012               	return	
  4817  011FA2                     __end_of_isdigit:
  4818                           	opt stack 0
  4819                           tblptru	equ	0xFF8
  4820                           tblptrh	equ	0xFF7
  4821                           tblptrl	equ	0xFF6
  4822                           tablat	equ	0xFF5
  4823                           prodh	equ	0xFF4
  4824                           prodl	equ	0xFF3
  4825                           intcon	equ	0xFF2
  4826                           indf0	equ	0xFEF
  4827                           postinc0	equ	0xFEE
  4828                           fsr0h	equ	0xFEA
  4829                           fsr0l	equ	0xFE9
  4830                           wreg	equ	0xFE8
  4831                           postdec1	equ	0xFE5
  4832                           fsr1l	equ	0xFE1
  4833                           bsr	equ	0xFE0
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841 ;; *************** function _fround *****************
  4842 ;; Defined at:
  4843 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4844 ;; Parameters:    Size  Location     Type
  4845 ;;  prec            1    wreg     unsigned char 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  prec            1   49[COMRAM] unsigned char 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  4   33[COMRAM] unsigned char 
  4850 ;; Registers used:
  4851 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4852 ;; Tracked objects:
  4853 ;;		On entry : F/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4857 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4858 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4859 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4860 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4861 ;;Total ram usage:       17 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; Hardware stack levels required when called:    4
  4864 ;; This function calls:
  4865 ;;		___flmul
  4866 ;;		___lbdiv
  4867 ;;		___lbmod
  4868 ;; This function is called by:
  4869 ;;		_sprintf
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text9
  4874  010C38                     __ptext9:
  4875                           	opt stack 0
  4876  010C38                     _fround:
  4877                           	opt stack 23
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;incstack = 0
  4881                           ;fround@prec stored from wreg
  4882  010C38  6E32               	movwf	fround@prec,c
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;doprnt.c: 413: if(prec>=110)
  4886  010C3A  0E6D               	movlw	109
  4887  010C3C  6432               	cpfsgt	fround@prec,c
  4888  010C3E  D09E               	goto	i1l2509
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4892  010C40  0E0A               	movlw	10
  4893  010C42  6E05               	movwf	___lbdiv@divisor,c
  4894  010C44  0E64               	movlw	100
  4895  010C46  6E01               	movwf	___lbmod@divisor,c
  4896  010C48  5032               	movf	fround@prec,w,c
  4897  010C4A  EC8B  F08F         	call	___lbmod
  4898  010C4E  EC2C  F08F         	call	___lbdiv
  4899  010C52  6E26               	movwf	??_fround& (0+255),c
  4900  010C54  6A27               	clrf	(??_fround+1)& (0+255),c
  4901  010C56  90D8               	bcf	status,0,c
  4902  010C58  3626               	rlcf	??_fround,f,c
  4903  010C5A  3627               	rlcf	??_fround+1,f,c
  4904  010C5C  90D8               	bcf	status,0,c
  4905  010C5E  3626               	rlcf	??_fround,f,c
  4906  010C60  3627               	rlcf	??_fround+1,f,c
  4907  010C62  0E24               	movlw	36
  4908  010C64  2626               	addwf	??_fround,f,c
  4909  010C66  0E00               	movlw	0
  4910  010C68  2227               	addwfc	??_fround+1,f,c
  4911  010C6A  0ECB               	movlw	low __npowers_
  4912  010C6C  2426               	addwf	??_fround,w,c
  4913  010C6E  6EF6               	movwf	tblptrl,c
  4914  010C70  0EFE               	movlw	high __npowers_
  4915  010C72  2027               	addwfc	??_fround+1,w,c
  4916  010C74  6EF7               	movwf	tblptrh,c
  4917  010C76                     	if	1	;There are 3 active tblptr bytes
  4918  010C76  6AF8               	clrf	tblptru,c
  4919  010C78  0E00               	movlw	low (__mediumconst shr (0+16))
  4920  010C7A  22F8               	addwfc	tblptru,f,c
  4921  010C7C                     	endif
  4922  010C7C  0009               	tblrd		*+
  4923  010C7E  CFF5 F013          	movff	tablat,___flmul@f2
  4924  010C82  0009               	tblrd		*+
  4925  010C84  CFF5 F014          	movff	tablat,___flmul@f2+1
  4926  010C88  0009               	tblrd		*+
  4927  010C8A  CFF5 F015          	movff	tablat,___flmul@f2+2
  4928  010C8E  000A               	tblrd		*-
  4929  010C90  CFF5 F016          	movff	tablat,___flmul@f2+3
  4930  010C94  0E64               	movlw	100
  4931  010C96  6E05               	movwf	___lbdiv@divisor,c
  4932  010C98  5032               	movf	fround@prec,w,c
  4933  010C9A  EC2C  F08F         	call	___lbdiv
  4934  010C9E  6E28               	movwf	(??_fround+2)& (0+255),c
  4935  010CA0  6A29               	clrf	(??_fround+3)& (0+255),c
  4936  010CA2  90D8               	bcf	status,0,c
  4937  010CA4  3628               	rlcf	??_fround+2,f,c
  4938  010CA6  3629               	rlcf	??_fround+3,f,c
  4939  010CA8  90D8               	bcf	status,0,c
  4940  010CAA  3628               	rlcf	??_fround+2,f,c
  4941  010CAC  3629               	rlcf	??_fround+3,f,c
  4942  010CAE  0E48               	movlw	72
  4943  010CB0  2628               	addwf	??_fround+2,f,c
  4944  010CB2  0E00               	movlw	0
  4945  010CB4  2229               	addwfc	??_fround+3,f,c
  4946  010CB6  0ECB               	movlw	low __npowers_
  4947  010CB8  2428               	addwf	??_fround+2,w,c
  4948  010CBA  6EF6               	movwf	tblptrl,c
  4949  010CBC  0EFE               	movlw	high __npowers_
  4950  010CBE  2029               	addwfc	??_fround+3,w,c
  4951  010CC0  6EF7               	movwf	tblptrh,c
  4952  010CC2                     	if	1	;There are 3 active tblptr bytes
  4953  010CC2  6AF8               	clrf	tblptru,c
  4954  010CC4  0E00               	movlw	low (__mediumconst shr (0+16))
  4955  010CC6  22F8               	addwfc	tblptru,f,c
  4956  010CC8                     	endif
  4957  010CC8  0009               	tblrd		*+
  4958  010CCA  CFF5 F00F          	movff	tablat,___flmul@f1
  4959  010CCE  0009               	tblrd		*+
  4960  010CD0  CFF5 F010          	movff	tablat,___flmul@f1+1
  4961  010CD4  0009               	tblrd		*+
  4962  010CD6  CFF5 F011          	movff	tablat,___flmul@f1+2
  4963  010CDA  000A               	tblrd		*-
  4964  010CDC  CFF5 F012          	movff	tablat,___flmul@f1+3
  4965  010CE0  EC44  F08A         	call	___flmul	;wreg free
  4966  010CE4  C00F  F02E         	movff	?___flmul,_fround$1212
  4967  010CE8  C010  F02F         	movff	?___flmul+1,_fround$1212+1
  4968  010CEC  C011  F030         	movff	?___flmul+2,_fround$1212+2
  4969  010CF0  C012  F031         	movff	?___flmul+3,_fround$1212+3
  4970                           
  4971                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4972  010CF4  0E0A               	movlw	10
  4973  010CF6  6E01               	movwf	___lbmod@divisor,c
  4974  010CF8  5032               	movf	fround@prec,w,c
  4975  010CFA  EC8B  F08F         	call	___lbmod
  4976  010CFE  6E26               	movwf	??_fround& (0+255),c
  4977  010D00  6A27               	clrf	(??_fround+1)& (0+255),c
  4978  010D02  90D8               	bcf	status,0,c
  4979  010D04  3626               	rlcf	??_fround,f,c
  4980  010D06  3627               	rlcf	??_fround+1,f,c
  4981  010D08  90D8               	bcf	status,0,c
  4982  010D0A  3626               	rlcf	??_fround,f,c
  4983  010D0C  3627               	rlcf	??_fround+1,f,c
  4984  010D0E  0ECB               	movlw	low __npowers_
  4985  010D10  2426               	addwf	??_fround,w,c
  4986  010D12  6EF6               	movwf	tblptrl,c
  4987  010D14  0EFE               	movlw	high __npowers_
  4988  010D16  2027               	addwfc	??_fround+1,w,c
  4989  010D18  6EF7               	movwf	tblptrh,c
  4990  010D1A                     	if	1	;There are 3 active tblptr bytes
  4991  010D1A  6AF8               	clrf	tblptru,c
  4992  010D1C  0E00               	movlw	low (__mediumconst shr (0+16))
  4993  010D1E  22F8               	addwfc	tblptru,f,c
  4994  010D20                     	endif
  4995  010D20  0009               	tblrd		*+
  4996  010D22  CFF5 F013          	movff	tablat,___flmul@f2
  4997  010D26  0009               	tblrd		*+
  4998  010D28  CFF5 F014          	movff	tablat,___flmul@f2+1
  4999  010D2C  0009               	tblrd		*+
  5000  010D2E  CFF5 F015          	movff	tablat,___flmul@f2+2
  5001  010D32  000A               	tblrd		*-
  5002  010D34  CFF5 F016          	movff	tablat,___flmul@f2+3
  5003  010D38  C02E  F00F         	movff	_fround$1212,___flmul@f1
  5004  010D3C  C02F  F010         	movff	_fround$1212+1,___flmul@f1+1
  5005  010D40  C030  F011         	movff	_fround$1212+2,___flmul@f1+2
  5006  010D44  C031  F012         	movff	_fround$1212+3,___flmul@f1+3
  5007  010D48  EC44  F08A         	call	___flmul	;wreg free
  5008  010D4C  C00F  F02A         	movff	?___flmul,_fround$1213
  5009  010D50  C010  F02B         	movff	?___flmul+1,_fround$1213+1
  5010  010D54  C011  F02C         	movff	?___flmul+2,_fround$1213+2
  5011  010D58  C012  F02D         	movff	?___flmul+3,_fround$1213+3
  5012                           
  5013                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5014  010D5C  C02A  F00F         	movff	_fround$1213,___flmul@f1
  5015  010D60  C02B  F010         	movff	_fround$1213+1,___flmul@f1+1
  5016  010D64  C02C  F011         	movff	_fround$1213+2,___flmul@f1+2
  5017  010D68  C02D  F012         	movff	_fround$1213+3,___flmul@f1+3
  5018  010D6C  6A13               	clrf	___flmul@f2,c
  5019  010D6E  6A14               	clrf	___flmul@f2+1,c
  5020  010D70  6A15               	clrf	___flmul@f2+2,c
  5021  010D72  0E3F               	movlw	63
  5022  010D74  6E16               	movwf	___flmul@f2+3,c
  5023  010D76  EC44  F08A         	call	___flmul	;wreg free
  5024  010D7A  D082               	goto	L12
  5025  010D7C                     i1l2509:
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;doprnt.c: 415: else if(prec > 10)
  5029  010D7C  0E0A               	movlw	10
  5030  010D7E  6432               	cpfsgt	fround@prec,c
  5031  010D80  D061               	goto	i1l2517
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5035  010D82  6E01               	movwf	___lbmod@divisor,c
  5036  010D84  5032               	movf	fround@prec,w,c
  5037  010D86  EC8B  F08F         	call	___lbmod
  5038  010D8A  6E26               	movwf	??_fround& (0+255),c
  5039  010D8C  6A27               	clrf	(??_fround+1)& (0+255),c
  5040  010D8E  90D8               	bcf	status,0,c
  5041  010D90  3626               	rlcf	??_fround,f,c
  5042  010D92  3627               	rlcf	??_fround+1,f,c
  5043  010D94  90D8               	bcf	status,0,c
  5044  010D96  3626               	rlcf	??_fround,f,c
  5045  010D98  3627               	rlcf	??_fround+1,f,c
  5046  010D9A  0ECB               	movlw	low __npowers_
  5047  010D9C  2426               	addwf	??_fround,w,c
  5048  010D9E  6EF6               	movwf	tblptrl,c
  5049  010DA0  0EFE               	movlw	high __npowers_
  5050  010DA2  2027               	addwfc	??_fround+1,w,c
  5051  010DA4  6EF7               	movwf	tblptrh,c
  5052  010DA6                     	if	1	;There are 3 active tblptr bytes
  5053  010DA6  6AF8               	clrf	tblptru,c
  5054  010DA8  0E00               	movlw	low (__mediumconst shr (0+16))
  5055  010DAA  22F8               	addwfc	tblptru,f,c
  5056  010DAC                     	endif
  5057  010DAC  0009               	tblrd		*+
  5058  010DAE  CFF5 F013          	movff	tablat,___flmul@f2
  5059  010DB2  0009               	tblrd		*+
  5060  010DB4  CFF5 F014          	movff	tablat,___flmul@f2+1
  5061  010DB8  0009               	tblrd		*+
  5062  010DBA  CFF5 F015          	movff	tablat,___flmul@f2+2
  5063  010DBE  000A               	tblrd		*-
  5064  010DC0  CFF5 F016          	movff	tablat,___flmul@f2+3
  5065  010DC4  0E0A               	movlw	10
  5066  010DC6  6E05               	movwf	___lbdiv@divisor,c
  5067  010DC8  5032               	movf	fround@prec,w,c
  5068  010DCA  EC2C  F08F         	call	___lbdiv
  5069  010DCE  6E28               	movwf	(??_fround+2)& (0+255),c
  5070  010DD0  6A29               	clrf	(??_fround+3)& (0+255),c
  5071  010DD2  90D8               	bcf	status,0,c
  5072  010DD4  3628               	rlcf	??_fround+2,f,c
  5073  010DD6  3629               	rlcf	??_fround+3,f,c
  5074  010DD8  90D8               	bcf	status,0,c
  5075  010DDA  3628               	rlcf	??_fround+2,f,c
  5076  010DDC  3629               	rlcf	??_fround+3,f,c
  5077  010DDE  0E24               	movlw	36
  5078  010DE0  2628               	addwf	??_fround+2,f,c
  5079  010DE2  0E00               	movlw	0
  5080  010DE4  2229               	addwfc	??_fround+3,f,c
  5081  010DE6  0ECB               	movlw	low __npowers_
  5082  010DE8  2428               	addwf	??_fround+2,w,c
  5083  010DEA  6EF6               	movwf	tblptrl,c
  5084  010DEC  0EFE               	movlw	high __npowers_
  5085  010DEE  2029               	addwfc	??_fround+3,w,c
  5086  010DF0  6EF7               	movwf	tblptrh,c
  5087  010DF2                     	if	1	;There are 3 active tblptr bytes
  5088  010DF2  6AF8               	clrf	tblptru,c
  5089  010DF4  0E00               	movlw	low (__mediumconst shr (0+16))
  5090  010DF6  22F8               	addwfc	tblptru,f,c
  5091  010DF8                     	endif
  5092  010DF8  0009               	tblrd		*+
  5093  010DFA  CFF5 F00F          	movff	tablat,___flmul@f1
  5094  010DFE  0009               	tblrd		*+
  5095  010E00  CFF5 F010          	movff	tablat,___flmul@f1+1
  5096  010E04  0009               	tblrd		*+
  5097  010E06  CFF5 F011          	movff	tablat,___flmul@f1+2
  5098  010E0A  000A               	tblrd		*-
  5099  010E0C  CFF5 F012          	movff	tablat,___flmul@f1+3
  5100  010E10  EC44  F08A         	call	___flmul	;wreg free
  5101  010E14  C00F  F02E         	movff	?___flmul,_fround$1212
  5102  010E18  C010  F02F         	movff	?___flmul+1,_fround$1212+1
  5103  010E1C  C011  F030         	movff	?___flmul+2,_fround$1212+2
  5104  010E20  C012  F031         	movff	?___flmul+3,_fround$1212+3
  5105                           
  5106                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5107  010E24  C02E  F00F         	movff	_fround$1212,___flmul@f1
  5108  010E28  C02F  F010         	movff	_fround$1212+1,___flmul@f1+1
  5109  010E2C  C030  F011         	movff	_fround$1212+2,___flmul@f1+2
  5110  010E30  C031  F012         	movff	_fround$1212+3,___flmul@f1+3
  5111  010E34  6A13               	clrf	___flmul@f2,c
  5112  010E36  6A14               	clrf	___flmul@f2+1,c
  5113  010E38  6A15               	clrf	___flmul@f2+2,c
  5114  010E3A  0E3F               	movlw	63
  5115  010E3C  6E16               	movwf	___flmul@f2+3,c
  5116  010E3E  EC44  F08A         	call	___flmul	;wreg free
  5117  010E42  D01E               	goto	L12
  5118  010E44                     i1l2517:
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5122  010E44  5032               	movf	fround@prec,w,c
  5123  010E46  0D04               	mullw	4
  5124  010E48  0ECB               	movlw	low __npowers_
  5125  010E4A  24F3               	addwf	prodl,w,c
  5126  010E4C  6EF6               	movwf	tblptrl,c
  5127  010E4E  0EFE               	movlw	high __npowers_
  5128  010E50  20F4               	addwfc	prodh,w,c
  5129  010E52  6EF7               	movwf	tblptrh,c
  5130  010E54                     	if	1	;There are 3 active tblptr bytes
  5131  010E54  6AF8               	clrf	tblptru,c
  5132  010E56  0E00               	movlw	low (__mediumconst shr (0+16))
  5133  010E58  22F8               	addwfc	tblptru,f,c
  5134  010E5A                     	endif
  5135  010E5A  0009               	tblrd		*+
  5136  010E5C  CFF5 F00F          	movff	tablat,___flmul@f1
  5137  010E60  0009               	tblrd		*+
  5138  010E62  CFF5 F010          	movff	tablat,___flmul@f1+1
  5139  010E66  0009               	tblrd		*+
  5140  010E68  CFF5 F011          	movff	tablat,___flmul@f1+2
  5141  010E6C  000A               	tblrd		*-
  5142  010E6E  CFF5 F012          	movff	tablat,___flmul@f1+3
  5143  010E72  6A13               	clrf	___flmul@f2,c
  5144  010E74  6A14               	clrf	___flmul@f2+1,c
  5145  010E76  6A15               	clrf	___flmul@f2+2,c
  5146  010E78  0E3F               	movlw	63
  5147  010E7A  6E16               	movwf	___flmul@f2+3,c
  5148  010E7C  EC44  F08A         	call	___flmul	;wreg free
  5149  010E80                     L12:
  5150  010E80  C00F  F022         	movff	?___flmul,?_fround
  5151  010E84  C010  F023         	movff	?___flmul+1,?_fround+1
  5152  010E88  C011  F024         	movff	?___flmul+2,?_fround+2
  5153  010E8C  C012  F025         	movff	?___flmul+3,?_fround+3
  5154  010E90  0012               	return	
  5155  010E92                     __end_of_fround:
  5156                           	opt stack 0
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           prodh	equ	0xFF4
  5162                           prodl	equ	0xFF3
  5163                           intcon	equ	0xFF2
  5164                           indf0	equ	0xFEF
  5165                           postinc0	equ	0xFEE
  5166                           fsr0h	equ	0xFEA
  5167                           fsr0l	equ	0xFE9
  5168                           wreg	equ	0xFE8
  5169                           postdec1	equ	0xFE5
  5170                           fsr1l	equ	0xFE1
  5171                           bsr	equ	0xFE0
  5172                           indf2	equ	0xFDF
  5173                           postinc2	equ	0xFDE
  5174                           postdec2	equ	0xFDD
  5175                           fsr2h	equ	0xFDA
  5176                           fsr2l	equ	0xFD9
  5177                           status	equ	0xFD8
  5178                           
  5179 ;; *************** function ___lbmod *****************
  5180 ;; Defined at:
  5181 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbmod.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  dividend        1    wreg     unsigned char 
  5184 ;;  divisor         1    0[COMRAM] unsigned char 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;  dividend        1    1[COMRAM] unsigned char 
  5187 ;;  rem             1    3[COMRAM] unsigned char 
  5188 ;;  counter         1    2[COMRAM] unsigned char 
  5189 ;; Return value:  Size  Location     Type
  5190 ;;                  1    wreg      unsigned char 
  5191 ;; Registers used:
  5192 ;;		wreg, status,2, status,0
  5193 ;; Tracked objects:
  5194 ;;		On entry : 0/0
  5195 ;;		On exit  : 0/0
  5196 ;;		Unchanged: 0/0
  5197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5198 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5199 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5201 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5202 ;;Total ram usage:        4 bytes
  5203 ;; Hardware stack levels used:    1
  5204 ;; Hardware stack levels required when called:    2
  5205 ;; This function calls:
  5206 ;;		Nothing
  5207 ;; This function is called by:
  5208 ;;		_fround
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text10
  5213  011F16                     __ptext10:
  5214                           	opt stack 0
  5215  011F16                     ___lbmod:
  5216                           	opt stack 24
  5217                           
  5218                           ;incstack = 0
  5219                           ;___lbmod@dividend stored from wreg
  5220  011F16  6E02               	movwf	___lbmod@dividend,c
  5221  011F18  0E08               	movlw	8
  5222  011F1A  6E03               	movwf	___lbmod@counter,c
  5223  011F1C  6A04               	clrf	___lbmod@rem,c
  5224  011F1E                     i1l2485:
  5225  011F1E  90D8               	bcf	status,0,c
  5226  011F20  3402               	rlcf	___lbmod@dividend,w,c
  5227  011F22  3404               	rlcf	___lbmod@rem,w,c
  5228  011F24  6E04               	movwf	___lbmod@rem,c
  5229  011F26  90D8               	bcf	status,0,c
  5230  011F28  3602               	rlcf	___lbmod@dividend,f,c
  5231  011F2A  5001               	movf	___lbmod@divisor,w,c
  5232  011F2C  5C04               	subwf	___lbmod@rem,w,c
  5233  011F2E  E302               	bnc	i1l2493
  5234  011F30  5001               	movf	___lbmod@divisor,w,c
  5235  011F32  5E04               	subwf	___lbmod@rem,f,c
  5236  011F34                     i1l2493:
  5237  011F34  2E03               	decfsz	___lbmod@counter,f,c
  5238  011F36  D7F3               	goto	i1l2485
  5239  011F38  5004               	movf	___lbmod@rem,w,c
  5240  011F3A  0012               	return	
  5241  011F3C                     __end_of___lbmod:
  5242                           	opt stack 0
  5243                           tblptru	equ	0xFF8
  5244                           tblptrh	equ	0xFF7
  5245                           tblptrl	equ	0xFF6
  5246                           tablat	equ	0xFF5
  5247                           prodh	equ	0xFF4
  5248                           prodl	equ	0xFF3
  5249                           intcon	equ	0xFF2
  5250                           indf0	equ	0xFEF
  5251                           postinc0	equ	0xFEE
  5252                           fsr0h	equ	0xFEA
  5253                           fsr0l	equ	0xFE9
  5254                           wreg	equ	0xFE8
  5255                           postdec1	equ	0xFE5
  5256                           fsr1l	equ	0xFE1
  5257                           bsr	equ	0xFE0
  5258                           indf2	equ	0xFDF
  5259                           postinc2	equ	0xFDE
  5260                           postdec2	equ	0xFDD
  5261                           fsr2h	equ	0xFDA
  5262                           fsr2l	equ	0xFD9
  5263                           status	equ	0xFD8
  5264                           
  5265 ;; *************** function ___lbdiv *****************
  5266 ;; Defined at:
  5267 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lbdiv.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  dividend        1    wreg     unsigned char 
  5270 ;;  divisor         1    4[COMRAM] unsigned char 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  dividend        1    5[COMRAM] unsigned char 
  5273 ;;  quotient        1    7[COMRAM] unsigned char 
  5274 ;;  counter         1    6[COMRAM] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  1    wreg      unsigned char 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2, status,0
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5284 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5285 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5287 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5288 ;;Total ram usage:        4 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    2
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_fround
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text11
  5299  011E58                     __ptext11:
  5300                           	opt stack 0
  5301  011E58                     ___lbdiv:
  5302                           	opt stack 24
  5303                           
  5304                           ;incstack = 0
  5305                           ;___lbdiv@dividend stored from wreg
  5306  011E58  6E06               	movwf	___lbdiv@dividend,c
  5307  011E5A  6A08               	clrf	___lbdiv@quotient,c
  5308  011E5C  5005               	movf	___lbdiv@divisor,w,c
  5309  011E5E  E014               	bz	i1l2477
  5310  011E60  0E01               	movlw	1
  5311  011E62  6E07               	movwf	___lbdiv@counter,c
  5312  011E64  D003               	goto	i1l2465
  5313  011E66                     i1l2461:
  5314  011E66  90D8               	bcf	status,0,c
  5315  011E68  3605               	rlcf	___lbdiv@divisor,f,c
  5316  011E6A  2A07               	incf	___lbdiv@counter,f,c
  5317  011E6C                     i1l2465:
  5318  011E6C  AE05               	btfss	___lbdiv@divisor,7,c
  5319  011E6E  D7FB               	goto	i1l2461
  5320  011E70                     i1l2467:
  5321  011E70  90D8               	bcf	status,0,c
  5322  011E72  3608               	rlcf	___lbdiv@quotient,f,c
  5323  011E74  5005               	movf	___lbdiv@divisor,w,c
  5324  011E76  5C06               	subwf	___lbdiv@dividend,w,c
  5325  011E78  E303               	bnc	i1l2473
  5326  011E7A  5005               	movf	___lbdiv@divisor,w,c
  5327  011E7C  5E06               	subwf	___lbdiv@dividend,f,c
  5328  011E7E  8008               	bsf	___lbdiv@quotient,0,c
  5329  011E80                     i1l2473:
  5330  011E80  90D8               	bcf	status,0,c
  5331  011E82  3205               	rrcf	___lbdiv@divisor,f,c
  5332  011E84  2E07               	decfsz	___lbdiv@counter,f,c
  5333  011E86  D7F4               	goto	i1l2467
  5334  011E88                     i1l2477:
  5335  011E88  5008               	movf	___lbdiv@quotient,w,c
  5336  011E8A  0012               	return	
  5337  011E8C                     __end_of___lbdiv:
  5338                           	opt stack 0
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           indf0	equ	0xFEF
  5347                           postinc0	equ	0xFEE
  5348                           fsr0h	equ	0xFEA
  5349                           fsr0l	equ	0xFE9
  5350                           wreg	equ	0xFE8
  5351                           postdec1	equ	0xFE5
  5352                           fsr1l	equ	0xFE1
  5353                           bsr	equ	0xFE0
  5354                           indf2	equ	0xFDF
  5355                           postinc2	equ	0xFDE
  5356                           postdec2	equ	0xFDD
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function ___flmul *****************
  5362 ;; Defined at:
  5363 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\flmul.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  f1              4   14[COMRAM] unsigned char 
  5366 ;;  f2              4   18[COMRAM] unsigned char 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  f3_as_produc    4   27[COMRAM] unsigned long 
  5369 ;;  sign            1   32[COMRAM] unsigned char 
  5370 ;;  cntr            1   31[COMRAM] unsigned char 
  5371 ;;  exp             1   26[COMRAM] unsigned char 
  5372 ;; Return value:  Size  Location     Type
  5373 ;;                  4   14[COMRAM] unsigned char 
  5374 ;; Registers used:
  5375 ;;		wreg, status,2, status,0, cstack
  5376 ;; Tracked objects:
  5377 ;;		On entry : 0/0
  5378 ;;		On exit  : 0/0
  5379 ;;		Unchanged: 0/0
  5380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5381 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5382 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5383 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5384 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5385 ;;Total ram usage:       19 bytes
  5386 ;; Hardware stack levels used:    1
  5387 ;; Hardware stack levels required when called:    3
  5388 ;; This function calls:
  5389 ;;		___flpack
  5390 ;; This function is called by:
  5391 ;;		_LISR
  5392 ;;		_fround
  5393 ;;		_scale
  5394 ;;		_sprintf
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           	psect	text12
  5399  011488                     __ptext12:
  5400                           	opt stack 0
  5401  011488                     ___flmul:
  5402                           	opt stack 23
  5403                           
  5404                           ;incstack = 0
  5405  011488  C00F  F017         	movff	___flmul@f1,??___flmul
  5406  01148C  C010  F018         	movff	___flmul@f1+1,??___flmul+1
  5407  011490  C011  F019         	movff	___flmul@f1+2,??___flmul+2
  5408  011494  C012  F01A         	movff	___flmul@f1+3,??___flmul+3
  5409  011498  0E18               	movlw	24
  5410  01149A  D005               	goto	i1u218_20
  5411  01149C                     i1u218_25:
  5412  01149C  90D8               	bcf	status,0,c
  5413  01149E  321A               	rrcf	??___flmul+3,f,c
  5414  0114A0  3219               	rrcf	??___flmul+2,f,c
  5415  0114A2  3218               	rrcf	??___flmul+1,f,c
  5416  0114A4  3217               	rrcf	??___flmul,f,c
  5417  0114A6                     i1u218_20:
  5418  0114A6  2EE8               	decfsz	wreg,f,c
  5419  0114A8  D7F9               	goto	i1u218_25
  5420  0114AA  5017               	movf	??___flmul,w,c
  5421  0114AC  6E1B               	movwf	___flmul@exp,c
  5422  0114AE  661B               	tstfsz	___flmul@exp& (0+255),c
  5423  0114B0  D001               	goto	i1l2333
  5424  0114B2  D015               	goto	i1u221_20
  5425  0114B4                     i1l2333:
  5426  0114B4  C013  F017         	movff	___flmul@f2,??___flmul
  5427  0114B8  C014  F018         	movff	___flmul@f2+1,??___flmul+1
  5428  0114BC  C015  F019         	movff	___flmul@f2+2,??___flmul+2
  5429  0114C0  C016  F01A         	movff	___flmul@f2+3,??___flmul+3
  5430  0114C4  0E18               	movlw	24
  5431  0114C6  D005               	goto	i1u220_20
  5432  0114C8                     i1u220_25:
  5433  0114C8  90D8               	bcf	status,0,c
  5434  0114CA  321A               	rrcf	??___flmul+3,f,c
  5435  0114CC  3219               	rrcf	??___flmul+2,f,c
  5436  0114CE  3218               	rrcf	??___flmul+1,f,c
  5437  0114D0  3217               	rrcf	??___flmul,f,c
  5438  0114D2                     i1u220_20:
  5439  0114D2  2EE8               	decfsz	wreg,f,c
  5440  0114D4  D7F9               	goto	i1u220_25
  5441  0114D6  5017               	movf	??___flmul,w,c
  5442  0114D8  6E21               	movwf	___flmul@sign,c
  5443  0114DA  6621               	tstfsz	___flmul@sign& (0+255),c
  5444  0114DC  D005               	goto	i1l2337
  5445  0114DE                     i1u221_20:
  5446  0114DE  6A0F               	clrf	?___flmul,c
  5447  0114E0  6A10               	clrf	?___flmul+1,c
  5448  0114E2  6A11               	clrf	?___flmul+2,c
  5449  0114E4  6A12               	clrf	?___flmul+3,c
  5450  0114E6  D057               	goto	i1l705
  5451  0114E8                     i1l2337:
  5452  0114E8  5021               	movf	___flmul@sign,w,c
  5453  0114EA  0F7B               	addlw	123
  5454  0114EC  261B               	addwf	___flmul@exp,f,c
  5455  0114EE  C012  F021         	movff	___flmul@f1+3,___flmul@sign
  5456  0114F2  5016               	movf	___flmul@f2+3,w,c
  5457  0114F4  1A21               	xorwf	___flmul@sign,f,c
  5458  0114F6  0E80               	movlw	128
  5459  0114F8  1621               	andwf	___flmul@sign,f,c
  5460  0114FA  8E11               	bsf	___flmul@f1+2,7,c
  5461  0114FC  8E15               	bsf	___flmul@f2+2,7,c
  5462  0114FE  0E00               	movlw	0
  5463  011500  1616               	andwf	___flmul@f2+3,f,c
  5464  011502  6A1C               	clrf	___flmul@f3_as_product,c
  5465  011504  6A1D               	clrf	___flmul@f3_as_product+1,c
  5466  011506  6A1E               	clrf	___flmul@f3_as_product+2,c
  5467  011508  6A1F               	clrf	___flmul@f3_as_product+3,c
  5468  01150A  0E07               	movlw	7
  5469  01150C  6E20               	movwf	___flmul@cntr,c
  5470  01150E                     i1l2349:
  5471  01150E  A00F               	btfss	___flmul@f1,0,c
  5472  011510  D008               	goto	i1l2353
  5473  011512  5013               	movf	___flmul@f2,w,c
  5474  011514  261C               	addwf	___flmul@f3_as_product,f,c
  5475  011516  5014               	movf	___flmul@f2+1,w,c
  5476  011518  221D               	addwfc	___flmul@f3_as_product+1,f,c
  5477  01151A  5015               	movf	___flmul@f2+2,w,c
  5478  01151C  221E               	addwfc	___flmul@f3_as_product+2,f,c
  5479  01151E  5016               	movf	___flmul@f2+3,w,c
  5480  011520  221F               	addwfc	___flmul@f3_as_product+3,f,c
  5481  011522                     i1l2353:
  5482  011522  90D8               	bcf	status,0,c
  5483  011524  3212               	rrcf	___flmul@f1+3,f,c
  5484  011526  3211               	rrcf	___flmul@f1+2,f,c
  5485  011528  3210               	rrcf	___flmul@f1+1,f,c
  5486  01152A  320F               	rrcf	___flmul@f1,f,c
  5487  01152C  90D8               	bcf	status,0,c
  5488  01152E  3613               	rlcf	___flmul@f2,f,c
  5489  011530  3614               	rlcf	___flmul@f2+1,f,c
  5490  011532  3615               	rlcf	___flmul@f2+2,f,c
  5491  011534  3616               	rlcf	___flmul@f2+3,f,c
  5492  011536  2E20               	decfsz	___flmul@cntr,f,c
  5493  011538  D7EA               	goto	i1l2349
  5494  01153A  0E11               	movlw	17
  5495  01153C  6E20               	movwf	___flmul@cntr,c
  5496  01153E                     i1l2361:
  5497  01153E  A00F               	btfss	___flmul@f1,0,c
  5498  011540  D008               	goto	i1l2365
  5499  011542  5013               	movf	___flmul@f2,w,c
  5500  011544  261C               	addwf	___flmul@f3_as_product,f,c
  5501  011546  5014               	movf	___flmul@f2+1,w,c
  5502  011548  221D               	addwfc	___flmul@f3_as_product+1,f,c
  5503  01154A  5015               	movf	___flmul@f2+2,w,c
  5504  01154C  221E               	addwfc	___flmul@f3_as_product+2,f,c
  5505  01154E  5016               	movf	___flmul@f2+3,w,c
  5506  011550  221F               	addwfc	___flmul@f3_as_product+3,f,c
  5507  011552                     i1l2365:
  5508  011552  90D8               	bcf	status,0,c
  5509  011554  3212               	rrcf	___flmul@f1+3,f,c
  5510  011556  3211               	rrcf	___flmul@f1+2,f,c
  5511  011558  3210               	rrcf	___flmul@f1+1,f,c
  5512  01155A  320F               	rrcf	___flmul@f1,f,c
  5513  01155C  90D8               	bcf	status,0,c
  5514  01155E  321F               	rrcf	___flmul@f3_as_product+3,f,c
  5515  011560  321E               	rrcf	___flmul@f3_as_product+2,f,c
  5516  011562  321D               	rrcf	___flmul@f3_as_product+1,f,c
  5517  011564  321C               	rrcf	___flmul@f3_as_product,f,c
  5518  011566  2E20               	decfsz	___flmul@cntr,f,c
  5519  011568  D7EA               	goto	i1l2361
  5520  01156A  C01C  F001         	movff	___flmul@f3_as_product,___flpack@arg
  5521  01156E  C01D  F002         	movff	___flmul@f3_as_product+1,___flpack@arg+1
  5522  011572  C01E  F003         	movff	___flmul@f3_as_product+2,___flpack@arg+2
  5523  011576  C01F  F004         	movff	___flmul@f3_as_product+3,___flpack@arg+3
  5524  01157A  C01B  F005         	movff	___flmul@exp,___flpack@exp
  5525  01157E  C021  F006         	movff	___flmul@sign,___flpack@sign
  5526  011582  EC18  F08D         	call	___flpack	;wreg free
  5527  011586  C001  F00F         	movff	?___flpack,?___flmul
  5528  01158A  C002  F010         	movff	?___flpack+1,?___flmul+1
  5529  01158E  C003  F011         	movff	?___flpack+2,?___flmul+2
  5530  011592  C004  F012         	movff	?___flpack+3,?___flmul+3
  5531  011596                     i1l705:
  5532  011596  0012               	return	
  5533  011598                     __end_of___flmul:
  5534                           	opt stack 0
  5535                           tblptru	equ	0xFF8
  5536                           tblptrh	equ	0xFF7
  5537                           tblptrl	equ	0xFF6
  5538                           tablat	equ	0xFF5
  5539                           prodh	equ	0xFF4
  5540                           prodl	equ	0xFF3
  5541                           intcon	equ	0xFF2
  5542                           indf0	equ	0xFEF
  5543                           postinc0	equ	0xFEE
  5544                           fsr0h	equ	0xFEA
  5545                           fsr0l	equ	0xFE9
  5546                           wreg	equ	0xFE8
  5547                           postdec1	equ	0xFE5
  5548                           fsr1l	equ	0xFE1
  5549                           bsr	equ	0xFE0
  5550                           indf2	equ	0xFDF
  5551                           postinc2	equ	0xFDE
  5552                           postdec2	equ	0xFDD
  5553                           fsr2h	equ	0xFDA
  5554                           fsr2l	equ	0xFD9
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function __tdiv_to_l_ *****************
  5558 ;; Defined at:
  5559 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  f1              4    0[COMRAM] float 
  5562 ;;  f2              4    4[COMRAM] float 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  quot            4   11[COMRAM] unsigned long 
  5565 ;;  exp1            1   16[COMRAM] unsigned char 
  5566 ;;  cntr            1   15[COMRAM] unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  4    0[COMRAM] unsigned long 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/0
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5576 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5577 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5578 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5579 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5580 ;;Total ram usage:       17 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    2
  5583 ;; This function calls:
  5584 ;;		Nothing
  5585 ;; This function is called by:
  5586 ;;		_sprintf
  5587 ;; This function uses a non-reentrant model
  5588 ;;
  5589                           
  5590                           	psect	text13
  5591  011896                     __ptext13:
  5592                           	opt stack 0
  5593  011896                     __tdiv_to_l_:
  5594                           	opt stack 25
  5595                           
  5596                           ;incstack = 0
  5597  011896  C003  F009         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5598  01189A  6A0A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5599  01189C  6A0B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5600  01189E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5601  0118A0  3609               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5602  0118A2  E301               	bnc	u249_21
  5603  0118A4  800A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5604  0118A6                     u249_21:
  5605  0118A6  5009               	movf	??__tdiv_to_l_,w,c
  5606  0118A8  6E11               	movwf	__tdiv_to_l_@exp1,c
  5607  0118AA  6611               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  5608  0118AC  D005               	goto	i1l2575
  5609  0118AE                     i1l2573:
  5610  0118AE  6A01               	clrf	?__tdiv_to_l_,c
  5611  0118B0  6A02               	clrf	?__tdiv_to_l_+1,c
  5612  0118B2  6A03               	clrf	?__tdiv_to_l_+2,c
  5613  0118B4  6A04               	clrf	?__tdiv_to_l_+3,c
  5614  0118B6  D05A               	goto	i1l799
  5615  0118B8                     i1l2575:
  5616  0118B8  C007  F009         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5617  0118BC  6A0A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5618  0118BE  6A0B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5619  0118C0  3406               	rlcf	__tdiv_to_l_@f2+1,w,c
  5620  0118C2  3609               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5621  0118C4  E301               	bnc	u251_21
  5622  0118C6  800A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5623  0118C8                     u251_21:
  5624  0118C8  5009               	movf	??__tdiv_to_l_,w,c
  5625  0118CA  6E10               	movwf	__tdiv_to_l_@cntr,c
  5626  0118CC  6610               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  5627  0118CE  D001               	goto	i1l2579
  5628  0118D0  D7EE               	goto	i1l2573
  5629  0118D2                     i1l2579:
  5630  0118D2  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5631  0118D4  6A03               	clrf	__tdiv_to_l_@f1+2,c
  5632  0118D6  8E06               	bsf	__tdiv_to_l_@f2+1,7,c
  5633  0118D8  6A07               	clrf	__tdiv_to_l_@f2+2,c
  5634  0118DA  6A0C               	clrf	__tdiv_to_l_@quot,c
  5635  0118DC  6A0D               	clrf	__tdiv_to_l_@quot+1,c
  5636  0118DE  6A0E               	clrf	__tdiv_to_l_@quot+2,c
  5637  0118E0  6A0F               	clrf	__tdiv_to_l_@quot+3,c
  5638  0118E2  0E7F               	movlw	127
  5639  0118E4  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  5640  0118E6  5010               	movf	__tdiv_to_l_@cntr,w,c
  5641  0118E8  0F98               	addlw	152
  5642  0118EA  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  5643  0118EC  0E18               	movlw	24
  5644  0118EE  6E10               	movwf	__tdiv_to_l_@cntr,c
  5645  0118F0                     i1l2593:
  5646  0118F0  90D8               	bcf	status,0,c
  5647  0118F2  360C               	rlcf	__tdiv_to_l_@quot,f,c
  5648  0118F4  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5649  0118F6  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5650  0118F8  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5651  0118FA  5005               	movf	__tdiv_to_l_@f2,w,c
  5652  0118FC  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5653  0118FE  5006               	movf	__tdiv_to_l_@f2+1,w,c
  5654  011900  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5655  011902  5007               	movf	__tdiv_to_l_@f2+2,w,c
  5656  011904  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5657  011906  E307               	bnc	i1l802
  5658  011908  5005               	movf	__tdiv_to_l_@f2,w,c
  5659  01190A  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5660  01190C  5006               	movf	__tdiv_to_l_@f2+1,w,c
  5661  01190E  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5662  011910  5007               	movf	__tdiv_to_l_@f2+2,w,c
  5663  011912  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5664  011914  800C               	bsf	__tdiv_to_l_@quot,0,c
  5665  011916                     i1l802:
  5666  011916  90D8               	bcf	status,0,c
  5667  011918  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5668  01191A  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5669  01191C  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5670  01191E  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  5671  011920  D7E7               	goto	i1l2593
  5672  011922  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  5673  011924  D00F               	goto	i1l2611
  5674  011926  5011               	movf	__tdiv_to_l_@exp1,w,c
  5675  011928  0A80               	xorlw	128
  5676  01192A  6E09               	movwf	??__tdiv_to_l_& (0+255),c
  5677  01192C  0EE9               	movlw	233
  5678  01192E  0A80               	xorlw	128
  5679  011930  5C09               	subwf	??__tdiv_to_l_,w,c
  5680  011932  E3BD               	bnc	i1l2573
  5681  011934                     i1l2607:
  5682  011934  90D8               	bcf	status,0,c
  5683  011936  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  5684  011938  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  5685  01193A  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  5686  01193C  320C               	rrcf	__tdiv_to_l_@quot,f,c
  5687  01193E  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  5688  011940  D7F9               	goto	i1l2607
  5689  011942  D00C               	goto	i1l808
  5690  011944                     i1l2611:
  5691  011944  0E17               	movlw	23
  5692  011946  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  5693  011948  D007               	goto	i1l2617
  5694  01194A  D7B1               	goto	i1l2573
  5695  01194C                     i1l2615:
  5696  01194C  90D8               	bcf	status,0,c
  5697  01194E  360C               	rlcf	__tdiv_to_l_@quot,f,c
  5698  011950  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  5699  011952  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  5700  011954  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  5701  011956  0611               	decf	__tdiv_to_l_@exp1,f,c
  5702  011958                     i1l2617:
  5703  011958  6611               	tstfsz	__tdiv_to_l_@exp1,c
  5704  01195A  D7F8               	goto	i1l2615
  5705  01195C                     i1l808:
  5706  01195C  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5707  011960  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5708  011964  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5709  011968  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5710  01196C                     i1l799:
  5711  01196C  0012               	return	
  5712  01196E                     __end_of__tdiv_to_l_:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           intcon	equ	0xFF2
  5721                           indf0	equ	0xFEF
  5722                           postinc0	equ	0xFEE
  5723                           fsr0h	equ	0xFEA
  5724                           fsr0l	equ	0xFE9
  5725                           wreg	equ	0xFE8
  5726                           postdec1	equ	0xFE5
  5727                           fsr1l	equ	0xFE1
  5728                           bsr	equ	0xFE0
  5729                           indf2	equ	0xFDF
  5730                           postinc2	equ	0xFDE
  5731                           postdec2	equ	0xFDD
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function __div_to_l_ *****************
  5737 ;; Defined at:
  5738 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  f1              4    0[COMRAM] unsigned long 
  5741 ;;  f2              4    4[COMRAM] unsigned long 
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;  quot            4   12[COMRAM] unsigned long 
  5744 ;;  exp1            1   17[COMRAM] unsigned char 
  5745 ;;  cntr            1   16[COMRAM] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  4    0[COMRAM] unsigned long 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5755 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5756 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5757 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5758 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5759 ;;Total ram usage:       18 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    2
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_sprintf
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text14
  5770  0116A8                     __ptext14:
  5771                           	opt stack 0
  5772  0116A8                     __div_to_l_:
  5773                           	opt stack 25
  5774                           
  5775                           ;incstack = 0
  5776  0116A8  C001  F009         	movff	__div_to_l_@f1,??__div_to_l_
  5777  0116AC  C002  F00A         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  5778  0116B0  C003  F00B         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  5779  0116B4  C004  F00C         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  5780  0116B8  0E18               	movlw	24
  5781  0116BA  D005               	goto	i1u258_20
  5782  0116BC                     i1u258_25:
  5783  0116BC  90D8               	bcf	status,0,c
  5784  0116BE  320C               	rrcf	??__div_to_l_+3,f,c
  5785  0116C0  320B               	rrcf	??__div_to_l_+2,f,c
  5786  0116C2  320A               	rrcf	??__div_to_l_+1,f,c
  5787  0116C4  3209               	rrcf	??__div_to_l_,f,c
  5788  0116C6                     i1u258_20:
  5789  0116C6  2EE8               	decfsz	wreg,f,c
  5790  0116C8  D7F9               	goto	i1u258_25
  5791  0116CA  5009               	movf	??__div_to_l_,w,c
  5792  0116CC  6E12               	movwf	__div_to_l_@exp1,c
  5793  0116CE  6612               	tstfsz	__div_to_l_@exp1& (0+255),c
  5794  0116D0  D005               	goto	i1l2623
  5795  0116D2                     i1l2621:
  5796  0116D2  6A01               	clrf	?__div_to_l_,c
  5797  0116D4  6A02               	clrf	?__div_to_l_+1,c
  5798  0116D6  6A03               	clrf	?__div_to_l_+2,c
  5799  0116D8  6A04               	clrf	?__div_to_l_+3,c
  5800  0116DA  D068               	goto	i1l681
  5801  0116DC                     i1l2623:
  5802  0116DC  C005  F009         	movff	__div_to_l_@f2,??__div_to_l_
  5803  0116E0  C006  F00A         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  5804  0116E4  C007  F00B         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  5805  0116E8  C008  F00C         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  5806  0116EC  0E18               	movlw	24
  5807  0116EE  D005               	goto	i1u260_20
  5808  0116F0                     i1u260_25:
  5809  0116F0  90D8               	bcf	status,0,c
  5810  0116F2  320C               	rrcf	??__div_to_l_+3,f,c
  5811  0116F4  320B               	rrcf	??__div_to_l_+2,f,c
  5812  0116F6  320A               	rrcf	??__div_to_l_+1,f,c
  5813  0116F8  3209               	rrcf	??__div_to_l_,f,c
  5814  0116FA                     i1u260_20:
  5815  0116FA  2EE8               	decfsz	wreg,f,c
  5816  0116FC  D7F9               	goto	i1u260_25
  5817  0116FE  5009               	movf	??__div_to_l_,w,c
  5818  011700  6E11               	movwf	__div_to_l_@cntr,c
  5819  011702  6611               	tstfsz	__div_to_l_@cntr& (0+255),c
  5820  011704  D001               	goto	i1l2627
  5821  011706  D7E5               	goto	i1l2621
  5822  011708                     i1l2627:
  5823  011708  8E03               	bsf	__div_to_l_@f1+2,7,c
  5824  01170A  6A04               	clrf	__div_to_l_@f1+3,c
  5825  01170C  8E07               	bsf	__div_to_l_@f2+2,7,c
  5826  01170E  6A08               	clrf	__div_to_l_@f2+3,c
  5827  011710  6A0D               	clrf	__div_to_l_@quot,c
  5828  011712  6A0E               	clrf	__div_to_l_@quot+1,c
  5829  011714  6A0F               	clrf	__div_to_l_@quot+2,c
  5830  011716  6A10               	clrf	__div_to_l_@quot+3,c
  5831  011718  0E7F               	movlw	127
  5832  01171A  5E12               	subwf	__div_to_l_@exp1,f,c
  5833  01171C  5011               	movf	__div_to_l_@cntr,w,c
  5834  01171E  0FA0               	addlw	160
  5835  011720  5E12               	subwf	__div_to_l_@exp1,f,c
  5836  011722  0E20               	movlw	32
  5837  011724  6E11               	movwf	__div_to_l_@cntr,c
  5838  011726                     i1l2637:
  5839  011726  90D8               	bcf	status,0,c
  5840  011728  360D               	rlcf	__div_to_l_@quot,f,c
  5841  01172A  360E               	rlcf	__div_to_l_@quot+1,f,c
  5842  01172C  360F               	rlcf	__div_to_l_@quot+2,f,c
  5843  01172E  3610               	rlcf	__div_to_l_@quot+3,f,c
  5844  011730  5005               	movf	__div_to_l_@f2,w,c
  5845  011732  5C01               	subwf	__div_to_l_@f1,w,c
  5846  011734  5006               	movf	__div_to_l_@f2+1,w,c
  5847  011736  5802               	subwfb	__div_to_l_@f1+1,w,c
  5848  011738  5007               	movf	__div_to_l_@f2+2,w,c
  5849  01173A  5803               	subwfb	__div_to_l_@f1+2,w,c
  5850  01173C  5008               	movf	__div_to_l_@f2+3,w,c
  5851  01173E  5804               	subwfb	__div_to_l_@f1+3,w,c
  5852  011740  E309               	bnc	i1l2645
  5853  011742  5005               	movf	__div_to_l_@f2,w,c
  5854  011744  5E01               	subwf	__div_to_l_@f1,f,c
  5855  011746  5006               	movf	__div_to_l_@f2+1,w,c
  5856  011748  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5857  01174A  5007               	movf	__div_to_l_@f2+2,w,c
  5858  01174C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5859  01174E  5008               	movf	__div_to_l_@f2+3,w,c
  5860  011750  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5861  011752  800D               	bsf	__div_to_l_@quot,0,c
  5862  011754                     i1l2645:
  5863  011754  90D8               	bcf	status,0,c
  5864  011756  3601               	rlcf	__div_to_l_@f1,f,c
  5865  011758  3602               	rlcf	__div_to_l_@f1+1,f,c
  5866  01175A  3603               	rlcf	__div_to_l_@f1+2,f,c
  5867  01175C  3604               	rlcf	__div_to_l_@f1+3,f,c
  5868  01175E  2E11               	decfsz	__div_to_l_@cntr,f,c
  5869  011760  D7E2               	goto	i1l2637
  5870  011762  AE12               	btfss	__div_to_l_@exp1,7,c
  5871  011764  D00F               	goto	i1l2657
  5872  011766  5012               	movf	__div_to_l_@exp1,w,c
  5873  011768  0A80               	xorlw	128
  5874  01176A  6E09               	movwf	??__div_to_l_& (0+255),c
  5875  01176C  0EE1               	movlw	225
  5876  01176E  0A80               	xorlw	128
  5877  011770  5C09               	subwf	??__div_to_l_,w,c
  5878  011772  E3AF               	bnc	i1l2621
  5879  011774                     i1l2653:
  5880  011774  90D8               	bcf	status,0,c
  5881  011776  3210               	rrcf	__div_to_l_@quot+3,f,c
  5882  011778  320F               	rrcf	__div_to_l_@quot+2,f,c
  5883  01177A  320E               	rrcf	__div_to_l_@quot+1,f,c
  5884  01177C  320D               	rrcf	__div_to_l_@quot,f,c
  5885  01177E  3E12               	incfsz	__div_to_l_@exp1,f,c
  5886  011780  D7F9               	goto	i1l2653
  5887  011782  D00C               	goto	i1l690
  5888  011784                     i1l2657:
  5889  011784  0E1F               	movlw	31
  5890  011786  6412               	cpfsgt	__div_to_l_@exp1,c
  5891  011788  D007               	goto	i1l2663
  5892  01178A  D7A3               	goto	i1l2621
  5893  01178C                     i1l2661:
  5894  01178C  90D8               	bcf	status,0,c
  5895  01178E  360D               	rlcf	__div_to_l_@quot,f,c
  5896  011790  360E               	rlcf	__div_to_l_@quot+1,f,c
  5897  011792  360F               	rlcf	__div_to_l_@quot+2,f,c
  5898  011794  3610               	rlcf	__div_to_l_@quot+3,f,c
  5899  011796  0612               	decf	__div_to_l_@exp1,f,c
  5900  011798                     i1l2663:
  5901  011798  6612               	tstfsz	__div_to_l_@exp1,c
  5902  01179A  D7F8               	goto	i1l2661
  5903  01179C                     i1l690:
  5904  01179C  C00D  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5905  0117A0  C00E  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5906  0117A4  C00F  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5907  0117A8  C010  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5908  0117AC                     i1l681:
  5909  0117AC  0012               	return	
  5910  0117AE                     __end_of__div_to_l_:
  5911                           	opt stack 0
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           indf0	equ	0xFEF
  5920                           postinc0	equ	0xFEE
  5921                           fsr0h	equ	0xFEA
  5922                           fsr0l	equ	0xFE9
  5923                           wreg	equ	0xFE8
  5924                           postdec1	equ	0xFE5
  5925                           fsr1l	equ	0xFE1
  5926                           bsr	equ	0xFE0
  5927                           indf2	equ	0xFDF
  5928                           postinc2	equ	0xFDE
  5929                           postdec2	equ	0xFDD
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function ___wmul *****************
  5935 ;; Defined at:
  5936 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  multiplier      2    0[COMRAM] unsigned int 
  5939 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  product         2    4[COMRAM] unsigned int 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  2    0[COMRAM] unsigned int 
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0, prodl, prodh
  5946 ;; Tracked objects:
  5947 ;;		On entry : F/0
  5948 ;;		On exit  : F/0
  5949 ;;		Unchanged: F/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5954 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5955 ;;Total ram usage:        6 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    2
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_sprintf
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	text15
  5966  011F3C                     __ptext15:
  5967                           	opt stack 0
  5968  011F3C                     ___wmul:
  5969                           	opt stack 25
  5970                           
  5971                           ; BSR set to: 0
  5972                           
  5973                           ;incstack = 0
  5974  011F3C  5001               	movf	___wmul@multiplier,w,c
  5975  011F3E  0203               	mulwf	___wmul@multiplicand,c
  5976  011F40  CFF3 F005          	movff	prodl,___wmul@product
  5977  011F44  CFF4 F006          	movff	prodh,___wmul@product+1
  5978  011F48  5001               	movf	___wmul@multiplier,w,c
  5979  011F4A  0204               	mulwf	___wmul@multiplicand+1,c
  5980  011F4C  50F3               	movf	prodl,w,c
  5981  011F4E  2606               	addwf	___wmul@product+1,f,c
  5982  011F50  5002               	movf	___wmul@multiplier+1,w,c
  5983  011F52  0203               	mulwf	___wmul@multiplicand,c
  5984  011F54  50F3               	movf	prodl,w,c
  5985  011F56  2606               	addwf	___wmul@product+1,f,c
  5986                           
  5987                           ; BSR set to: 0
  5988  011F58  C005  F001         	movff	___wmul@product,?___wmul
  5989  011F5C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5990                           
  5991                           ; BSR set to: 0
  5992  011F60  0012               	return	
  5993  011F62                     __end_of___wmul:
  5994                           	opt stack 0
  5995                           tblptru	equ	0xFF8
  5996                           tblptrh	equ	0xFF7
  5997                           tblptrl	equ	0xFF6
  5998                           tablat	equ	0xFF5
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           indf0	equ	0xFEF
  6003                           postinc0	equ	0xFEE
  6004                           fsr0h	equ	0xFEA
  6005                           fsr0l	equ	0xFE9
  6006                           wreg	equ	0xFE8
  6007                           postdec1	equ	0xFE5
  6008                           fsr1l	equ	0xFE1
  6009                           bsr	equ	0xFE0
  6010                           indf2	equ	0xFDF
  6011                           postinc2	equ	0xFDE
  6012                           postdec2	equ	0xFDD
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8
  6016                           
  6017 ;; *************** function ___lltofl *****************
  6018 ;; Defined at:
  6019 ;;		line 30 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltofl.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  c               4   10[COMRAM] unsigned long 
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;		None
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  4   10[COMRAM] unsigned long 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, status,0, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6036 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6037 ;;Total ram usage:        4 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    3
  6040 ;; This function calls:
  6041 ;;		___flpack
  6042 ;; This function is called by:
  6043 ;;		_LISR
  6044 ;;		_sprintf
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text16
  6049  011EBE                     __ptext16:
  6050                           	opt stack 0
  6051  011EBE                     ___lltofl:
  6052                           	opt stack 24
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;incstack = 0
  6056  011EBE  C00B  F001         	movff	___lltofl@c,___flpack@arg
  6057  011EC2  C00C  F002         	movff	___lltofl@c+1,___flpack@arg+1
  6058  011EC6  C00D  F003         	movff	___lltofl@c+2,___flpack@arg+2
  6059  011ECA  C00E  F004         	movff	___lltofl@c+3,___flpack@arg+3
  6060  011ECE  0E96               	movlw	150
  6061  011ED0  6E05               	movwf	___flpack@exp,c
  6062  011ED2  0E00               	movlw	0
  6063  011ED4  6A06               	clrf	___flpack@sign,c
  6064  011ED6  EC18  F08D         	call	___flpack	;wreg free
  6065  011EDA  C001  F00B         	movff	?___flpack,?___lltofl
  6066  011EDE  C002  F00C         	movff	?___flpack+1,?___lltofl+1
  6067  011EE2  C003  F00D         	movff	?___flpack+2,?___lltofl+2
  6068  011EE6  C004  F00E         	movff	?___flpack+3,?___lltofl+3
  6069  011EEA  0012               	return	
  6070  011EEC                     __end_of___lltofl:
  6071                           	opt stack 0
  6072                           tblptru	equ	0xFF8
  6073                           tblptrh	equ	0xFF7
  6074                           tblptrl	equ	0xFF6
  6075                           tablat	equ	0xFF5
  6076                           prodh	equ	0xFF4
  6077                           prodl	equ	0xFF3
  6078                           intcon	equ	0xFF2
  6079                           indf0	equ	0xFEF
  6080                           postinc0	equ	0xFEE
  6081                           fsr0h	equ	0xFEA
  6082                           fsr0l	equ	0xFE9
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1l	equ	0xFE1
  6086                           bsr	equ	0xFE0
  6087                           indf2	equ	0xFDF
  6088                           postinc2	equ	0xFDE
  6089                           postdec2	equ	0xFDD
  6090                           fsr2h	equ	0xFDA
  6091                           fsr2l	equ	0xFD9
  6092                           status	equ	0xFD8
  6093                           
  6094 ;; *************** function ___llmod *****************
  6095 ;; Defined at:
  6096 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  dividend        4   13[COMRAM] unsigned long 
  6099 ;;  divisor         4   17[COMRAM] unsigned long 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  counter         1   21[COMRAM] unsigned char 
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  4   13[COMRAM] unsigned long 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2, status,0
  6106 ;; Tracked objects:
  6107 ;;		On entry : F/0
  6108 ;;		On exit  : F/0
  6109 ;;		Unchanged: F/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6111 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6114 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6115 ;;Total ram usage:        9 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    2
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		_sprintf
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text17
  6126  011CE0                     __ptext17:
  6127                           	opt stack 0
  6128  011CE0                     ___llmod:
  6129                           	opt stack 25
  6130                           
  6131                           ; BSR set to: 0
  6132                           
  6133                           ;incstack = 0
  6134  011CE0  5015               	movf	___llmod@divisor+3,w,c
  6135  011CE2  1012               	iorwf	___llmod@divisor,w,c
  6136  011CE4  1013               	iorwf	___llmod@divisor+1,w,c
  6137  011CE6  1014               	iorwf	___llmod@divisor+2,w,c
  6138  011CE8  E023               	bz	i1l897
  6139                           
  6140                           ; BSR set to: 0
  6141  011CEA  0E01               	movlw	1
  6142  011CEC  6E16               	movwf	___llmod@counter,c
  6143  011CEE  D006               	goto	i1l2765
  6144  011CF0                     i1l2763:
  6145                           
  6146                           ; BSR set to: 0
  6147  011CF0  90D8               	bcf	status,0,c
  6148  011CF2  3612               	rlcf	___llmod@divisor,f,c
  6149  011CF4  3613               	rlcf	___llmod@divisor+1,f,c
  6150  011CF6  3614               	rlcf	___llmod@divisor+2,f,c
  6151  011CF8  3615               	rlcf	___llmod@divisor+3,f,c
  6152  011CFA  2A16               	incf	___llmod@counter,f,c
  6153  011CFC                     i1l2765:
  6154                           
  6155                           ; BSR set to: 0
  6156  011CFC  AE15               	btfss	___llmod@divisor+3,7,c
  6157  011CFE  D7F8               	goto	i1l2763
  6158  011D00                     i1l2767:
  6159                           
  6160                           ; BSR set to: 0
  6161  011D00  5012               	movf	___llmod@divisor,w,c
  6162  011D02  5C0E               	subwf	___llmod@dividend,w,c
  6163  011D04  5013               	movf	___llmod@divisor+1,w,c
  6164  011D06  580F               	subwfb	___llmod@dividend+1,w,c
  6165  011D08  5014               	movf	___llmod@divisor+2,w,c
  6166  011D0A  5810               	subwfb	___llmod@dividend+2,w,c
  6167  011D0C  5015               	movf	___llmod@divisor+3,w,c
  6168  011D0E  5811               	subwfb	___llmod@dividend+3,w,c
  6169  011D10  E308               	bnc	i1l2771
  6170                           
  6171                           ; BSR set to: 0
  6172  011D12  5012               	movf	___llmod@divisor,w,c
  6173  011D14  5E0E               	subwf	___llmod@dividend,f,c
  6174  011D16  5013               	movf	___llmod@divisor+1,w,c
  6175  011D18  5A0F               	subwfb	___llmod@dividend+1,f,c
  6176  011D1A  5014               	movf	___llmod@divisor+2,w,c
  6177  011D1C  5A10               	subwfb	___llmod@dividend+2,f,c
  6178  011D1E  5015               	movf	___llmod@divisor+3,w,c
  6179  011D20  5A11               	subwfb	___llmod@dividend+3,f,c
  6180  011D22                     i1l2771:
  6181                           
  6182                           ; BSR set to: 0
  6183  011D22  90D8               	bcf	status,0,c
  6184  011D24  3215               	rrcf	___llmod@divisor+3,f,c
  6185  011D26  3214               	rrcf	___llmod@divisor+2,f,c
  6186  011D28  3213               	rrcf	___llmod@divisor+1,f,c
  6187  011D2A  3212               	rrcf	___llmod@divisor,f,c
  6188                           
  6189                           ; BSR set to: 0
  6190  011D2C  2E16               	decfsz	___llmod@counter,f,c
  6191  011D2E  D7E8               	goto	i1l2767
  6192  011D30                     i1l897:
  6193                           
  6194                           ; BSR set to: 0
  6195  011D30  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6196  011D34  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6197  011D38  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6198  011D3C  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6199                           
  6200                           ; BSR set to: 0
  6201  011D40  0012               	return	
  6202  011D42                     __end_of___llmod:
  6203                           	opt stack 0
  6204                           tblptru	equ	0xFF8
  6205                           tblptrh	equ	0xFF7
  6206                           tblptrl	equ	0xFF6
  6207                           tablat	equ	0xFF5
  6208                           prodh	equ	0xFF4
  6209                           prodl	equ	0xFF3
  6210                           intcon	equ	0xFF2
  6211                           indf0	equ	0xFEF
  6212                           postinc0	equ	0xFEE
  6213                           fsr0h	equ	0xFEA
  6214                           fsr0l	equ	0xFE9
  6215                           wreg	equ	0xFE8
  6216                           postdec1	equ	0xFE5
  6217                           fsr1l	equ	0xFE1
  6218                           bsr	equ	0xFE0
  6219                           indf2	equ	0xFDF
  6220                           postinc2	equ	0xFDE
  6221                           postdec2	equ	0xFDD
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226 ;; *************** function ___lldiv *****************
  6227 ;; Defined at:
  6228 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  dividend        4    0[COMRAM] unsigned long 
  6231 ;;  divisor         4    4[COMRAM] unsigned long 
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  quotient        4    8[COMRAM] unsigned long 
  6234 ;;  counter         1   12[COMRAM] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  4    0[COMRAM] unsigned long 
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, status,0
  6239 ;; Tracked objects:
  6240 ;;		On entry : F/0
  6241 ;;		On exit  : F/0
  6242 ;;		Unchanged: F/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6244 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6245 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6247 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6248 ;;Total ram usage:       13 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    2
  6251 ;; This function calls:
  6252 ;;		Nothing
  6253 ;; This function is called by:
  6254 ;;		_sprintf
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           	psect	text18
  6259  011C08                     __ptext18:
  6260                           	opt stack 0
  6261  011C08                     ___lldiv:
  6262                           	opt stack 25
  6263                           
  6264                           ; BSR set to: 0
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;incstack = 0
  6268  011C08  6A09               	clrf	___lldiv@quotient,c
  6269  011C0A  6A0A               	clrf	___lldiv@quotient+1,c
  6270  011C0C  6A0B               	clrf	___lldiv@quotient+2,c
  6271  011C0E  6A0C               	clrf	___lldiv@quotient+3,c
  6272                           
  6273                           ; BSR set to: 0
  6274  011C10  5008               	movf	___lldiv@divisor+3,w,c
  6275  011C12  1005               	iorwf	___lldiv@divisor,w,c
  6276  011C14  1006               	iorwf	___lldiv@divisor+1,w,c
  6277  011C16  1007               	iorwf	___lldiv@divisor+2,w,c
  6278  011C18  E029               	bz	i1l887
  6279                           
  6280                           ; BSR set to: 0
  6281  011C1A  0E01               	movlw	1
  6282  011C1C  6E0D               	movwf	___lldiv@counter,c
  6283  011C1E  D006               	goto	i1l2745
  6284  011C20                     i1l2743:
  6285                           
  6286                           ; BSR set to: 0
  6287  011C20  90D8               	bcf	status,0,c
  6288  011C22  3605               	rlcf	___lldiv@divisor,f,c
  6289  011C24  3606               	rlcf	___lldiv@divisor+1,f,c
  6290  011C26  3607               	rlcf	___lldiv@divisor+2,f,c
  6291  011C28  3608               	rlcf	___lldiv@divisor+3,f,c
  6292  011C2A  2A0D               	incf	___lldiv@counter,f,c
  6293  011C2C                     i1l2745:
  6294                           
  6295                           ; BSR set to: 0
  6296  011C2C  AE08               	btfss	___lldiv@divisor+3,7,c
  6297  011C2E  D7F8               	goto	i1l2743
  6298  011C30                     i1l2747:
  6299                           
  6300                           ; BSR set to: 0
  6301  011C30  90D8               	bcf	status,0,c
  6302  011C32  3609               	rlcf	___lldiv@quotient,f,c
  6303  011C34  360A               	rlcf	___lldiv@quotient+1,f,c
  6304  011C36  360B               	rlcf	___lldiv@quotient+2,f,c
  6305  011C38  360C               	rlcf	___lldiv@quotient+3,f,c
  6306                           
  6307                           ; BSR set to: 0
  6308  011C3A  5005               	movf	___lldiv@divisor,w,c
  6309  011C3C  5C01               	subwf	___lldiv@dividend,w,c
  6310  011C3E  5006               	movf	___lldiv@divisor+1,w,c
  6311  011C40  5802               	subwfb	___lldiv@dividend+1,w,c
  6312  011C42  5007               	movf	___lldiv@divisor+2,w,c
  6313  011C44  5803               	subwfb	___lldiv@dividend+2,w,c
  6314  011C46  5008               	movf	___lldiv@divisor+3,w,c
  6315  011C48  5804               	subwfb	___lldiv@dividend+3,w,c
  6316  011C4A  E309               	bnc	i1l2755
  6317                           
  6318                           ; BSR set to: 0
  6319  011C4C  5005               	movf	___lldiv@divisor,w,c
  6320  011C4E  5E01               	subwf	___lldiv@dividend,f,c
  6321  011C50  5006               	movf	___lldiv@divisor+1,w,c
  6322  011C52  5A02               	subwfb	___lldiv@dividend+1,f,c
  6323  011C54  5007               	movf	___lldiv@divisor+2,w,c
  6324  011C56  5A03               	subwfb	___lldiv@dividend+2,f,c
  6325  011C58  5008               	movf	___lldiv@divisor+3,w,c
  6326  011C5A  5A04               	subwfb	___lldiv@dividend+3,f,c
  6327                           
  6328                           ; BSR set to: 0
  6329  011C5C  8009               	bsf	___lldiv@quotient,0,c
  6330  011C5E                     i1l2755:
  6331                           
  6332                           ; BSR set to: 0
  6333  011C5E  90D8               	bcf	status,0,c
  6334  011C60  3208               	rrcf	___lldiv@divisor+3,f,c
  6335  011C62  3207               	rrcf	___lldiv@divisor+2,f,c
  6336  011C64  3206               	rrcf	___lldiv@divisor+1,f,c
  6337  011C66  3205               	rrcf	___lldiv@divisor,f,c
  6338                           
  6339                           ; BSR set to: 0
  6340  011C68  2E0D               	decfsz	___lldiv@counter,f,c
  6341  011C6A  D7E2               	goto	i1l2747
  6342  011C6C                     i1l887:
  6343                           
  6344                           ; BSR set to: 0
  6345  011C6C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6346  011C70  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6347  011C74  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6348  011C78  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6349                           
  6350                           ; BSR set to: 0
  6351  011C7C  0012               	return	
  6352  011C7E                     __end_of___lldiv:
  6353                           	opt stack 0
  6354                           tblptru	equ	0xFF8
  6355                           tblptrh	equ	0xFF7
  6356                           tblptrl	equ	0xFF6
  6357                           tablat	equ	0xFF5
  6358                           prodh	equ	0xFF4
  6359                           prodl	equ	0xFF3
  6360                           intcon	equ	0xFF2
  6361                           indf0	equ	0xFEF
  6362                           postinc0	equ	0xFEE
  6363                           fsr0h	equ	0xFEA
  6364                           fsr0l	equ	0xFE9
  6365                           wreg	equ	0xFE8
  6366                           postdec1	equ	0xFE5
  6367                           fsr1l	equ	0xFE1
  6368                           bsr	equ	0xFE0
  6369                           indf2	equ	0xFDF
  6370                           postinc2	equ	0xFDE
  6371                           postdec2	equ	0xFDD
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function ___fltol *****************
  6377 ;; Defined at:
  6378 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fltol.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  f1              4   65[COMRAM] unsigned long 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  exp1            1   74[COMRAM] unsigned char 
  6383 ;;  sign1           1   73[COMRAM] unsigned char 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;                  4   65[COMRAM] long 
  6386 ;; Registers used:
  6387 ;;		wreg, status,2, status,0
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6393 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6395 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6396 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6397 ;;Total ram usage:       10 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    2
  6400 ;; This function calls:
  6401 ;;		Nothing
  6402 ;; This function is called by:
  6403 ;;		_LISR
  6404 ;;		_sprintf
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           	psect	text19
  6409  01196E                     __ptext19:
  6410                           	opt stack 0
  6411  01196E                     ___fltol:
  6412                           	opt stack 25
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;incstack = 0
  6416  01196E  C042  F046         	movff	___fltol@f1,??___fltol
  6417  011972  C043  F047         	movff	___fltol@f1+1,??___fltol+1
  6418  011976  C044  F048         	movff	___fltol@f1+2,??___fltol+2
  6419  01197A  C045  F049         	movff	___fltol@f1+3,??___fltol+3
  6420  01197E  0E18               	movlw	24
  6421  011980  D005               	goto	i1u271_20
  6422  011982                     i1u271_25:
  6423  011982  90D8               	bcf	status,0,c
  6424  011984  3249               	rrcf	??___fltol+3,f,c
  6425  011986  3248               	rrcf	??___fltol+2,f,c
  6426  011988  3247               	rrcf	??___fltol+1,f,c
  6427  01198A  3246               	rrcf	??___fltol,f,c
  6428  01198C                     i1u271_20:
  6429  01198C  2EE8               	decfsz	wreg,f,c
  6430  01198E  D7F9               	goto	i1u271_25
  6431  011990  5046               	movf	??___fltol,w,c
  6432  011992  6E4B               	movwf	___fltol@exp1,c
  6433  011994  664B               	tstfsz	___fltol@exp1& (0+255),c
  6434  011996  D005               	goto	i1l2703
  6435  011998                     i1l2701:
  6436  011998  6A42               	clrf	?___fltol,c
  6437  01199A  6A43               	clrf	?___fltol+1,c
  6438  01199C  6A44               	clrf	?___fltol+2,c
  6439  01199E  6A45               	clrf	?___fltol+3,c
  6440  0119A0  D046               	goto	i1l742
  6441  0119A2                     i1l2703:
  6442  0119A2  C042  F046         	movff	___fltol@f1,??___fltol
  6443  0119A6  C043  F047         	movff	___fltol@f1+1,??___fltol+1
  6444  0119AA  C044  F048         	movff	___fltol@f1+2,??___fltol+2
  6445  0119AE  C045  F049         	movff	___fltol@f1+3,??___fltol+3
  6446  0119B2  0E20               	movlw	32
  6447  0119B4  D005               	goto	i1u273_20
  6448  0119B6                     i1u273_25:
  6449  0119B6  90D8               	bcf	status,0,c
  6450  0119B8  3249               	rrcf	??___fltol+3,f,c
  6451  0119BA  3248               	rrcf	??___fltol+2,f,c
  6452  0119BC  3247               	rrcf	??___fltol+1,f,c
  6453  0119BE  3246               	rrcf	??___fltol,f,c
  6454  0119C0                     i1u273_20:
  6455  0119C0  2EE8               	decfsz	wreg,f,c
  6456  0119C2  D7F9               	goto	i1u273_25
  6457  0119C4  5046               	movf	??___fltol,w,c
  6458  0119C6  6E4A               	movwf	___fltol@sign1,c
  6459  0119C8  8E44               	bsf	___fltol@f1+2,7,c
  6460  0119CA  6A45               	clrf	___fltol@f1+3,c
  6461  0119CC  0E96               	movlw	150
  6462  0119CE  5E4B               	subwf	___fltol@exp1,f,c
  6463  0119D0  AE4B               	btfss	___fltol@exp1,7,c
  6464  0119D2  D00F               	goto	i1l2721
  6465  0119D4  504B               	movf	___fltol@exp1,w,c
  6466  0119D6  0A80               	xorlw	128
  6467  0119D8  6E46               	movwf	??___fltol& (0+255),c
  6468  0119DA  0EE9               	movlw	233
  6469  0119DC  0A80               	xorlw	128
  6470  0119DE  5C46               	subwf	??___fltol,w,c
  6471  0119E0  E3DB               	bnc	i1l2701
  6472  0119E2                     i1l2717:
  6473  0119E2  90D8               	bcf	status,0,c
  6474  0119E4  3245               	rrcf	___fltol@f1+3,f,c
  6475  0119E6  3244               	rrcf	___fltol@f1+2,f,c
  6476  0119E8  3243               	rrcf	___fltol@f1+1,f,c
  6477  0119EA  3242               	rrcf	___fltol@f1,f,c
  6478  0119EC  3E4B               	incfsz	___fltol@exp1,f,c
  6479  0119EE  D7F9               	goto	i1l2717
  6480  0119F0  D00C               	goto	i1l2729
  6481  0119F2                     i1l2721:
  6482  0119F2  0E1F               	movlw	31
  6483  0119F4  644B               	cpfsgt	___fltol@exp1,c
  6484  0119F6  D007               	goto	i1l2727
  6485  0119F8  D7CF               	goto	i1l2701
  6486  0119FA                     i1l2725:
  6487  0119FA  90D8               	bcf	status,0,c
  6488  0119FC  3642               	rlcf	___fltol@f1,f,c
  6489  0119FE  3643               	rlcf	___fltol@f1+1,f,c
  6490  011A00  3644               	rlcf	___fltol@f1+2,f,c
  6491  011A02  3645               	rlcf	___fltol@f1+3,f,c
  6492  011A04  064B               	decf	___fltol@exp1,f,c
  6493  011A06                     i1l2727:
  6494  011A06  664B               	tstfsz	___fltol@exp1,c
  6495  011A08  D7F8               	goto	i1l2725
  6496  011A0A                     i1l2729:
  6497  011A0A  504A               	movf	___fltol@sign1,w,c
  6498  011A0C  E008               	bz	i1l2733
  6499  011A0E  1E45               	comf	___fltol@f1+3,f,c
  6500  011A10  1E44               	comf	___fltol@f1+2,f,c
  6501  011A12  1E43               	comf	___fltol@f1+1,f,c
  6502  011A14  6C42               	negf	___fltol@f1,c
  6503  011A16  0E00               	movlw	0
  6504  011A18  2243               	addwfc	___fltol@f1+1,f,c
  6505  011A1A  2244               	addwfc	___fltol@f1+2,f,c
  6506  011A1C  2245               	addwfc	___fltol@f1+3,f,c
  6507  011A1E                     i1l2733:
  6508  011A1E  C042  F042         	movff	___fltol@f1,?___fltol
  6509  011A22  C043  F043         	movff	___fltol@f1+1,?___fltol+1
  6510  011A26  C044  F044         	movff	___fltol@f1+2,?___fltol+2
  6511  011A2A  C045  F045         	movff	___fltol@f1+3,?___fltol+3
  6512  011A2E                     i1l742:
  6513  011A2E  0012               	return	
  6514  011A30                     __end_of___fltol:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           intcon	equ	0xFF2
  6523                           indf0	equ	0xFEF
  6524                           postinc0	equ	0xFEE
  6525                           fsr0h	equ	0xFEA
  6526                           fsr0l	equ	0xFE9
  6527                           wreg	equ	0xFE8
  6528                           postdec1	equ	0xFE5
  6529                           fsr1l	equ	0xFE1
  6530                           bsr	equ	0xFE0
  6531                           indf2	equ	0xFDF
  6532                           postinc2	equ	0xFDE
  6533                           postdec2	equ	0xFDD
  6534                           fsr2h	equ	0xFDA
  6535                           fsr2l	equ	0xFD9
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function ___flsub *****************
  6539 ;; Defined at:
  6540 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\flsub.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  f1              4   65[COMRAM] long 
  6543 ;;  f2              4   69[COMRAM] long 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  4   65[COMRAM] long 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6555 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6558 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6559 ;;Total ram usage:        8 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    4
  6562 ;; This function calls:
  6563 ;;		___fladd
  6564 ;; This function is called by:
  6565 ;;		_sprintf
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text20
  6570  011E1E                     __ptext20:
  6571                           	opt stack 0
  6572  011E1E                     ___flsub:
  6573                           	opt stack 23
  6574                           
  6575                           ;incstack = 0
  6576  011E1E  0E80               	movlw	128
  6577  011E20  1A49               	xorwf	___flsub@f2+3,f,c
  6578  011E22  C042  F033         	movff	___flsub@f1,___fladd@f1
  6579  011E26  C043  F034         	movff	___flsub@f1+1,___fladd@f1+1
  6580  011E2A  C044  F035         	movff	___flsub@f1+2,___fladd@f1+2
  6581  011E2E  C045  F036         	movff	___flsub@f1+3,___fladd@f1+3
  6582  011E32  C046  F037         	movff	___flsub@f2,___fladd@f2
  6583  011E36  C047  F038         	movff	___flsub@f2+1,___fladd@f2+1
  6584  011E3A  C048  F039         	movff	___flsub@f2+2,___fladd@f2+2
  6585  011E3E  C049  F03A         	movff	___flsub@f2+3,___fladd@f2+3
  6586  011E42  EC49  F087         	call	___fladd	;wreg free
  6587  011E46  C033  F042         	movff	?___fladd,?___flsub
  6588  011E4A  C034  F043         	movff	?___fladd+1,?___flsub+1
  6589  011E4E  C035  F044         	movff	?___fladd+2,?___flsub+2
  6590  011E52  C036  F045         	movff	?___fladd+3,?___flsub+3
  6591  011E56  0012               	return	
  6592  011E58                     __end_of___flsub:
  6593                           	opt stack 0
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           indf0	equ	0xFEF
  6602                           postinc0	equ	0xFEE
  6603                           fsr0h	equ	0xFEA
  6604                           fsr0l	equ	0xFE9
  6605                           wreg	equ	0xFE8
  6606                           postdec1	equ	0xFE5
  6607                           fsr1l	equ	0xFE1
  6608                           bsr	equ	0xFE0
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function ___fladd *****************
  6617 ;; Defined at:
  6618 ;;		line 88 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fladd.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;  f1              4   50[COMRAM] long 
  6621 ;;  f2              4   54[COMRAM] long 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  exp1            1   64[COMRAM] unsigned char 
  6624 ;;  exp2            1   63[COMRAM] unsigned char 
  6625 ;;  sign            1   62[COMRAM] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  4   50[COMRAM] unsigned char 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0, cstack
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6635 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6636 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6637 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6638 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6639 ;;Total ram usage:       15 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    3
  6642 ;; This function calls:
  6643 ;;		___flpack
  6644 ;; This function is called by:
  6645 ;;		_LISR
  6646 ;;		_sprintf
  6647 ;;		___flsub
  6648 ;; This function uses a non-reentrant model
  6649 ;;
  6650                           
  6651                           	psect	text21
  6652  010E92                     __ptext21:
  6653                           	opt stack 0
  6654  010E92                     ___fladd:
  6655                           	opt stack 23
  6656                           
  6657                           ;incstack = 0
  6658  010E92  C033  F03B         	movff	___fladd@f1,??___fladd
  6659  010E96  C034  F03C         	movff	___fladd@f1+1,??___fladd+1
  6660  010E9A  C035  F03D         	movff	___fladd@f1+2,??___fladd+2
  6661  010E9E  C036  F03E         	movff	___fladd@f1+3,??___fladd+3
  6662  010EA2  0E18               	movlw	24
  6663  010EA4  D005               	goto	i1u197_20
  6664  010EA6                     i1u197_25:
  6665  010EA6  90D8               	bcf	status,0,c
  6666  010EA8  323E               	rrcf	??___fladd+3,f,c
  6667  010EAA  323D               	rrcf	??___fladd+2,f,c
  6668  010EAC  323C               	rrcf	??___fladd+1,f,c
  6669  010EAE  323B               	rrcf	??___fladd,f,c
  6670  010EB0                     i1u197_20:
  6671  010EB0  2EE8               	decfsz	wreg,f,c
  6672  010EB2  D7F9               	goto	i1u197_25
  6673  010EB4  503B               	movf	??___fladd,w,c
  6674  010EB6  6E41               	movwf	___fladd@exp1,c
  6675  010EB8  C037  F03B         	movff	___fladd@f2,??___fladd
  6676  010EBC  C038  F03C         	movff	___fladd@f2+1,??___fladd+1
  6677  010EC0  C039  F03D         	movff	___fladd@f2+2,??___fladd+2
  6678  010EC4  C03A  F03E         	movff	___fladd@f2+3,??___fladd+3
  6679  010EC8  0E18               	movlw	24
  6680  010ECA  D005               	goto	i1u198_20
  6681  010ECC                     i1u198_25:
  6682  010ECC  90D8               	bcf	status,0,c
  6683  010ECE  323E               	rrcf	??___fladd+3,f,c
  6684  010ED0  323D               	rrcf	??___fladd+2,f,c
  6685  010ED2  323C               	rrcf	??___fladd+1,f,c
  6686  010ED4  323B               	rrcf	??___fladd,f,c
  6687  010ED6                     i1u198_20:
  6688  010ED6  2EE8               	decfsz	wreg,f,c
  6689  010ED8  D7F9               	goto	i1u198_25
  6690  010EDA  503B               	movf	??___fladd,w,c
  6691  010EDC  6E40               	movwf	___fladd@exp2,c
  6692  010EDE  5041               	movf	___fladd@exp1,w,c
  6693  010EE0  E009               	bz	i1l641
  6694  010EE2  5040               	movf	___fladd@exp2,w,c
  6695  010EE4  5C41               	subwf	___fladd@exp1,w,c
  6696  010EE6  E20F               	bc	i1l2269
  6697  010EE8  5041               	movf	___fladd@exp1,w,c
  6698  010EEA  5C40               	subwf	___fladd@exp2,w,c
  6699  010EEC  6E3B               	movwf	??___fladd& (0+255),c
  6700  010EEE  0E21               	movlw	33
  6701  010EF0  5C3B               	subwf	??___fladd,w,c
  6702  010EF2  E309               	bnc	i1l2269
  6703  010EF4                     i1l641:
  6704  010EF4  C037  F033         	movff	___fladd@f2,?___fladd
  6705  010EF8  C038  F034         	movff	___fladd@f2+1,?___fladd+1
  6706  010EFC  C039  F035         	movff	___fladd@f2+2,?___fladd+2
  6707  010F00  C03A  F036         	movff	___fladd@f2+3,?___fladd+3
  6708  010F04  D099               	goto	i1l642
  6709  010F06                     i1l2269:
  6710  010F06  5040               	movf	___fladd@exp2,w,c
  6711  010F08  E009               	bz	i1l645
  6712  010F0A  5041               	movf	___fladd@exp1,w,c
  6713  010F0C  5C40               	subwf	___fladd@exp2,w,c
  6714  010F0E  E20F               	bc	i1l2275
  6715  010F10  5040               	movf	___fladd@exp2,w,c
  6716  010F12  5C41               	subwf	___fladd@exp1,w,c
  6717  010F14  6E3B               	movwf	??___fladd& (0+255),c
  6718  010F16  0E21               	movlw	33
  6719  010F18  5C3B               	subwf	??___fladd,w,c
  6720  010F1A  E309               	bnc	i1l2275
  6721  010F1C                     i1l645:
  6722  010F1C  C033  F033         	movff	___fladd@f1,?___fladd
  6723  010F20  C034  F034         	movff	___fladd@f1+1,?___fladd+1
  6724  010F24  C035  F035         	movff	___fladd@f1+2,?___fladd+2
  6725  010F28  C036  F036         	movff	___fladd@f1+3,?___fladd+3
  6726  010F2C  D085               	goto	i1l642
  6727  010F2E                     i1l2275:
  6728  010F2E  0E06               	movlw	6
  6729  010F30  6E3F               	movwf	___fladd@sign,c
  6730  010F32  BE36               	btfsc	___fladd@f1+3,7,c
  6731  010F34  8E3F               	bsf	___fladd@sign,7,c
  6732  010F36  BE3A               	btfsc	___fladd@f2+3,7,c
  6733  010F38  8C3F               	bsf	___fladd@sign,6,c
  6734  010F3A  8E35               	bsf	___fladd@f1+2,7,c
  6735  010F3C  6A36               	clrf	___fladd@f1+3,c
  6736  010F3E  8E39               	bsf	___fladd@f2+2,7,c
  6737  010F40  6A3A               	clrf	___fladd@f2+3,c
  6738  010F42  5040               	movf	___fladd@exp2,w,c
  6739  010F44  5C41               	subwf	___fladd@exp1,w,c
  6740  010F46  E21A               	bc	i1l2299
  6741  010F48                     i1l2289:
  6742  010F48  90D8               	bcf	status,0,c
  6743  010F4A  3637               	rlcf	___fladd@f2,f,c
  6744  010F4C  3638               	rlcf	___fladd@f2+1,f,c
  6745  010F4E  3639               	rlcf	___fladd@f2+2,f,c
  6746  010F50  363A               	rlcf	___fladd@f2+3,f,c
  6747  010F52  0640               	decf	___fladd@exp2,f,c
  6748  010F54  5040               	movf	___fladd@exp2,w,c
  6749  010F56  1841               	xorwf	___fladd@exp1,w,c
  6750  010F58  E00D               	bz	i1l2297
  6751  010F5A  063F               	decf	___fladd@sign,f,c
  6752  010F5C  C03F  F03B         	movff	___fladd@sign,??___fladd
  6753  010F60  0E07               	movlw	7
  6754  010F62  163B               	andwf	??___fladd,f,c
  6755  010F64  E007               	bz	i1l2297
  6756  010F66  D7F0               	goto	i1l2289
  6757  010F68                     i1l2295:
  6758  010F68  90D8               	bcf	status,0,c
  6759  010F6A  3236               	rrcf	___fladd@f1+3,f,c
  6760  010F6C  3235               	rrcf	___fladd@f1+2,f,c
  6761  010F6E  3234               	rrcf	___fladd@f1+1,f,c
  6762  010F70  3233               	rrcf	___fladd@f1,f,c
  6763  010F72  2A41               	incf	___fladd@exp1,f,c
  6764  010F74                     i1l2297:
  6765  010F74  5040               	movf	___fladd@exp2,w,c
  6766  010F76  6241               	cpfseq	___fladd@exp1,c
  6767  010F78  D7F7               	goto	i1l2295
  6768  010F7A  D01C               	goto	i1l656
  6769  010F7C                     i1l2299:
  6770  010F7C  5041               	movf	___fladd@exp1,w,c
  6771  010F7E  5C40               	subwf	___fladd@exp2,w,c
  6772  010F80  E219               	bc	i1l656
  6773  010F82                     i1l2301:
  6774  010F82  90D8               	bcf	status,0,c
  6775  010F84  3633               	rlcf	___fladd@f1,f,c
  6776  010F86  3634               	rlcf	___fladd@f1+1,f,c
  6777  010F88  3635               	rlcf	___fladd@f1+2,f,c
  6778  010F8A  3636               	rlcf	___fladd@f1+3,f,c
  6779  010F8C  0641               	decf	___fladd@exp1,f,c
  6780  010F8E  5040               	movf	___fladd@exp2,w,c
  6781  010F90  1841               	xorwf	___fladd@exp1,w,c
  6782  010F92  E00D               	bz	i1l2309
  6783  010F94  063F               	decf	___fladd@sign,f,c
  6784  010F96  C03F  F03B         	movff	___fladd@sign,??___fladd
  6785  010F9A  0E07               	movlw	7
  6786  010F9C  163B               	andwf	??___fladd,f,c
  6787  010F9E  E007               	bz	i1l2309
  6788  010FA0  D7F0               	goto	i1l2301
  6789  010FA2                     i1l2307:
  6790  010FA2  90D8               	bcf	status,0,c
  6791  010FA4  323A               	rrcf	___fladd@f2+3,f,c
  6792  010FA6  3239               	rrcf	___fladd@f2+2,f,c
  6793  010FA8  3238               	rrcf	___fladd@f2+1,f,c
  6794  010FAA  3237               	rrcf	___fladd@f2,f,c
  6795  010FAC  2A40               	incf	___fladd@exp2,f,c
  6796  010FAE                     i1l2309:
  6797  010FAE  5040               	movf	___fladd@exp2,w,c
  6798  010FB0  6241               	cpfseq	___fladd@exp1,c
  6799  010FB2  D7F7               	goto	i1l2307
  6800  010FB4                     i1l656:
  6801  010FB4  AE3F               	btfss	___fladd@sign,7,c
  6802  010FB6  D009               	goto	i1l2313
  6803  010FB8  1E33               	comf	___fladd@f1,f,c
  6804  010FBA  1E34               	comf	___fladd@f1+1,f,c
  6805  010FBC  1E35               	comf	___fladd@f1+2,f,c
  6806  010FBE  1E36               	comf	___fladd@f1+3,f,c
  6807  010FC0  2A33               	incf	___fladd@f1,f,c
  6808  010FC2  0E00               	movlw	0
  6809  010FC4  2234               	addwfc	___fladd@f1+1,f,c
  6810  010FC6  2235               	addwfc	___fladd@f1+2,f,c
  6811  010FC8  2236               	addwfc	___fladd@f1+3,f,c
  6812  010FCA                     i1l2313:
  6813  010FCA  AC3F               	btfss	___fladd@sign,6,c
  6814  010FCC  D009               	goto	i1l2317
  6815  010FCE  1E37               	comf	___fladd@f2,f,c
  6816  010FD0  1E38               	comf	___fladd@f2+1,f,c
  6817  010FD2  1E39               	comf	___fladd@f2+2,f,c
  6818  010FD4  1E3A               	comf	___fladd@f2+3,f,c
  6819  010FD6  2A37               	incf	___fladd@f2,f,c
  6820  010FD8  0E00               	movlw	0
  6821  010FDA  2238               	addwfc	___fladd@f2+1,f,c
  6822  010FDC  2239               	addwfc	___fladd@f2+2,f,c
  6823  010FDE  223A               	addwfc	___fladd@f2+3,f,c
  6824  010FE0                     i1l2317:
  6825  010FE0  6A3F               	clrf	___fladd@sign,c
  6826  010FE2  5033               	movf	___fladd@f1,w,c
  6827  010FE4  2637               	addwf	___fladd@f2,f,c
  6828  010FE6  5034               	movf	___fladd@f1+1,w,c
  6829  010FE8  2238               	addwfc	___fladd@f2+1,f,c
  6830  010FEA  5035               	movf	___fladd@f1+2,w,c
  6831  010FEC  2239               	addwfc	___fladd@f2+2,f,c
  6832  010FEE  5036               	movf	___fladd@f1+3,w,c
  6833  010FF0  223A               	addwfc	___fladd@f2+3,f,c
  6834  010FF2  AE3A               	btfss	___fladd@f2+3,7,c
  6835  010FF4  D00B               	goto	i1l2325
  6836  010FF6  1E37               	comf	___fladd@f2,f,c
  6837  010FF8  1E38               	comf	___fladd@f2+1,f,c
  6838  010FFA  1E39               	comf	___fladd@f2+2,f,c
  6839  010FFC  1E3A               	comf	___fladd@f2+3,f,c
  6840  010FFE  2A37               	incf	___fladd@f2,f,c
  6841  011000  0E00               	movlw	0
  6842  011002  2238               	addwfc	___fladd@f2+1,f,c
  6843  011004  2239               	addwfc	___fladd@f2+2,f,c
  6844  011006  223A               	addwfc	___fladd@f2+3,f,c
  6845  011008  0E01               	movlw	1
  6846  01100A  6E3F               	movwf	___fladd@sign,c
  6847  01100C                     i1l2325:
  6848  01100C  C037  F001         	movff	___fladd@f2,___flpack@arg
  6849  011010  C038  F002         	movff	___fladd@f2+1,___flpack@arg+1
  6850  011014  C039  F003         	movff	___fladd@f2+2,___flpack@arg+2
  6851  011018  C03A  F004         	movff	___fladd@f2+3,___flpack@arg+3
  6852  01101C  C041  F005         	movff	___fladd@exp1,___flpack@exp
  6853  011020  C03F  F006         	movff	___fladd@sign,___flpack@sign
  6854  011024  EC18  F08D         	call	___flpack	;wreg free
  6855  011028  C001  F033         	movff	?___flpack,?___fladd
  6856  01102C  C002  F034         	movff	?___flpack+1,?___fladd+1
  6857  011030  C003  F035         	movff	?___flpack+2,?___fladd+2
  6858  011034  C004  F036         	movff	?___flpack+3,?___fladd+3
  6859  011038                     i1l642:
  6860  011038  0012               	return	
  6861  01103A                     __end_of___fladd:
  6862                           	opt stack 0
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           prodh	equ	0xFF4
  6868                           prodl	equ	0xFF3
  6869                           intcon	equ	0xFF2
  6870                           indf0	equ	0xFEF
  6871                           postinc0	equ	0xFEE
  6872                           fsr0h	equ	0xFEA
  6873                           fsr0l	equ	0xFE9
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           fsr1l	equ	0xFE1
  6877                           bsr	equ	0xFE0
  6878                           indf2	equ	0xFDF
  6879                           postinc2	equ	0xFDE
  6880                           postdec2	equ	0xFDD
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function ___flneg *****************
  6886 ;; Defined at:
  6887 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\flneg.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  f1              4    0[COMRAM] unsigned char 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  4    0[COMRAM] unsigned char 
  6894 ;; Registers used:
  6895 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : F/0
  6898 ;;		On exit  : F/0
  6899 ;;		Unchanged: F/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6904 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6905 ;;Total ram usage:        4 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    2
  6908 ;; This function calls:
  6909 ;;		Nothing
  6910 ;; This function is called by:
  6911 ;;		_sprintf
  6912 ;; This function uses a non-reentrant model
  6913 ;;
  6914                           
  6915                           	psect	text22
  6916  011F62                     __ptext22:
  6917                           	opt stack 0
  6918  011F62                     ___flneg:
  6919                           	opt stack 25
  6920                           
  6921                           ; BSR set to: 0
  6922                           
  6923                           ;incstack = 0
  6924  011F62  EE20  F001         	lfsr	2,___flneg@f1
  6925  011F66  50DE               	movf	postinc2,w,c
  6926  011F68  10DE               	iorwf	postinc2,w,c
  6927  011F6A  10DE               	iorwf	postinc2,w,c
  6928  011F6C  10DE               	iorwf	postinc2,w,c
  6929  011F6E  E002               	bz	i1l2695
  6930                           
  6931                           ; BSR set to: 0
  6932  011F70  0E80               	movlw	128
  6933  011F72  1A04               	xorwf	___flneg@f1+3,f,c
  6934  011F74                     i1l2695:
  6935                           
  6936                           ; BSR set to: 0
  6937  011F74  C001  F001         	movff	___flneg@f1,?___flneg
  6938  011F78  C002  F002         	movff	___flneg@f1+1,?___flneg+1
  6939  011F7C  C003  F003         	movff	___flneg@f1+2,?___flneg+2
  6940  011F80  C004  F004         	movff	___flneg@f1+3,?___flneg+3
  6941                           
  6942                           ; BSR set to: 0
  6943  011F84  0012               	return	
  6944  011F86                     __end_of___flneg:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           indf0	equ	0xFEF
  6954                           postinc0	equ	0xFEE
  6955                           fsr0h	equ	0xFEA
  6956                           fsr0l	equ	0xFE9
  6957                           wreg	equ	0xFE8
  6958                           postdec1	equ	0xFE5
  6959                           fsr1l	equ	0xFE1
  6960                           bsr	equ	0xFE0
  6961                           indf2	equ	0xFDF
  6962                           postinc2	equ	0xFDE
  6963                           postdec2	equ	0xFDD
  6964                           fsr2h	equ	0xFDA
  6965                           fsr2l	equ	0xFD9
  6966                           status	equ	0xFD8
  6967                           
  6968 ;; *************** function ___flge *****************
  6969 ;; Defined at:
  6970 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\flge.c"
  6971 ;; Parameters:    Size  Location     Type
  6972 ;;  ff1             4    0[COMRAM] unsigned char 
  6973 ;;  ff2             4    4[COMRAM] unsigned char 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;		None
  6976 ;; Return value:  Size  Location     Type
  6977 ;;		None               void
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6985 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6988 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6989 ;;Total ram usage:        8 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    2
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		_LISR
  6996 ;;		_sprintf
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text23
  7001  011D42                     __ptext23:
  7002                           	opt stack 0
  7003  011D42                     ___flge:
  7004                           	opt stack 25
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;incstack = 0
  7008  011D42  AE04               	btfss	___flge@ff1+3,7,c
  7009  011D44  D009               	goto	i1l2681
  7010  011D46  6C01               	negf	___flge@ff1,c
  7011  011D48  1E02               	comf	___flge@ff1+1,f,c
  7012  011D4A  B0D8               	btfsc	status,0,c
  7013  011D4C  2A02               	incf	___flge@ff1+1,f,c
  7014  011D4E  1E03               	comf	___flge@ff1+2,f,c
  7015  011D50  B0D8               	btfsc	status,0,c
  7016  011D52  2A03               	incf	___flge@ff1+2,f,c
  7017  011D54  0E80               	movlw	128
  7018  011D56  5604               	subfwb	___flge@ff1+3,f,c
  7019  011D58                     i1l2681:
  7020  011D58  AE08               	btfss	___flge@ff2+3,7,c
  7021  011D5A  D009               	goto	i1l698
  7022  011D5C  6C05               	negf	___flge@ff2,c
  7023  011D5E  1E06               	comf	___flge@ff2+1,f,c
  7024  011D60  B0D8               	btfsc	status,0,c
  7025  011D62  2A06               	incf	___flge@ff2+1,f,c
  7026  011D64  1E07               	comf	___flge@ff2+2,f,c
  7027  011D66  B0D8               	btfsc	status,0,c
  7028  011D68  2A07               	incf	___flge@ff2+2,f,c
  7029  011D6A  0E80               	movlw	128
  7030  011D6C  5608               	subfwb	___flge@ff2+3,f,c
  7031  011D6E                     i1l698:
  7032  011D6E  0E80               	movlw	128
  7033  011D70  1A04               	xorwf	___flge@ff1+3,f,c
  7034  011D72  1A08               	xorwf	___flge@ff2+3,f,c
  7035  011D74  5005               	movf	___flge@ff2,w,c
  7036  011D76  5C01               	subwf	___flge@ff1,w,c
  7037  011D78  5006               	movf	___flge@ff2+1,w,c
  7038  011D7A  5802               	subwfb	___flge@ff1+1,w,c
  7039  011D7C  5007               	movf	___flge@ff2+2,w,c
  7040  011D7E  5803               	subwfb	___flge@ff1+2,w,c
  7041  011D80  5008               	movf	___flge@ff2+3,w,c
  7042  011D82  5804               	subwfb	___flge@ff1+3,w,c
  7043  011D84  E202               	bc	i1l2687
  7044  011D86  90D8               	bcf	status,0,c
  7045  011D88  D001               	goto	i1l699
  7046  011D8A                     i1l2687:
  7047  011D8A  80D8               	bsf	status,0,c
  7048  011D8C                     i1l699:
  7049  011D8C  0012               	return	
  7050  011D8E                     __end_of___flge:
  7051                           	opt stack 0
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           intcon	equ	0xFF2
  7059                           indf0	equ	0xFEF
  7060                           postinc0	equ	0xFEE
  7061                           fsr0h	equ	0xFEA
  7062                           fsr0l	equ	0xFE9
  7063                           wreg	equ	0xFE8
  7064                           postdec1	equ	0xFE5
  7065                           fsr1l	equ	0xFE1
  7066                           bsr	equ	0xFE0
  7067                           indf2	equ	0xFDF
  7068                           postinc2	equ	0xFDE
  7069                           postdec2	equ	0xFDD
  7070                           fsr2h	equ	0xFDA
  7071                           fsr2l	equ	0xFD9
  7072                           status	equ	0xFD8
  7073                           
  7074 ;; *************** function ___lwtofl *****************
  7075 ;; Defined at:
  7076 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lwtofl.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;  c               2   10[COMRAM] unsigned int 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  4   10[COMRAM] unsigned int 
  7083 ;; Registers used:
  7084 ;;		wreg, status,2, status,0, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7093 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7094 ;;Total ram usage:        4 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    3
  7097 ;; This function calls:
  7098 ;;		___flpack
  7099 ;; This function is called by:
  7100 ;;		_LISR
  7101 ;; This function uses a non-reentrant model
  7102 ;;
  7103                           
  7104                           	psect	text24
  7105  011EEC                     __ptext24:
  7106                           	opt stack 0
  7107  011EEC                     ___lwtofl:
  7108                           	opt stack 25
  7109                           
  7110                           ;incstack = 0
  7111  011EEC  C00B  F001         	movff	___lwtofl@c,___flpack@arg
  7112  011EF0  C00C  F002         	movff	___lwtofl@c+1,___flpack@arg+1
  7113  011EF4  6A03               	clrf	___flpack@arg+2,c
  7114  011EF6  6A04               	clrf	___flpack@arg+3,c
  7115  011EF8  0E96               	movlw	150
  7116  011EFA  6E05               	movwf	___flpack@exp,c
  7117  011EFC  0E00               	movlw	0
  7118  011EFE  6A06               	clrf	___flpack@sign,c
  7119  011F00  EC18  F08D         	call	___flpack	;wreg free
  7120  011F04  C001  F00B         	movff	?___flpack,?___lwtofl
  7121  011F08  C002  F00C         	movff	?___flpack+1,?___lwtofl+1
  7122  011F0C  C003  F00D         	movff	?___flpack+2,?___lwtofl+2
  7123  011F10  C004  F00E         	movff	?___flpack+3,?___lwtofl+3
  7124  011F14  0012               	return	
  7125  011F16                     __end_of___lwtofl:
  7126                           	opt stack 0
  7127                           tblptru	equ	0xFF8
  7128                           tblptrh	equ	0xFF7
  7129                           tblptrl	equ	0xFF6
  7130                           tablat	equ	0xFF5
  7131                           prodh	equ	0xFF4
  7132                           prodl	equ	0xFF3
  7133                           intcon	equ	0xFF2
  7134                           indf0	equ	0xFEF
  7135                           postinc0	equ	0xFEE
  7136                           fsr0h	equ	0xFEA
  7137                           fsr0l	equ	0xFE9
  7138                           wreg	equ	0xFE8
  7139                           postdec1	equ	0xFE5
  7140                           fsr1l	equ	0xFE1
  7141                           bsr	equ	0xFE0
  7142                           indf2	equ	0xFDF
  7143                           postinc2	equ	0xFDE
  7144                           postdec2	equ	0xFDD
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function ___lmul *****************
  7150 ;; Defined at:
  7151 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul32.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  multiplier      4    0[COMRAM] unsigned long 
  7154 ;;  multiplicand    4    4[COMRAM] unsigned long 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  product         4    8[COMRAM] unsigned long 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  4    0[COMRAM] unsigned long 
  7159 ;; Registers used:
  7160 ;;		wreg, status,2, status,0
  7161 ;; Tracked objects:
  7162 ;;		On entry : F/0
  7163 ;;		On exit  : F/0
  7164 ;;		Unchanged: F/0
  7165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7166 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7167 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7169 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7170 ;;Total ram usage:       12 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    2
  7173 ;; This function calls:
  7174 ;;		Nothing
  7175 ;; This function is called by:
  7176 ;;		_LISR
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text25
  7181  011D8E                     __ptext25:
  7182                           	opt stack 0
  7183  011D8E                     ___lmul:
  7184                           	opt stack 26
  7185                           
  7186                           ; BSR set to: 0
  7187                           
  7188                           ;incstack = 0
  7189  011D8E  6A09               	clrf	___lmul@product,c
  7190  011D90  6A0A               	clrf	___lmul@product+1,c
  7191  011D92  6A0B               	clrf	___lmul@product+2,c
  7192  011D94  6A0C               	clrf	___lmul@product+3,c
  7193  011D96                     i1l408:
  7194                           
  7195                           ; BSR set to: 0
  7196  011D96  A001               	btfss	___lmul@multiplier,0,c
  7197  011D98  D008               	goto	i1l3115
  7198                           
  7199                           ; BSR set to: 0
  7200  011D9A  5005               	movf	___lmul@multiplicand,w,c
  7201  011D9C  2609               	addwf	___lmul@product,f,c
  7202  011D9E  5006               	movf	___lmul@multiplicand+1,w,c
  7203  011DA0  220A               	addwfc	___lmul@product+1,f,c
  7204  011DA2  5007               	movf	___lmul@multiplicand+2,w,c
  7205  011DA4  220B               	addwfc	___lmul@product+2,f,c
  7206  011DA6  5008               	movf	___lmul@multiplicand+3,w,c
  7207  011DA8  220C               	addwfc	___lmul@product+3,f,c
  7208  011DAA                     i1l3115:
  7209                           
  7210                           ; BSR set to: 0
  7211  011DAA  90D8               	bcf	status,0,c
  7212  011DAC  3605               	rlcf	___lmul@multiplicand,f,c
  7213  011DAE  3606               	rlcf	___lmul@multiplicand+1,f,c
  7214  011DB0  3607               	rlcf	___lmul@multiplicand+2,f,c
  7215  011DB2  3608               	rlcf	___lmul@multiplicand+3,f,c
  7216                           
  7217                           ; BSR set to: 0
  7218  011DB4  90D8               	bcf	status,0,c
  7219  011DB6  3204               	rrcf	___lmul@multiplier+3,f,c
  7220  011DB8  3203               	rrcf	___lmul@multiplier+2,f,c
  7221  011DBA  3202               	rrcf	___lmul@multiplier+1,f,c
  7222  011DBC  3201               	rrcf	___lmul@multiplier,f,c
  7223  011DBE  5004               	movf	___lmul@multiplier+3,w,c
  7224  011DC0  1001               	iorwf	___lmul@multiplier,w,c
  7225  011DC2  1002               	iorwf	___lmul@multiplier+1,w,c
  7226  011DC4  1003               	iorwf	___lmul@multiplier+2,w,c
  7227  011DC6  E1E7               	bnz	i1l408
  7228                           
  7229                           ; BSR set to: 0
  7230  011DC8  C009  F001         	movff	___lmul@product,?___lmul
  7231  011DCC  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  7232  011DD0  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  7233  011DD4  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  7234                           
  7235                           ; BSR set to: 0
  7236  011DD8  0012               	return	
  7237  011DDA                     __end_of___lmul:
  7238                           	opt stack 0
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           intcon	equ	0xFF2
  7246                           indf0	equ	0xFEF
  7247                           postinc0	equ	0xFEE
  7248                           fsr0h	equ	0xFEA
  7249                           fsr0l	equ	0xFE9
  7250                           wreg	equ	0xFE8
  7251                           postdec1	equ	0xFE5
  7252                           fsr1l	equ	0xFE1
  7253                           bsr	equ	0xFE0
  7254                           indf2	equ	0xFDF
  7255                           postinc2	equ	0xFDE
  7256                           postdec2	equ	0xFDD
  7257                           fsr2h	equ	0xFDA
  7258                           fsr2l	equ	0xFD9
  7259                           status	equ	0xFD8
  7260                           
  7261 ;; *************** function ___fldiv *****************
  7262 ;; Defined at:
  7263 ;;		line 49 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldiv.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;  f1              4   14[COMRAM] unsigned long 
  7266 ;;  f2              4   18[COMRAM] unsigned long 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;  f3              4   26[COMRAM] unsigned long 
  7269 ;;  sign            1   32[COMRAM] unsigned char 
  7270 ;;  exp             1   31[COMRAM] unsigned char 
  7271 ;;  cntr            1   30[COMRAM] unsigned char 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  4   14[COMRAM] unsigned char 
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7281 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7282 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7283 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7284 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7285 ;;Total ram usage:       19 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    3
  7288 ;; This function calls:
  7289 ;;		___flpack
  7290 ;; This function is called by:
  7291 ;;		_LISR
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text26
  7296  0117AE                     __ptext26:
  7297                           	opt stack 0
  7298  0117AE                     ___fldiv:
  7299                           	opt stack 25
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;incstack = 0
  7303  0117AE  C00F  F017         	movff	___fldiv@f1,??___fldiv
  7304  0117B2  C010  F018         	movff	___fldiv@f1+1,??___fldiv+1
  7305  0117B6  C011  F019         	movff	___fldiv@f1+2,??___fldiv+2
  7306  0117BA  C012  F01A         	movff	___fldiv@f1+3,??___fldiv+3
  7307  0117BE  0E18               	movlw	24
  7308  0117C0  D005               	goto	i1u334_20
  7309  0117C2                     i1u334_25:
  7310  0117C2  90D8               	bcf	status,0,c
  7311  0117C4  321A               	rrcf	??___fldiv+3,f,c
  7312  0117C6  3219               	rrcf	??___fldiv+2,f,c
  7313  0117C8  3218               	rrcf	??___fldiv+1,f,c
  7314  0117CA  3217               	rrcf	??___fldiv,f,c
  7315  0117CC                     i1u334_20:
  7316  0117CC  2EE8               	decfsz	wreg,f,c
  7317  0117CE  D7F9               	goto	i1u334_25
  7318  0117D0  5017               	movf	??___fldiv,w,c
  7319  0117D2  6E20               	movwf	___fldiv@exp,c
  7320  0117D4  6620               	tstfsz	___fldiv@exp& (0+255),c
  7321  0117D6  D001               	goto	i1l3123
  7322  0117D8  D015               	goto	i1u337_20
  7323  0117DA                     i1l3123:
  7324  0117DA  C013  F017         	movff	___fldiv@f2,??___fldiv
  7325  0117DE  C014  F018         	movff	___fldiv@f2+1,??___fldiv+1
  7326  0117E2  C015  F019         	movff	___fldiv@f2+2,??___fldiv+2
  7327  0117E6  C016  F01A         	movff	___fldiv@f2+3,??___fldiv+3
  7328  0117EA  0E18               	movlw	24
  7329  0117EC  D005               	goto	i1u336_20
  7330  0117EE                     i1u336_25:
  7331  0117EE  90D8               	bcf	status,0,c
  7332  0117F0  321A               	rrcf	??___fldiv+3,f,c
  7333  0117F2  3219               	rrcf	??___fldiv+2,f,c
  7334  0117F4  3218               	rrcf	??___fldiv+1,f,c
  7335  0117F6  3217               	rrcf	??___fldiv,f,c
  7336  0117F8                     i1u336_20:
  7337  0117F8  2EE8               	decfsz	wreg,f,c
  7338  0117FA  D7F9               	goto	i1u336_25
  7339  0117FC  5017               	movf	??___fldiv,w,c
  7340  0117FE  6E21               	movwf	___fldiv@sign,c
  7341  011800  6621               	tstfsz	___fldiv@sign& (0+255),c
  7342  011802  D005               	goto	i1l3127
  7343  011804                     i1u337_20:
  7344  011804  6A0F               	clrf	?___fldiv,c
  7345  011806  6A10               	clrf	?___fldiv+1,c
  7346  011808  6A11               	clrf	?___fldiv+2,c
  7347  01180A  6A12               	clrf	?___fldiv+3,c
  7348  01180C  D043               	goto	i1l673
  7349  01180E                     i1l3127:
  7350  01180E  5021               	movf	___fldiv@sign,w,c
  7351  011810  0F89               	addlw	137
  7352  011812  5E20               	subwf	___fldiv@exp,f,c
  7353  011814  C012  F021         	movff	___fldiv@f1+3,___fldiv@sign
  7354  011818  5016               	movf	___fldiv@f2+3,w,c
  7355  01181A  1A21               	xorwf	___fldiv@sign,f,c
  7356  01181C  0E80               	movlw	128
  7357  01181E  1621               	andwf	___fldiv@sign,f,c
  7358  011820  8E11               	bsf	___fldiv@f1+2,7,c
  7359  011822  6A12               	clrf	___fldiv@f1+3,c
  7360  011824  8E15               	bsf	___fldiv@f2+2,7,c
  7361  011826  6A16               	clrf	___fldiv@f2+3,c
  7362  011828  0E20               	movlw	32
  7363  01182A  6E1F               	movwf	___fldiv@cntr,c
  7364  01182C                     i1l3139:
  7365  01182C  90D8               	bcf	status,0,c
  7366  01182E  361B               	rlcf	___fldiv@f3,f,c
  7367  011830  361C               	rlcf	___fldiv@f3+1,f,c
  7368  011832  361D               	rlcf	___fldiv@f3+2,f,c
  7369  011834  361E               	rlcf	___fldiv@f3+3,f,c
  7370  011836  5013               	movf	___fldiv@f2,w,c
  7371  011838  5C0F               	subwf	___fldiv@f1,w,c
  7372  01183A  5014               	movf	___fldiv@f2+1,w,c
  7373  01183C  5810               	subwfb	___fldiv@f1+1,w,c
  7374  01183E  5015               	movf	___fldiv@f2+2,w,c
  7375  011840  5811               	subwfb	___fldiv@f1+2,w,c
  7376  011842  5016               	movf	___fldiv@f2+3,w,c
  7377  011844  5812               	subwfb	___fldiv@f1+3,w,c
  7378  011846  E309               	bnc	i1l3147
  7379  011848  5013               	movf	___fldiv@f2,w,c
  7380  01184A  5E0F               	subwf	___fldiv@f1,f,c
  7381  01184C  5014               	movf	___fldiv@f2+1,w,c
  7382  01184E  5A10               	subwfb	___fldiv@f1+1,f,c
  7383  011850  5015               	movf	___fldiv@f2+2,w,c
  7384  011852  5A11               	subwfb	___fldiv@f1+2,f,c
  7385  011854  5016               	movf	___fldiv@f2+3,w,c
  7386  011856  5A12               	subwfb	___fldiv@f1+3,f,c
  7387  011858  801B               	bsf	___fldiv@f3,0,c
  7388  01185A                     i1l3147:
  7389  01185A  90D8               	bcf	status,0,c
  7390  01185C  360F               	rlcf	___fldiv@f1,f,c
  7391  01185E  3610               	rlcf	___fldiv@f1+1,f,c
  7392  011860  3611               	rlcf	___fldiv@f1+2,f,c
  7393  011862  3612               	rlcf	___fldiv@f1+3,f,c
  7394  011864  2E1F               	decfsz	___fldiv@cntr,f,c
  7395  011866  D7E2               	goto	i1l3139
  7396  011868  C01B  F001         	movff	___fldiv@f3,___flpack@arg
  7397  01186C  C01C  F002         	movff	___fldiv@f3+1,___flpack@arg+1
  7398  011870  C01D  F003         	movff	___fldiv@f3+2,___flpack@arg+2
  7399  011874  C01E  F004         	movff	___fldiv@f3+3,___flpack@arg+3
  7400  011878  C020  F005         	movff	___fldiv@exp,___flpack@exp
  7401  01187C  C021  F006         	movff	___fldiv@sign,___flpack@sign
  7402  011880  EC18  F08D         	call	___flpack	;wreg free
  7403  011884  C001  F00F         	movff	?___flpack,?___fldiv
  7404  011888  C002  F010         	movff	?___flpack+1,?___fldiv+1
  7405  01188C  C003  F011         	movff	?___flpack+2,?___fldiv+2
  7406  011890  C004  F012         	movff	?___flpack+3,?___fldiv+3
  7407  011894                     i1l673:
  7408  011894  0012               	return	
  7409  011896                     __end_of___fldiv:
  7410                           	opt stack 0
  7411                           tblptru	equ	0xFF8
  7412                           tblptrh	equ	0xFF7
  7413                           tblptrl	equ	0xFF6
  7414                           tablat	equ	0xFF5
  7415                           prodh	equ	0xFF4
  7416                           prodl	equ	0xFF3
  7417                           intcon	equ	0xFF2
  7418                           indf0	equ	0xFEF
  7419                           postinc0	equ	0xFEE
  7420                           fsr0h	equ	0xFEA
  7421                           fsr0l	equ	0xFE9
  7422                           wreg	equ	0xFE8
  7423                           postdec1	equ	0xFE5
  7424                           fsr1l	equ	0xFE1
  7425                           bsr	equ	0xFE0
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function ___flpack *****************
  7434 ;; Defined at:
  7435 ;;		line 63 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\double.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  arg             4    0[COMRAM] unsigned long 
  7438 ;;  exp             1    4[COMRAM] unsigned char 
  7439 ;;  sign            1    5[COMRAM] unsigned char 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;		None
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  4    0[COMRAM] unsigned char 
  7444 ;; Registers used:
  7445 ;;		wreg, status,2, status,0
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7451 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7453 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7454 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7455 ;;Total ram usage:       10 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    2
  7458 ;; This function calls:
  7459 ;;		Nothing
  7460 ;; This function is called by:
  7461 ;;		___fladd
  7462 ;;		___fldiv
  7463 ;;		___flmul
  7464 ;;		___lltofl
  7465 ;;		___lwtofl
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text27
  7470  011A30                     __ptext27:
  7471                           	opt stack 0
  7472  011A30                     ___flpack:
  7473                           	opt stack 23
  7474                           
  7475                           ;incstack = 0
  7476  011A30  5005               	movf	___flpack@exp,w,c
  7477  011A32  E005               	bz	i1l622
  7478  011A34  5004               	movf	___flpack@arg+3,w,c
  7479  011A36  1001               	iorwf	___flpack@arg,w,c
  7480  011A38  1002               	iorwf	___flpack@arg+1,w,c
  7481  011A3A  1003               	iorwf	___flpack@arg+2,w,c
  7482  011A3C  E10B               	bnz	i1l2239
  7483  011A3E                     i1l622:
  7484  011A3E  6A01               	clrf	?___flpack,c
  7485  011A40  6A02               	clrf	?___flpack+1,c
  7486  011A42  6A03               	clrf	?___flpack+2,c
  7487  011A44  6A04               	clrf	?___flpack+3,c
  7488  011A46  D053               	goto	i1l623
  7489  011A48                     i1l2237:
  7490  011A48  2A05               	incf	___flpack@exp,f,c
  7491  011A4A  90D8               	bcf	status,0,c
  7492  011A4C  3204               	rrcf	___flpack@arg+3,f,c
  7493  011A4E  3203               	rrcf	___flpack@arg+2,f,c
  7494  011A50  3202               	rrcf	___flpack@arg+1,f,c
  7495  011A52  3201               	rrcf	___flpack@arg,f,c
  7496  011A54                     i1l2239:
  7497  011A54  6A07               	clrf	??___flpack& (0+255),c
  7498  011A56  6A08               	clrf	(??___flpack+1)& (0+255),c
  7499  011A58  6A09               	clrf	(??___flpack+2)& (0+255),c
  7500  011A5A  0EFE               	movlw	254
  7501  011A5C  1404               	andwf	___flpack@arg+3,w,c
  7502  011A5E  6E0A               	movwf	(??___flpack+3)& (0+255),c
  7503  011A60  500A               	movf	??___flpack+3,w,c
  7504  011A62  1007               	iorwf	??___flpack,w,c
  7505  011A64  1008               	iorwf	??___flpack+1,w,c
  7506  011A66  1009               	iorwf	??___flpack+2,w,c
  7507  011A68  E00C               	bz	i1l627
  7508  011A6A  D7EE               	goto	i1l2237
  7509  011A6C                     i1l2241:
  7510  011A6C  2A05               	incf	___flpack@exp,f,c
  7511  011A6E  2A01               	incf	___flpack@arg,f,c
  7512  011A70  0E00               	movlw	0
  7513  011A72  2202               	addwfc	___flpack@arg+1,f,c
  7514  011A74  2203               	addwfc	___flpack@arg+2,f,c
  7515  011A76  2204               	addwfc	___flpack@arg+3,f,c
  7516  011A78  90D8               	bcf	status,0,c
  7517  011A7A  3204               	rrcf	___flpack@arg+3,f,c
  7518  011A7C  3203               	rrcf	___flpack@arg+2,f,c
  7519  011A7E  3202               	rrcf	___flpack@arg+1,f,c
  7520  011A80  3201               	rrcf	___flpack@arg,f,c
  7521  011A82                     i1l627:
  7522  011A82  6A07               	clrf	??___flpack& (0+255),c
  7523  011A84  6A08               	clrf	(??___flpack+1)& (0+255),c
  7524  011A86  6A09               	clrf	(??___flpack+2)& (0+255),c
  7525  011A88  5004               	movf	___flpack@arg+3,w,c
  7526  011A8A  6E0A               	movwf	(??___flpack+3)& (0+255),c
  7527  011A8C  500A               	movf	??___flpack+3,w,c
  7528  011A8E  1007               	iorwf	??___flpack,w,c
  7529  011A90  1008               	iorwf	??___flpack+1,w,c
  7530  011A92  1009               	iorwf	??___flpack+2,w,c
  7531  011A94  E007               	bz	i1l2249
  7532  011A96  D7EA               	goto	i1l2241
  7533  011A98                     i1l2247:
  7534  011A98  0605               	decf	___flpack@exp,f,c
  7535  011A9A  90D8               	bcf	status,0,c
  7536  011A9C  3601               	rlcf	___flpack@arg,f,c
  7537  011A9E  3602               	rlcf	___flpack@arg+1,f,c
  7538  011AA0  3603               	rlcf	___flpack@arg+2,f,c
  7539  011AA2  3604               	rlcf	___flpack@arg+3,f,c
  7540  011AA4                     i1l2249:
  7541  011AA4  AE03               	btfss	___flpack@arg+2,7,c
  7542  011AA6  D7F8               	goto	i1l2247
  7543  011AA8  B005               	btfsc	___flpack@exp,0,c
  7544  011AAA  D002               	goto	i1l633
  7545  011AAC  0E7F               	movlw	127
  7546  011AAE  1603               	andwf	___flpack@arg+2,f,c
  7547  011AB0                     i1l633:
  7548  011AB0  90D8               	bcf	status,0,c
  7549  011AB2  3205               	rrcf	___flpack@exp,f,c
  7550  011AB4  C005  F007         	movff	___flpack@exp,??___flpack
  7551  011AB8  6A08               	clrf	(??___flpack+1)& (0+255),c
  7552  011ABA  6A09               	clrf	(??___flpack+2)& (0+255),c
  7553  011ABC  6A0A               	clrf	(??___flpack+3)& (0+255),c
  7554  011ABE  C007  F00A         	movff	??___flpack,??___flpack+3
  7555  011AC2  6A09               	clrf	??___flpack+2,c
  7556  011AC4  6A08               	clrf	??___flpack+1,c
  7557  011AC6  6A07               	clrf	??___flpack,c
  7558  011AC8  5007               	movf	??___flpack,w,c
  7559  011ACA  1201               	iorwf	___flpack@arg,f,c
  7560  011ACC  5008               	movf	??___flpack+1,w,c
  7561  011ACE  1202               	iorwf	___flpack@arg+1,f,c
  7562  011AD0  5009               	movf	??___flpack+2,w,c
  7563  011AD2  1203               	iorwf	___flpack@arg+2,f,c
  7564  011AD4  500A               	movf	??___flpack+3,w,c
  7565  011AD6  1204               	iorwf	___flpack@arg+3,f,c
  7566  011AD8  5006               	movf	___flpack@sign,w,c
  7567  011ADA  A4D8               	btfss	status,2,c
  7568  011ADC  8E04               	bsf	___flpack@arg+3,7,c
  7569  011ADE  C001  F001         	movff	___flpack@arg,?___flpack
  7570  011AE2  C002  F002         	movff	___flpack@arg+1,?___flpack+1
  7571  011AE6  C003  F003         	movff	___flpack@arg+2,?___flpack+2
  7572  011AEA  C004  F004         	movff	___flpack@arg+3,?___flpack+3
  7573  011AEE                     i1l623:
  7574  011AEE  0012               	return	
  7575  011AF0                     __end_of___flpack:
  7576                           	opt stack 0
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           indf0	equ	0xFEF
  7585                           postinc0	equ	0xFEE
  7586                           fsr0h	equ	0xFEA
  7587                           fsr0l	equ	0xFE9
  7588                           wreg	equ	0xFE8
  7589                           postdec1	equ	0xFE5
  7590                           fsr1l	equ	0xFE1
  7591                           bsr	equ	0xFE0
  7592                           indf2	equ	0xFDF
  7593                           postinc2	equ	0xFDE
  7594                           postdec2	equ	0xFDD
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _UpdatePins *****************
  7600 ;; Defined at:
  7601 ;;		line 70 in file "keyboard_test.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;		None
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;  i               1    3[COMRAM] unsigned char 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;		None               void
  7608 ;; Registers used:
  7609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : F/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7616 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7617 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7618 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7619 ;;Total ram usage:        4 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    2
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		_LISR
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text28
  7630  011598                     __ptext28:
  7631                           	opt stack 0
  7632  011598                     _UpdatePins:
  7633                           	opt stack 26
  7634                           
  7635                           ;keyboard_test.c: 71: static PIN_T *LastPin = Pin;
  7636                           ;keyboard_test.c: 72: static uint8_t pin = 0;
  7637                           ;keyboard_test.c: 74: for(uint8_t i = 0; i < 14; ++i){
  7638                           
  7639                           ;incstack = 0
  7640  011598  6A04               	clrf	UpdatePins@i,c
  7641  01159A                     i1l2861:
  7642                           
  7643                           ;keyboard_test.c: 75: AdcChData[i] = 0;
  7644  01159A  5004               	movf	UpdatePins@i,w,c
  7645  01159C  0100               	movlb	0	; () banked
  7646  01159E  0F7C               	addlw	low _AdcChData
  7647  0115A0  6ED9               	movwf	fsr2l,c
  7648  0115A2  6ADA               	clrf	fsr2h,c
  7649  0115A4  6ADF               	clrf	indf2,c
  7650                           
  7651                           ; BSR set to: 0
  7652  0115A6  2A04               	incf	UpdatePins@i,f,c
  7653                           
  7654                           ; BSR set to: 0
  7655  0115A8  0E0D               	movlw	13
  7656  0115AA  6404               	cpfsgt	UpdatePins@i,c
  7657  0115AC  D7F6               	goto	i1l2861
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;keyboard_test.c: 76: }
  7661                           ;keyboard_test.c: 78: if(++pin == 14){
  7662  0115AE  2B98               	incf	UpdatePins@pin& (0+255),f,b
  7663  0115B0  5198               	movf	UpdatePins@pin& (0+255),w,b
  7664  0115B2  0A0E               	xorlw	14
  7665  0115B4  B4D8               	btfsc	status,2,c
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;keyboard_test.c: 79: pin = 0;
  7669  0115B6  6B98               	clrf	UpdatePins@pin& (0+255),b
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;keyboard_test.c: 80: }
  7673                           ;keyboard_test.c: 82: *LastPin->Tris |= LastPin->Val;
  7674  0115B8  0E04               	movlw	4
  7675  0115BA  25EA               	addwf	UpdatePins@LastPin& (0+255),w,b
  7676  0115BC  6E01               	movwf	??_UpdatePins& (0+255),c
  7677  0115BE  0E00               	movlw	0
  7678  0115C0  21EB               	addwfc	(UpdatePins@LastPin+1)& (0+255),w,b
  7679  0115C2  6E02               	movwf	(??_UpdatePins+1)& (0+255),c
  7680  0115C4  C001  FFF6         	movff	??_UpdatePins,tblptrl
  7681  0115C8  C002  FFF7         	movff	??_UpdatePins+1,tblptrh
  7682  0115CC                     	if	0	;tblptru may be non-zero
  7683  0115CC                     	endif
  7684  0115CC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7685  0115CC  0E00               	movlw	low (__mediumconst shr (0+16))
  7686  0115CE  6EF8               	movwf	tblptru,c
  7687  0115D0                     	endif
  7688  0115D0  0008               	tblrd		*
  7689  0115D2  CFF5 F003          	movff	tablat,??_UpdatePins+2
  7690  0115D6  C0EA  FFF6         	movff	UpdatePins@LastPin,tblptrl
  7691  0115DA  C0EB  FFF7         	movff	UpdatePins@LastPin+1,tblptrh
  7692  0115DE                     	if	0	;tblptru may be non-zero
  7693  0115DE                     	endif
  7694  0115DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7695  0115DE                     	endif
  7696  0115DE  0009               	tblrd		*+
  7697  0115E0  CFF5 FFD9          	movff	tablat,fsr2l
  7698  0115E4  0009               	tblrd		*+
  7699  0115E6  CFF5 FFDA          	movff	tablat,fsr2h
  7700  0115EA  5003               	movf	??_UpdatePins+2,w,c
  7701  0115EC  12DF               	iorwf	indf2,f,c
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;keyboard_test.c: 84: *Pin[pin].Port |= Pin[pin].Val;
  7705  0115EE  5198               	movf	UpdatePins@pin& (0+255),w,b
  7706  0115F0  0D06               	mullw	6
  7707  0115F2  0E04               	movlw	4
  7708  0115F4  26F3               	addwf	prodl,f,c
  7709  0115F6  0E00               	movlw	0
  7710  0115F8  22F4               	addwfc	prodh,f,c
  7711  0115FA  0E63               	movlw	low _Pin
  7712  0115FC  24F3               	addwf	prodl,w,c
  7713  0115FE  6EF6               	movwf	tblptrl,c
  7714  011600  0EFF               	movlw	high _Pin
  7715  011602  20F4               	addwfc	prodh,w,c
  7716  011604  6EF7               	movwf	tblptrh,c
  7717  011606                     	if	1	;There are 3 active tblptr bytes
  7718  011606  6AF8               	clrf	tblptru,c
  7719  011608  0E00               	movlw	low (__mediumconst shr (0+16))
  7720  01160A  22F8               	addwfc	tblptru,f,c
  7721  01160C                     	endif
  7722  01160C  0008               	tblrd		*
  7723  01160E  CFF5 F001          	movff	tablat,??_UpdatePins
  7724  011612  5198               	movf	UpdatePins@pin& (0+255),w,b
  7725  011614  0D06               	mullw	6
  7726  011616  0E02               	movlw	2
  7727  011618  26F3               	addwf	prodl,f,c
  7728  01161A  0E00               	movlw	0
  7729  01161C  22F4               	addwfc	prodh,f,c
  7730  01161E  0E63               	movlw	low _Pin
  7731  011620  24F3               	addwf	prodl,w,c
  7732  011622  6EF6               	movwf	tblptrl,c
  7733  011624  0EFF               	movlw	high _Pin
  7734  011626  20F4               	addwfc	prodh,w,c
  7735  011628  6EF7               	movwf	tblptrh,c
  7736  01162A                     	if	1	;There are 3 active tblptr bytes
  7737  01162A  6AF8               	clrf	tblptru,c
  7738  01162C  0E00               	movlw	low (__mediumconst shr (0+16))
  7739  01162E  22F8               	addwfc	tblptru,f,c
  7740  011630                     	endif
  7741  011630  0009               	tblrd		*+
  7742  011632  CFF5 FFD9          	movff	tablat,fsr2l
  7743  011636  0009               	tblrd		*+
  7744  011638  CFF5 FFDA          	movff	tablat,fsr2h
  7745  01163C  5001               	movf	??_UpdatePins,w,c
  7746  01163E  12DF               	iorwf	indf2,f,c
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;keyboard_test.c: 85: *Pin[pin].Tris &= ~Pin[pin].Val;
  7750  011640  5198               	movf	UpdatePins@pin& (0+255),w,b
  7751  011642  0D06               	mullw	6
  7752  011644  0E04               	movlw	4
  7753  011646  26F3               	addwf	prodl,f,c
  7754  011648  0E00               	movlw	0
  7755  01164A  22F4               	addwfc	prodh,f,c
  7756  01164C  0E63               	movlw	low _Pin
  7757  01164E  24F3               	addwf	prodl,w,c
  7758  011650  6EF6               	movwf	tblptrl,c
  7759  011652  0EFF               	movlw	high _Pin
  7760  011654  20F4               	addwfc	prodh,w,c
  7761  011656  6EF7               	movwf	tblptrh,c
  7762  011658                     	if	1	;There are 3 active tblptr bytes
  7763  011658  6AF8               	clrf	tblptru,c
  7764  01165A  0E00               	movlw	low (__mediumconst shr (0+16))
  7765  01165C  22F8               	addwfc	tblptru,f,c
  7766  01165E                     	endif
  7767  01165E  0008               	tblrd		*
  7768  011660  1CF5               	comf	tablat,w,c
  7769  011662  6E01               	movwf	??_UpdatePins& (0+255),c
  7770  011664  5198               	movf	UpdatePins@pin& (0+255),w,b
  7771  011666  0D06               	mullw	6
  7772  011668  0E63               	movlw	low _Pin
  7773  01166A  24F3               	addwf	prodl,w,c
  7774  01166C  6EF6               	movwf	tblptrl,c
  7775  01166E  0EFF               	movlw	high _Pin
  7776  011670  20F4               	addwfc	prodh,w,c
  7777  011672  6EF7               	movwf	tblptrh,c
  7778  011674                     	if	1	;There are 3 active tblptr bytes
  7779  011674  6AF8               	clrf	tblptru,c
  7780  011676  0E00               	movlw	low (__mediumconst shr (0+16))
  7781  011678  22F8               	addwfc	tblptru,f,c
  7782  01167A                     	endif
  7783  01167A  0009               	tblrd		*+
  7784  01167C  CFF5 FFD9          	movff	tablat,fsr2l
  7785  011680  0009               	tblrd		*+
  7786  011682  CFF5 FFDA          	movff	tablat,fsr2h
  7787  011686  5001               	movf	??_UpdatePins,w,c
  7788  011688  16DF               	andwf	indf2,f,c
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;keyboard_test.c: 87: LastPin = &Pin[pin];
  7792  01168A  5198               	movf	UpdatePins@pin& (0+255),w,b
  7793  01168C  0D06               	mullw	6
  7794  01168E  0E63               	movlw	low _Pin
  7795  011690  6E01               	movwf	??_UpdatePins& (0+255),c
  7796  011692  0EFF               	movlw	high _Pin
  7797  011694  6E02               	movwf	(??_UpdatePins+1)& (0+255),c
  7798  011696  50F3               	movf	prodl,w,c
  7799  011698  2601               	addwf	??_UpdatePins,f,c
  7800  01169A  50F4               	movf	prodh,w,c
  7801  01169C  2202               	addwfc	??_UpdatePins+1,f,c
  7802  01169E  C001  F0EA         	movff	??_UpdatePins,UpdatePins@LastPin
  7803  0116A2  C002  F0EB         	movff	??_UpdatePins+1,UpdatePins@LastPin+1
  7804                           
  7805                           ; BSR set to: 0
  7806  0116A6  0012               	return	
  7807  0116A8                     __end_of_UpdatePins:
  7808                           	opt stack 0
  7809                           tblptru	equ	0xFF8
  7810                           tblptrh	equ	0xFF7
  7811                           tblptrl	equ	0xFF6
  7812                           tablat	equ	0xFF5
  7813                           prodh	equ	0xFF4
  7814                           prodl	equ	0xFF3
  7815                           intcon	equ	0xFF2
  7816                           indf0	equ	0xFEF
  7817                           postinc0	equ	0xFEE
  7818                           fsr0h	equ	0xFEA
  7819                           fsr0l	equ	0xFE9
  7820                           wreg	equ	0xFE8
  7821                           postdec1	equ	0xFE5
  7822                           fsr1l	equ	0xFE1
  7823                           bsr	equ	0xFE0
  7824                           indf2	equ	0xFDF
  7825                           postinc2	equ	0xFDE
  7826                           postdec2	equ	0xFDD
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _UpdateLedColor *****************
  7832 ;; Defined at:
  7833 ;;		line 42 in file "led_display.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  color           1    wreg     unsigned char 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  color           1    0[COMRAM] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;		None               void
  7840 ;; Registers used:
  7841 ;;		wreg
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7851 ;;Total ram usage:        1 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    2
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		_LISR
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text29
  7862  011FAC                     __ptext29:
  7863                           	opt stack 0
  7864  011FAC                     _UpdateLedColor:
  7865                           	opt stack 26
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;incstack = 0
  7869                           ;UpdateLedColor@color stored from wreg
  7870  011FAC  6E01               	movwf	UpdateLedColor@color,c
  7871                           
  7872                           ;led_display.c: 43: Color = color;
  7873  011FAE  C001  F09C         	movff	UpdateLedColor@color,_Color
  7874  011FB2  0012               	return	
  7875  011FB4                     __end_of_UpdateLedColor:
  7876                           	opt stack 0
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           intcon	equ	0xFF2
  7884                           indf0	equ	0xFEF
  7885                           postinc0	equ	0xFEE
  7886                           fsr0h	equ	0xFEA
  7887                           fsr0l	equ	0xFE9
  7888                           wreg	equ	0xFE8
  7889                           postdec1	equ	0xFE5
  7890                           fsr1l	equ	0xFE1
  7891                           bsr	equ	0xFE0
  7892                           indf2	equ	0xFDF
  7893                           postinc2	equ	0xFDE
  7894                           postdec2	equ	0xFDD
  7895                           fsr2h	equ	0xFDA
  7896                           fsr2l	equ	0xFD9
  7897                           status	equ	0xFD8
  7898                           
  7899 ;; *************** function _HISR *****************
  7900 ;; Defined at:
  7901 ;;		line 3 in file "interrupt.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;		None
  7906 ;; Return value:  Size  Location     Type
  7907 ;;		None               void
  7908 ;; Registers used:
  7909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7917 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7918 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7919 ;;Total ram usage:        6 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    1
  7922 ;; This function calls:
  7923 ;;		_UpdateLedDisplay
  7924 ;; This function is called by:
  7925 ;;		Interrupt level 2
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           	psect	intcode
  7930  000008                     __pintcode:
  7931                           	opt stack 0
  7932  000008                     _HISR:
  7933                           	opt stack 23
  7934                           
  7935                           ;incstack = 0
  7936  000008  CFD9 F108          	movff	fsr2l,??_HISR
  7937  00000C  CFDA F109          	movff	fsr2h,??_HISR+1
  7938  000010  CFF6 F10A          	movff	tblptrl,??_HISR+2
  7939  000014  EFED  F08E         	goto	int_func
  7940                           tblptru	equ	0xFF8
  7941                           tblptrh	equ	0xFF7
  7942                           tblptrl	equ	0xFF6
  7943                           tablat	equ	0xFF5
  7944                           prodh	equ	0xFF4
  7945                           prodl	equ	0xFF3
  7946                           intcon	equ	0xFF2
  7947                           indf0	equ	0xFEF
  7948                           postinc0	equ	0xFEE
  7949                           fsr0h	equ	0xFEA
  7950                           fsr0l	equ	0xFE9
  7951                           wreg	equ	0xFE8
  7952                           postdec1	equ	0xFE5
  7953                           fsr1l	equ	0xFE1
  7954                           bsr	equ	0xFE0
  7955                           indf2	equ	0xFDF
  7956                           postinc2	equ	0xFDE
  7957                           postdec2	equ	0xFDD
  7958                           fsr2h	equ	0xFDA
  7959                           fsr2l	equ	0xFD9
  7960                           status	equ	0xFD8
  7961                           
  7962                           	psect	intcode_body
  7963  011DDA                     __pintcode_body:
  7964                           	opt stack 23
  7965  011DDA                     int_func:
  7966                           	opt stack 23
  7967  011DDA  CFF7 F10B          	movff	tblptrh,??_HISR+3
  7968  011DDE  CFF8 F10C          	movff	tblptru,??_HISR+4
  7969  011DE2  CFF5 F10D          	movff	tablat,??_HISR+5
  7970                           
  7971                           ;interrupt.c: 4: if(TMR4IF && TMR4IE){
  7972  011DE6  B6A4               	btfsc	4004,3,c	;volatile
  7973  011DE8  A6A3               	btfss	4003,3,c	;volatile
  7974  011DEA  D00C               	goto	i2l211
  7975                           
  7976                           ;interrupt.c: 5: TMR4IF = 0;
  7977  011DEC  96A4               	bcf	4004,3,c	;volatile
  7978                           
  7979                           ;interrupt.c: 6: if(UpdateLedDisplay(PR4)){
  7980  011DEE  5077               	movf	3959,w,c	;volatile
  7981  011DF0  ECAE  F089         	call	_UpdateLedDisplay
  7982  011DF4  0900               	iorlw	0
  7983  011DF6  E005               	bz	i2l3545
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;interrupt.c: 7: PR4 <<= 1;
  7987  011DF8  90D8               	bcf	status,0,c
  7988  011DFA  3677               	rlcf	3959,f,c
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;interrupt.c: 8: if(!PR4){
  7992                           
  7993                           ;volatile
  7994  011DFC  6677               	tstfsz	3959,c	;volatile
  7995  011DFE  D001               	goto	i2l3545
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;interrupt.c: 9: ++PR4;
  7999  011E00  2A77               	incf	3959,f,c	;volatile
  8000  011E02                     i2l3545:
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;interrupt.c: 10: }
  8004                           ;interrupt.c: 11: }
  8005                           ;interrupt.c: 12: TMR4 = 0;
  8006  011E02  6A78               	clrf	3960,c	;volatile
  8007  011E04                     i2l211:
  8008  011E04  C10D  FFF5         	movff	??_HISR+5,tablat
  8009  011E08  C10C  FFF8         	movff	??_HISR+4,tblptru
  8010  011E0C  C10B  FFF7         	movff	??_HISR+3,tblptrh
  8011  011E10  C10A  FFF6         	movff	??_HISR+2,tblptrl
  8012  011E14  C109  FFDA         	movff	??_HISR+1,fsr2h
  8013  011E18  C108  FFD9         	movff	??_HISR,fsr2l
  8014  011E1C  0011               	retfie		f
  8015  011E1E                     __end_of_HISR:
  8016                           	opt stack 0
  8017                           tblptru	equ	0xFF8
  8018                           tblptrh	equ	0xFF7
  8019                           tblptrl	equ	0xFF6
  8020                           tablat	equ	0xFF5
  8021                           prodh	equ	0xFF4
  8022                           prodl	equ	0xFF3
  8023                           intcon	equ	0xFF2
  8024                           indf0	equ	0xFEF
  8025                           postinc0	equ	0xFEE
  8026                           fsr0h	equ	0xFEA
  8027                           fsr0l	equ	0xFE9
  8028                           wreg	equ	0xFE8
  8029                           postdec1	equ	0xFE5
  8030                           fsr1l	equ	0xFE1
  8031                           bsr	equ	0xFE0
  8032                           indf2	equ	0xFDF
  8033                           postinc2	equ	0xFDE
  8034                           postdec2	equ	0xFDD
  8035                           fsr2h	equ	0xFDA
  8036                           fsr2l	equ	0xFD9
  8037                           status	equ	0xFD8
  8038                           
  8039 ;; *************** function _UpdateLedDisplay *****************
  8040 ;; Defined at:
  8041 ;;		line 84 in file "led_display.c"
  8042 ;; Parameters:    Size  Location     Type
  8043 ;;  flag            1    wreg     unsigned char 
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;  flag            1    7[BANK1 ] unsigned char 
  8046 ;;  Pos             5    2[BANK1 ] const unsigned char [5]
  8047 ;; Return value:  Size  Location     Type
  8048 ;;                  1    wreg      unsigned char 
  8049 ;; Registers used:
  8050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8051 ;; Tracked objects:
  8052 ;;		On entry : 0/0
  8053 ;;		On exit  : F/0
  8054 ;;		Unchanged: 0/0
  8055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8057 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8058 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8059 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8060 ;;Total ram usage:        8 bytes
  8061 ;; Hardware stack levels used:    1
  8062 ;; This function calls:
  8063 ;;		Nothing
  8064 ;; This function is called by:
  8065 ;;		_HISR
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text31
  8070  01135C                     __ptext31:
  8071                           	opt stack 0
  8072  01135C                     _UpdateLedDisplay:
  8073                           	opt stack 23
  8074                           
  8075                           ;incstack = 0
  8076                           ;UpdateLedDisplay@flag stored from wreg
  8077  01135C  0101               	movlb	1	; () banked
  8078  01135E  6F07               	movwf	UpdateLedDisplay@flag& (0+255),b
  8079                           
  8080                           ; BSR set to: 1
  8081                           ;led_display.c: 86: static uint8_t CounterCatode = 0;
  8082                           ;led_display.c: 87: static uint8_t CounterDataPos = 0;
  8083                           ;led_display.c: 89: const uint8_t Pos[] = {
  8084                           ;led_display.c: 90: 0x10,
  8085                           ;led_display.c: 91: 0x20,
  8086                           ;led_display.c: 92: 0x40,
  8087                           ;led_display.c: 93: 0x80,
  8088                           ;led_display.c: 94: 0
  8089                           ;led_display.c: 95: };
  8090  011360  0E5E               	movlw	low UpdateLedDisplay@F5284
  8091  011362  6EF6               	movwf	tblptrl,c
  8092  011364                     	if	1	;There is more than 1 active tblptr byte
  8093  011364  0EFF               	movlw	high UpdateLedDisplay@F5284
  8094  011366  6EF7               	movwf	tblptrh,c
  8095  011368                     	endif
  8096  011368                     	if	1	;There are 3 active tblptr bytes
  8097  011368  0E00               	movlw	low (UpdateLedDisplay@F5284 shr (0+16))
  8098  01136A  6EF8               	movwf	tblptru,c
  8099  01136C                     	endif
  8100  01136C  EE21  F002         	lfsr	2,UpdateLedDisplay@Pos
  8101  011370  0E05               	movlw	5
  8102  011372                     i2u385_40:
  8103  011372  0009               	tblrd		*+
  8104  011374  CFF5 FFDE          	movff	tablat,postinc2
  8105  011378  2EE8               	decfsz	wreg,f,c
  8106  01137A  D7FB               	bra	i2u385_40
  8107                           
  8108                           ; BSR set to: 1
  8109                           ;led_display.c: 97: flag &= Color;
  8110  01137C  0100               	movlb	0	; () banked
  8111  01137E  519C               	movf	_Color& (0+255),w,b
  8112  011380  0101               	movlb	1	; () banked
  8113  011382  1707               	andwf	UpdateLedDisplay@flag& (0+255),f,b
  8114                           
  8115                           ; BSR set to: 1
  8116                           ;led_display.c: 99: PORTE = 0x00;
  8117  011384  6A84               	clrf	3972,c	;volatile
  8118                           
  8119                           ; BSR set to: 1
  8120                           ;led_display.c: 100: PORTD = 0xFF;
  8121  011386  6883               	setf	3971,c	;volatile
  8122                           
  8123                           ; BSR set to: 1
  8124                           ;led_display.c: 102: PORTB &= ~(0x10 | 0x20 | 0x40 | 0x80);
  8125  011388  0E0F               	movlw	15
  8126  01138A  1681               	andwf	3969,f,c	;volatile
  8127                           
  8128                           ; BSR set to: 1
  8129                           ;led_display.c: 103: PORTB = Pos[CounterCatode];
  8130  01138C  0E02               	movlw	low UpdateLedDisplay@Pos
  8131  01138E  0100               	movlb	0	; () banked
  8132  011390  2596               	addwf	UpdateLedDisplay@CounterCatode& (0+255),w,b
  8133  011392  6ED9               	movwf	fsr2l,c
  8134  011394  6ADA               	clrf	fsr2h,c
  8135  011396  0E01               	movlw	high UpdateLedDisplay@Pos
  8136  011398  22DA               	addwfc	fsr2h,f,c
  8137  01139A  50DF               	movf	indf2,w,c
  8138  01139C  6E81               	movwf	3969,c	;volatile
  8139                           
  8140                           ; BSR set to: 1
  8141                           ;led_display.c: 105: if(Data[CounterDataPos + 1] == '.'){
  8142  01139E  5197               	movf	UpdateLedDisplay@CounterDataPos& (0+255),w,b
  8143  0113A0  0FE3               	addlw	low (_Data+1)
  8144  0113A2  6ED9               	movwf	fsr2l,c
  8145  0113A4  6ADA               	clrf	fsr2h,c
  8146  0113A6  0E2E               	movlw	46
  8147  0113A8  62DF               	cpfseq	indf2,c
  8148  0113AA  D034               	goto	i2l3469
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;led_display.c: 106: if(flag){
  8152  0113AC  0101               	movlb	1	; () banked
  8153  0113AE  5107               	movf	UpdateLedDisplay@flag& (0+255),w,b
  8154  0113B0  E017               	bz	i2l3465
  8155                           
  8156                           ; BSR set to: 1
  8157                           ;led_display.c: 107: PORTE = RedSeg[Data[CounterDataPos]] | 0x80;
  8158  0113B2  0100               	movlb	0	; () banked
  8159  0113B4  5197               	movf	UpdateLedDisplay@CounterDataPos& (0+255),w,b
  8160  0113B6  0FE2               	addlw	low _Data
  8161  0113B8  6ED9               	movwf	fsr2l,c
  8162  0113BA  6ADA               	clrf	fsr2h,c
  8163  0113BC  50DF               	movf	indf2,w,c
  8164  0113BE  0101               	movlb	1	; () banked
  8165  0113C0  6F00               	movwf	??_UpdateLedDisplay& (0+255),b
  8166  0113C2  6B01               	clrf	(??_UpdateLedDisplay+1)& (0+255),b
  8167  0113C4  0E50               	movlw	low _RedSeg
  8168  0113C6  2500               	addwf	??_UpdateLedDisplay& (0+255),w,b
  8169  0113C8  6EF6               	movwf	tblptrl,c
  8170  0113CA  0EFF               	movlw	high _RedSeg
  8171  0113CC  2101               	addwfc	(??_UpdateLedDisplay+1)& (0+255),w,b
  8172  0113CE  6EF7               	movwf	tblptrh,c
  8173  0113D0                     	if	1	;There are 3 active tblptr bytes
  8174  0113D0  6AF8               	clrf	tblptru,c
  8175  0113D2  0E00               	movlw	low (__mediumconst shr (0+16))
  8176  0113D4  22F8               	addwfc	tblptru,f,c
  8177  0113D6                     	endif
  8178  0113D6  0008               	tblrd		*
  8179  0113D8  50F5               	movf	tablat,w,c
  8180  0113DA  0980               	iorlw	128
  8181  0113DC  6E84               	movwf	3972,c	;volatile
  8182                           
  8183                           ;led_display.c: 108: } else{
  8184  0113DE  D017               	goto	i2l3467
  8185  0113E0                     i2l3465:
  8186                           
  8187                           ; BSR set to: 1
  8188                           ;led_display.c: 109: PORTD = ~(GreenSeg[Data[CounterDataPos]] | 0x80);
  8189  0113E0  0100               	movlb	0	; () banked
  8190  0113E2  5197               	movf	UpdateLedDisplay@CounterDataPos& (0+255),w,b
  8191  0113E4  0FE2               	addlw	low _Data
  8192  0113E6  6ED9               	movwf	fsr2l,c
  8193  0113E8  6ADA               	clrf	fsr2h,c
  8194  0113EA  50DF               	movf	indf2,w,c
  8195  0113EC  0101               	movlb	1	; () banked
  8196  0113EE  6F00               	movwf	??_UpdateLedDisplay& (0+255),b
  8197  0113F0  6B01               	clrf	(??_UpdateLedDisplay+1)& (0+255),b
  8198  0113F2  0E42               	movlw	low _GreenSeg
  8199  0113F4  2500               	addwf	??_UpdateLedDisplay& (0+255),w,b
  8200  0113F6  6EF6               	movwf	tblptrl,c
  8201  0113F8  0EFF               	movlw	high _GreenSeg
  8202  0113FA  2101               	addwfc	(??_UpdateLedDisplay+1)& (0+255),w,b
  8203  0113FC  6EF7               	movwf	tblptrh,c
  8204  0113FE                     	if	1	;There are 3 active tblptr bytes
  8205  0113FE  6AF8               	clrf	tblptru,c
  8206  011400  0E00               	movlw	low (__mediumconst shr (0+16))
  8207  011402  22F8               	addwfc	tblptru,f,c
  8208  011404                     	endif
  8209  011404  0008               	tblrd		*
  8210  011406  50F5               	movf	tablat,w,c
  8211  011408  0980               	iorlw	128
  8212  01140A  0AFF               	xorlw	255
  8213  01140C  6E83               	movwf	3971,c	;volatile
  8214  01140E                     i2l3467:
  8215                           
  8216                           ; BSR set to: 1
  8217                           ;led_display.c: 110: }
  8218                           ;led_display.c: 111: ++CounterDataPos;
  8219  01140E  0100               	movlb	0	; () banked
  8220  011410  2B97               	incf	UpdateLedDisplay@CounterDataPos& (0+255),f,b
  8221                           
  8222                           ;led_display.c: 112: } else{
  8223  011412  D02E               	goto	i2l3475
  8224  011414                     i2l3469:
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;led_display.c: 113: if(flag){
  8228  011414  0101               	movlb	1	; () banked
  8229  011416  5107               	movf	UpdateLedDisplay@flag& (0+255),w,b
  8230  011418  E016               	bz	i2l3473
  8231                           
  8232                           ; BSR set to: 1
  8233                           ;led_display.c: 114: PORTE = RedSeg[Data[CounterDataPos]];
  8234  01141A  0100               	movlb	0	; () banked
  8235  01141C  5197               	movf	UpdateLedDisplay@CounterDataPos& (0+255),w,b
  8236  01141E  0FE2               	addlw	low _Data
  8237  011420  6ED9               	movwf	fsr2l,c
  8238  011422  6ADA               	clrf	fsr2h,c
  8239  011424  50DF               	movf	indf2,w,c
  8240  011426  0101               	movlb	1	; () banked
  8241  011428  6F00               	movwf	??_UpdateLedDisplay& (0+255),b
  8242  01142A  6B01               	clrf	(??_UpdateLedDisplay+1)& (0+255),b
  8243  01142C  0E50               	movlw	low _RedSeg
  8244  01142E  2500               	addwf	??_UpdateLedDisplay& (0+255),w,b
  8245  011430  6EF6               	movwf	tblptrl,c
  8246  011432  0EFF               	movlw	high _RedSeg
  8247  011434  2101               	addwfc	(??_UpdateLedDisplay+1)& (0+255),w,b
  8248  011436  6EF7               	movwf	tblptrh,c
  8249  011438                     	if	1	;There are 3 active tblptr bytes
  8250  011438  6AF8               	clrf	tblptru,c
  8251  01143A  0E00               	movlw	low (__mediumconst shr (0+16))
  8252  01143C  22F8               	addwfc	tblptru,f,c
  8253  01143E                     	endif
  8254  01143E  0008               	tblrd		*
  8255  011440  CFF5 FF84          	movff	tablat,3972	;volatile
  8256                           
  8257                           ;led_display.c: 115: } else{
  8258  011444  D015               	goto	i2l3475
  8259  011446                     i2l3473:
  8260                           
  8261                           ; BSR set to: 1
  8262                           ;led_display.c: 116: PORTD = ~(GreenSeg[Data[CounterDataPos]]);
  8263  011446  0100               	movlb	0	; () banked
  8264  011448  5197               	movf	UpdateLedDisplay@CounterDataPos& (0+255),w,b
  8265  01144A  0FE2               	addlw	low _Data
  8266  01144C  6ED9               	movwf	fsr2l,c
  8267  01144E  6ADA               	clrf	fsr2h,c
  8268  011450  50DF               	movf	indf2,w,c
  8269  011452  0101               	movlb	1	; () banked
  8270  011454  6F00               	movwf	??_UpdateLedDisplay& (0+255),b
  8271  011456  6B01               	clrf	(??_UpdateLedDisplay+1)& (0+255),b
  8272  011458  0E42               	movlw	low _GreenSeg
  8273  01145A  2500               	addwf	??_UpdateLedDisplay& (0+255),w,b
  8274  01145C  6EF6               	movwf	tblptrl,c
  8275  01145E  0EFF               	movlw	high _GreenSeg
  8276  011460  2101               	addwfc	(??_UpdateLedDisplay+1)& (0+255),w,b
  8277  011462  6EF7               	movwf	tblptrh,c
  8278  011464                     	if	1	;There are 3 active tblptr bytes
  8279  011464  6AF8               	clrf	tblptru,c
  8280  011466  0E00               	movlw	low (__mediumconst shr (0+16))
  8281  011468  22F8               	addwfc	tblptru,f,c
  8282  01146A                     	endif
  8283  01146A  0008               	tblrd		*
  8284  01146C  1CF5               	comf	tablat,w,c
  8285  01146E  6E83               	movwf	3971,c	;volatile
  8286  011470                     i2l3475:
  8287                           
  8288                           ;led_display.c: 117: }
  8289                           ;led_display.c: 118: }
  8290                           ;led_display.c: 119: ++CounterDataPos;
  8291  011470  0100               	movlb	0	; () banked
  8292  011472  2B97               	incf	UpdateLedDisplay@CounterDataPos& (0+255),f,b
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;led_display.c: 121: if(CounterCatode == 4){
  8296  011474  5196               	movf	UpdateLedDisplay@CounterCatode& (0+255),w,b
  8297  011476  0A04               	xorlw	4
  8298  011478  E104               	bnz	i2l3487
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;led_display.c: 122: CounterCatode = 0;
  8302  01147A  6B96               	clrf	UpdateLedDisplay@CounterCatode& (0+255),b
  8303                           
  8304                           ;led_display.c: 123: CounterDataPos = 0;
  8305  01147C  6B97               	clrf	UpdateLedDisplay@CounterDataPos& (0+255),b
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;led_display.c: 124: return 1;
  8309  01147E  0E01               	movlw	1
  8310  011480  D002               	goto	i2l110
  8311  011482                     i2l3487:
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;led_display.c: 126: ++CounterCatode;
  8315  011482  2B96               	incf	UpdateLedDisplay@CounterCatode& (0+255),f,b
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;led_display.c: 127: }
  8319                           ;led_display.c: 129: return 0;
  8320  011484  0E00               	movlw	0
  8321  011486                     i2l110:
  8322                           
  8323                           ; BSR set to: 0
  8324  011486  0012               	return	
  8325  011488                     __end_of_UpdateLedDisplay:
  8326                           	opt stack 0
  8327                           tblptru	equ	0xFF8
  8328                           tblptrh	equ	0xFF7
  8329                           tblptrl	equ	0xFF6
  8330                           tablat	equ	0xFF5
  8331                           prodh	equ	0xFF4
  8332                           prodl	equ	0xFF3
  8333                           intcon	equ	0xFF2
  8334                           indf0	equ	0xFEF
  8335                           postinc0	equ	0xFEE
  8336                           fsr0h	equ	0xFEA
  8337                           fsr0l	equ	0xFE9
  8338                           wreg	equ	0xFE8
  8339                           postdec1	equ	0xFE5
  8340                           fsr1l	equ	0xFE1
  8341                           bsr	equ	0xFE0
  8342                           indf2	equ	0xFDF
  8343                           postinc2	equ	0xFDE
  8344                           postdec2	equ	0xFDD
  8345                           fsr2h	equ	0xFDA
  8346                           fsr2l	equ	0xFD9
  8347                           status	equ	0xFD8
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           indf0	equ	0xFEF
  8356                           postinc0	equ	0xFEE
  8357                           fsr0h	equ	0xFEA
  8358                           fsr0l	equ	0xFE9
  8359                           wreg	equ	0xFE8
  8360                           postdec1	equ	0xFE5
  8361                           fsr1l	equ	0xFE1
  8362                           bsr	equ	0xFE0
  8363                           indf2	equ	0xFDF
  8364                           postinc2	equ	0xFDE
  8365                           postdec2	equ	0xFDD
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370                           	psect	param1
  8371  0000                     tblptru	equ	0xFF8
  8372                           tblptrh	equ	0xFF7
  8373                           tblptrl	equ	0xFF6
  8374                           tablat	equ	0xFF5
  8375                           prodh	equ	0xFF4
  8376                           prodl	equ	0xFF3
  8377                           intcon	equ	0xFF2
  8378                           indf0	equ	0xFEF
  8379                           postinc0	equ	0xFEE
  8380                           fsr0h	equ	0xFEA
  8381                           fsr0l	equ	0xFE9
  8382                           wreg	equ	0xFE8
  8383                           postdec1	equ	0xFE5
  8384                           fsr1l	equ	0xFE1
  8385                           bsr	equ	0xFE0
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           fsr2h	equ	0xFDA
  8390                           fsr2l	equ	0xFD9
  8391                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    276
    Data        10
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     55     140
    BANK1           256     19      19
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_5(CODE[3]), STR_4(CODE[5]), STR_3(CODE[6]), STR_2(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> Buf(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S671$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    UpdatePins@LastPin.Port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTH(ABS[1]), PORTF(ABS[1]), PORTA(ABS[1]), 

    UpdatePins@LastPin.Tris	PTR unsigned char  size(2) Largest target is 1
		 -> TRISH(ABS[1]), TRISF(ABS[1]), TRISA(ABS[1]), 

    UpdatePins@LastPin	PTR struct . size(2) Largest target is 112
		 -> Pin(CODE[84]), 

    S466$Port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTH(ABS[1]), PORTF(ABS[1]), PORTA(ABS[1]), 

    Pin.Port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTH(ABS[1]), PORTF(ABS[1]), PORTA(ABS[1]), 

    S466$Tris	PTR unsigned char  size(2) Largest target is 1
		 -> TRISH(ABS[1]), TRISF(ABS[1]), TRISA(ABS[1]), 

    Pin.Tris	PTR unsigned char  size(2) Largest target is 1
		 -> TRISH(ABS[1]), TRISF(ABS[1]), TRISA(ABS[1]), 

    UpdateLedData@data	PTR unsigned char  size(2) Largest target is 10
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[5]), 
		 -> Buf(BANK0[10]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HISR in COMRAM

    None.

Critical Paths under _LISR in COMRAM

    _LISR->_sprintf
    _sprintf->___fltol
    _scale->___flmul
    ___awdiv->___awmod
    _fround->___flmul
    ___lbdiv->___lbmod
    ___flmul->___awdiv
    ___lltofl->___flpack
    ___llmod->___lldiv
    ___fltol->___fladd
    ___flsub->___fladd
    ___fladd->_fround
    ___lwtofl->___flpack
    ___fldiv->___lltofl
    ___fldiv->___lwtofl

Critical Paths under _main in BANK0

    None.

Critical Paths under _HISR in BANK0

    None.

Critical Paths under _LISR in BANK0

    _LISR->_sprintf

Critical Paths under _main in BANK1

    _main->_UpdateLedData

Critical Paths under _HISR in BANK1

    _HISR->_UpdateLedDisplay

Critical Paths under _LISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HISR in BANK2

    None.

Critical Paths under _LISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HISR in BANK3

    None.

Critical Paths under _LISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HISR in BANK4

    None.

Critical Paths under _LISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HISR in BANK5

    None.

Critical Paths under _LISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HISR in BANK6

    None.

Critical Paths under _LISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HISR in BANK7

    None.

Critical Paths under _LISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HISR in BANK8

    None.

Critical Paths under _LISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HISR in BANK9

    None.

Critical Paths under _LISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HISR in BANK10

    None.

Critical Paths under _LISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HISR in BANK11

    None.

Critical Paths under _LISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HISR in BANK12

    None.

Critical Paths under _LISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HISR in BANK13

    None.

Critical Paths under _LISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HISR in BANK14

    None.

Critical Paths under _LISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     800
                      _UpdateLedData
 ---------------------------------------------------------------------------------
 (1) _UpdateLedData                                        5     3      2     800
                                             14 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _LISR                                                25    25      0   53057
                                             87 COMRAM     8     8      0
                                             38 BANK0     17    17      0
                     _UpdateLedColor
                         _UpdatePins
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                           ___lltofl
                             ___lmul
                           ___lwtofl
                            _sprintf
                    i1_UpdateLedData
 ---------------------------------------------------------------------------------
 (3) i1_UpdateLedData                                      5     3      2     488
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             57    51      6   35118
                                             75 COMRAM    12     6      6
                                              0 BANK0     38    38      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                           ___lltofl
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               13     9      4    7312
                                             33 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1064
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1196
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              21    17      4    5559
                                             33 COMRAM    17    13      4
                            ___flmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (5) ___lbmod                                              4     3      1     351
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (5) ___lbdiv                                              4     3      1     354
                                              4 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             19    11      8    4563
                                             14 COMRAM    19    11      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___flpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         17     9      8     431
                                              0 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          18    10      8     431
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lltofl                                             4     0      4    2237
                                             10 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     549
                                             65 COMRAM    10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    3816
                                             65 COMRAM     8     0      8
                            ___fladd
                           ___lltofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             15     7      8    3541
                                             50 COMRAM    15     7      8
                            ___flmul (ARG)
                           ___flpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     109
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) ___flge                                               8     0      8    1160
                                              0 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (3) ___lwtofl                                             4     0      4    2173
                                             10 COMRAM     4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     450
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             19    11      8    2596
                                             14 COMRAM    19    11      8
                           ___flpack
                           ___lltofl (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flpack                                            10     4      6    2087
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _UpdatePins                                           4     4      0      68
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (3) _UpdateLedColor                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HISR                                                 6     6      0     102
                                              8 BANK1      6     6      0
                   _UpdateLedDisplay
 ---------------------------------------------------------------------------------
 (8) _UpdateLedDisplay                                     8     8      0     102
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UpdateLedData

 _LISR (ROOT)
   _UpdateLedColor
   _UpdatePins
   ___fladd
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___flpack (ARG)
     _fround (ARG)
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
   ___fldiv
     ___flpack
     ___lltofl (ARG)
       ___flpack
     ___lwtofl (ARG)
       ___flpack
   ___flge
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___flpack (ARG)
     ___lbdiv (ARG)
       ___lbmod (ARG)
     ___lbmod (ARG)
   ___fltol
     ___fladd (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___flpack (ARG)
       _fround (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
   ___lltofl
     ___flpack
   ___lmul
   ___lwtofl
     ___flpack
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___flpack (ARG)
       _fround (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___flpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___flpack (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___lltofl (ARG)
         ___flpack
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___flpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___flpack (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___flpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltofl
       ___flpack
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
   i1_UpdateLedData

 _HISR (ROOT)
   _UpdateLedDisplay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EFF      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     13      13       8        7.4%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     37      8C       6       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FE       3        0.0%
DATA                 0      0      FE       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jul 15 11:03:17 2016

               ??_UpdateLedData 0110                ??_UpdateLedColor 0001                               _i 00A0  
                  ___fldiv@cntr 001F                    ___fldiv@sign 0021                              l51 1CDE  
                            l92 11CC                              _U1 0092                              _U2 0094  
                  ___awdiv@sign 000C                     __CFG_BOR$ON 000000                              bsr 000FE0  
           ___wmul@multiplicand 0003               ?_UpdateLedDisplay 0001                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                    __CFG_CP4$OFF 000000                    __CFG_CP5$OFF 000000  
                  __CFG_CP6$OFF 000000                    ___flpack@arg 0001                    __CFG_CP7$OFF 000000  
                  ___flpack@exp 0005                             _GIE 007F97                    __CFG_CPB$OFF 000000  
                           _PR4 000F77                    __CFG_CPD$OFF 000000                             _Buf 00A1  
            ??_UpdateLedDisplay 0100                             _Pin FF63                             _Rez 008A  
                  __CFG_BORV$25 000000                    ___awmod@sign 0006                             wreg 000FE8  
                   _sprintf$684 00AF                    ___flmul@cntr 0020                    ___flmul@sign 0021  
                  __CFG_MODE$MC 000000                    __CFG_LVP$OFF 000000                   ___flpack@sign 0006  
                  ___fltol@exp1 004B                    __CFG_WDT$OFF 000000                            l3421 103E  
                          l3423 107A                            l3441 1118                            l3425 1088  
                          l3427 10C2                            l3443 1196                            l3429 10D2  
                          l3445 119A                            _ADIE 007CEE                            _ADIF 007CF6  
                          STR_1 FFE6                            STR_2 FFDF                            STR_3 FFE0  
                          STR_4 FFE1                            STR_5 FFFB                            STR_6 FFED  
                          STR_7 FFF2                            STR_8 FFF5                            STR_9 FFF8  
                          _HISR 0008                            u3800 10C0                            u3810 1110  
                          _PEIE 007F96                            u3820 1148                            u3830 11C8  
                          u3807 10B6                            u3817 1106                            u3827 113E  
                          u3837 11BE                            u3790 1076                            i1l92 135A  
                          _LISR 0018                            u3797 106C                            _TMR2 000FCC  
                          _TMR4 000F78                            _Data 00E2                            _Rez2 008E  
                  __CFG_STVR$ON 000000                            _main 1C7E                            fsr0h 000FEA  
                          indf0 000FEF                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                          prodh 000FF4                            prodl 000FF3                            start 05B8  
                  _sprintf$1215 00AB         __end_ofi1_UpdateLedData 135C                           ?_HISR 0001  
                         ?_LISR 0001                           LISR@U 005C                   __CFG_OSCS$OFF 000000  
                 __CFG_WAIT$OFF 000000                   ___fltol@sign1 004A                 __end_of___fladd 103A  
                         ?_main 0001                 __end_of___fldiv 1896                 __end_of___awdiv 1B84  
               __end_of___lbdiv 1E8C                 __end_of___flneg 1F86                           _ADRES 000FC3  
               __end_of___awmod 1C08                 __end_of___lbmod 1F3C                 __end_of___flmul 1598  
              i1UpdateLedData@i 0005                 __end_of___flsub 1E58                 __end_of___fltol 1A30  
                         _CREN1 007D5C                 __end_of___lldiv 1C7E                 ___awdiv@divisor 0009  
                         _T1CON 000FCD                 __end_of___llmod 1D42                           _T2CON 000FCA  
                         _RC1IF 007CF5                           i1l323 0C36                           i1l251 0294  
                         i1l252 028E                           i1l333 001C                           i2l110 1486  
                         i1l334 0090                           i1l408 1D96                           i1l272 0366  
                         i1l280 0582                           i2l211 1E04                           i1l622 1A3E  
                         i1l623 1AEE                           i1l375 0518                           i1l633 1AB0  
                         i1l641 0EF4                           i1l705 1596                           i1l642 1038  
                         i1l802 1916                           i1l627 1A82                           i1l645 0F1C  
                         i1l742 1A2E                           i1l656 0FB4                           i1l808 195C  
                         i1l673 1894                           i1l681 17AC                           i1l690 179C  
                         i1l698 1D6E                           i1l699 1D8C                           _OERR1 007D59  
                         i1l887 1C6C                           i1l799 196C                           i1l897 1D30  
               ___awdiv@counter 000B                      _BtnPressed 009B                           _TX1IF 007CF4  
                         _PORTA 000F80                           _PORTB 000F81                           _AdcCh 0099  
                         _PORTD 000F83                           _PORTE 000F84                           _PORTF 000F85  
                         _PORTH 000F87                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISD 000F95                           _TRISE 000F96                           _TRISF 000F97  
                         _TRISH 000F99                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                           _Color 009C                   __CFG_WRT2$OFF 000000  
           ___lmul@multiplicand 0005                   __CFG_WRT3$OFF 000000                   __CFG_WRT4$OFF 000000  
                 __CFG_WRT5$OFF 000000                   __CFG_WRT6$OFF 000000                   __CFG_WRT7$OFF 000000  
                __CFG_EBTR0$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                  __CFG_EBTR4$OFF 000000                  __CFG_EBTR5$OFF 000000  
                __CFG_EBTR6$OFF 000000                  __CFG_EBTR7$OFF 000000                __end_of_AdcChArr FF42  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                 __end_of_dpowers FFDF                           _scale 0826  
               __end_of_isdigit 1FA2                           tablat 000FF5                           status 000FD8  
               __end_of_sprintf 0826                 ___lbdiv@divisor 0005                 ___lbdiv@counter 0007  
                  __end_of_HISR 1E1E                    __end_of_LISR 05B8                 __initialization 1E8C  
                  __end_of_main 1CE0                __end_of_GreenSeg FF50                          ??_HISR 0108  
                        ??_LISR 00D1                          ??_main 0113                   __activetblptr 000003  
          __size_of__tdiv_to_l_ 00D8                 __CFG_CCP2MUX$ON 000000                          _ADCON0 000FC2  
                        _ADCON1 000FC1                          _ADCON2 000FC0                ___llmod@dividend 000E  
                        ?_scale 0022                __end_of___flpack 1AF0                ___awdiv@dividend 0007  
              __end_of___lltofl 1EEC                          i1l2301 0F82                          i1l3021 04F2  
                        i1l3005 0448                          i1l3013 04D6                          i1l3103 07EC  
                        i1l3015 04E0                          i1l2241 1A6C                          i1l2313 0FCA  
                        i1l3105 07FC                          i1l3123 17DA                          i1l3115 1DAA  
                        i1l2307 0FA2                          i1l2411 1B6E                          i1l3051 0684  
                        i1l3035 0538                          i1l3027 051C                          i1l3107 081A  
                        i1l2237 1A48                          i1l2325 100C                          i1l2317 0FE0  
                        i1l2309 0FAE                          i1l2333 14B4                          i1l2247 1A98  
                        i1l2239 1A54                          i1l3127 180E                          i1l2415 1B7A  
                        i1l2407 1B64                          i1l2431 1BBE                          i1l3039 0598  
                        i1l3311 02F0                          i1l2249 1AA4                          i1l2361 153E  
                        i1l2353 1522                          i1l2337 14E8                          i1l3057 0696  
                        i1l3049 067A                          i1l3161 11D2                          i1l3305 02C4  
                        i1l3147 185A                          i1l3139 182C                          i1l2275 0F2E  
                        i1l2611 1944                          i1l2451 1BFE                          i1l2443 1BE8  
                        i1l2435 1BCA                          i1l2427 1BA4                          i1l2531 0962  
                        i1l3091 0740                          i1l3083 070E                          i1l3075 06D6  
                        i1l3059 06A0                          i1l3163 120E                          i1l3323 030C  
                        i1l2269 0F06                          i1l2701 1998                          i1l2621 16D2  
                        i1l2365 1552                          i1l2349 150E                          i1l2461 1E66  
                        i1l2517 0E44                          i1l2509 0D7C                          i1l2437 1BD2  
                        i1l2541 0A1A                          i1l3069 06D2                          i1l3181 12AA  
                        i1l3165 121C                          i1l3317 02FC                          i1l3261 010A  
                        i1l2295 0F68                          i1l2703 19A2                          i1l2623 16DC  
                        i1l2615 194C                          i1l2607 1934                          i1l2383 1B10  
                        i1l2439 1BD6                          i1l2447 1BF2                          i1l3095 0754  
                        i1l3167 1256                          i1l3183 1326                          i1l3351 03CC  
                        i1l3343 0362                          i1l3335 0346                          i1l3319 02FE  
                        i1l3255 0094                          i1l2297 0F74                          i1l2289 0F48  
                        i1l2721 19F2                          i1l2617 1958                          i1l2473 1E80  
                        i1l2465 1E6C                          i1l2537 0A0C                          i1l3097 0758  
                        i1l3169 1266                          i1l3185 1328                          i1l3329 033A  
                        i1l3337 0348                          i1l3273 01D6                          i1l3265 014E  
                        i1l2299 0F7C                          i1l2627 1708                          i1l2467 1E70  
                        i1l2395 1B3E                          i1l2555 0C08                          i1l3371 0516  
                        i1l3363 04F8                          i1l3339 0350                          i1l3259 0104  
                        i1l2733 1A1E                          i1l2725 19FA                          i1l2717 19E2  
                        i1l2661 178C                          i1l2653 1774                          i1l2645 1754  
                        i1l2637 1726                          i1l2573 18AE                          i1l2477 1E88  
                        i1l2493 1F34                          i1l2485 1F1E                          i1l2397 1B46  
                        i1l2389 1B2E                          i1l2549 0B4E                          i1l2901 0098  
                        i1l3269 0192                          i1l3277 021A                          i1l3285 023A  
                        i1l2727 1A06                          i1l2743 1C20                          i1l2663 1798  
                        i1l2575 18B8                          i1l2567 1F9A                          i1l2399 1B4A  
                        i1l2903 009C                          i1l3383 0548                          i1l3359 047A  
                        i1l3391 057C                          i1l3279 0226                          i1l2681 1D58  
                        i1l2729 1A0A                          i1l2745 1C2C                          i1l2657 1784  
                        i1l2593 18F0                          i1l3377 0530                          i1l3393 0580  
                        i1l2755 1C5E                          i1l2747 1C30                          i1l2771 1D22  
                        i1l2763 1CF0                          i1l2579 18D2                          i1l2915 00DC  
                        i1l2907 00A2                          i1l2861 159A                          i1l2765 1CFC  
                        i1l2941 0198                          i1l2925 0122                          i1l2909 00CA  
                        i1l3389 0556                          i1l2687 1D8A                          i1l2695 1F74  
                        i1l2767 1D00                          i1l2953 0238                          i1l2881 0008  
                        i1l2981 0382                          i1l2965 02E6                          i1l2957 0286  
                        i1l2949 0210                          i1l2893 0040                          i1l2991 03F8  
                        i1l2985 03F4                          i1l2969 0312                          i1l2897 0078  
                        i1l2999 0430                          i2l3473 1446                          i2l3465 13E0  
                        i2l3545 1E02                          i2l3475 1470                          i2l3467 140E  
                        i2l3469 1414                          i2l3487 1482                          u251_21 18C8  
                        _RCREG1 000FAE                          u249_21 18A6                __end_of___lwtofl 1F16  
                        _RCSTA1 000FAB                          _SPBRG1 000FAF                          _TMR1IE 007CE8  
                        _TMR1IF 007CF0                          _TMR2IE 007CE9                  __CFG_WDTPS$128 000000  
                        _TMR2IF 007CF1                          _TMR4IE 007D1B                          _TMR4IF 007D23  
                        _TMR1ON 007E68                          _TMR2ON 007E52                          _TXREG1 000FAD  
                        _TXSTA1 000FAC                          _RedSeg FF50                __end_of__powers_ FF33  
                        ___flge 1D42                          ___lmul 1D8E                       ??___fladd 003B  
                        ___wmul 1F3C                       ??___fldiv 0017                       ??___awdiv 000B  
                     ??___lbdiv 0006                       ??___flneg 0005                       ??___awmod 0005  
                     ??___lbmod 0002                       ??___flmul 0017                       ??___flsub 004A  
                     ??___fltol 0046                       ??___lldiv 0009                       ??___llmod 0016  
                   _ErrCounterX 009D                     _ErrCounterY 009E                ?i1_UpdateLedData 0001  
                        _fround 0C38                          clear_0 1E92                ___awdiv@quotient 000D  
               ___awmod@divisor 0003                 ___awmod@counter 0005                       ??_isdigit 0001  
                    _UpdatePins 1598                    __mediumconst FECA                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                       ??_sprintf 0052  
              ___lbdiv@dividend 0006                      ___fladd@f1 0033                      ___fladd@f2 0037  
                    ___flge@ff1 0001                      ___flge@ff2 0005                 ___lbmod@divisor 0001  
                    ___fldiv@f1 000F                      ___fldiv@f2 0013                      ___fldiv@f3 001B  
                    __accesstop 0060         __end_of__initialization 1EB8                 ___lbmod@counter 0003  
                    ___flneg@f1 0001                      ___flmul@f1 000F                      ___flmul@f2 0013  
                    ___flsub@f1 0042                      ___flsub@f2 0046                      ___fltol@f1 0042  
                  _BlinkCounter 009A                  __pcstackCOMRAM 0001                    __pidataBANK0 1FA2  
                    ___lltofl@c 000B                   __end_of_scale 0C38                ___lbdiv@quotient 0008  
                    ___lwtofl@c 000B                      __div_to_l_ 16A8                 __div_to_l_@exp1 0012  
               __div_to_l_@cntr 0011                    sprintf@integ 00BE                         ??_scale 0026  
               __div_to_l_@quot 000D                      __pbssBANK0 0060       __size_of_UpdateLedDisplay 012C  
                 __div_to_l_@f1 0001                   __div_to_l_@f2 0005               UpdateLedData@data 010E  
                       ?___flge 0001                         ?___lmul 0001                         ?___wmul 0001  
         __end_of_UpdateLedData 11CE                       ?___flpack 0001                         ?_fround 0022  
                ___lmul@product 0009                       ?___lltofl 000B                       ?___lwtofl 000B  
                   ?_UpdatePins 0001                         _GO_DONE 007E11                     _PresCounter 009F  
             __end_of__npowers_ FEFF                         __Hparam 0000                      _scale$1214 0026  
                       __Lparam 0000                 __size_of___flge 004C                         ___fladd 0E92  
                       ___fldiv 17AE                         ___awdiv 1AF0                         ___lbdiv 1E58  
                       ___flneg 1F62                 __size_of___lmul 004C                         ___awmod 1B84  
                       ___lbmod 1F16                         ___flmul 1488                         ___flsub 1E1E  
                       ___fltol 196E                         ___lldiv 1C08                 __size_of___wmul 0026  
                       ___llmod 1CE0                      ??___flpack 0007                         __pcinit 1E8C  
               __size_of_fround 025A                         __ramtop 0F00                      ??___lltofl 000F  
                       __ptext0 1C7E                         __ptext1 103A                         __ptext3 11CE  
                       __ptext4 0000                         __ptext5 0826                         __ptext6 1B84  
                       __ptext7 1AF0                         __ptext8 1F86                         __ptext9 0C38  
                    ??___lwtofl 000F                     ?__div_to_l_ 0001                         _dpowers FFB7  
                     _T2CONbits 000FCA                         _isdigit 1F86                ___awmod@dividend 0001  
                     _T4CONbits 000F76         __size_of_UpdateLedColor 0008                       _LISR$1211 0058  
                       _sprintf 0000                  __pintcode_body 1DDA            end_of_initialization 1EB8  
                       int_func 1DDA                 ___lldiv@divisor 0005                 ___lldiv@counter 000D  
           __size_of_UpdatePins 0110                         postdec1 000FE5                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE             UpdateLedColor@color 0001  
                __tdiv_to_l_@f1 0001                  __tdiv_to_l_@f2 0005                     UpdatePins@i 0004  
                     _AdcChData 007C                   ??__tdiv_to_l_ 0009             UpdateLedDisplay@Pos 0102  
              ___lbmod@dividend 0002                     ___fldiv@exp 0020                _UpdateLedDisplay 135C  
                   ___lbmod@rem 0004                     ___flmul@exp 001B             __size_of__div_to_l_ 0106  
                __end_of_RedSeg FF5E                  __end_of___flge 1D8E                  __end_of___lmul 1DDA  
                __end_of___wmul 1F62  UpdateLedDisplay@CounterDataPos 0097                  __end_of_fround 0E92  
           start_initialization 1E8C        __size_ofi1_UpdateLedData 018E                     __end_of_Pin FFB7  
           __end_of__tdiv_to_l_ 196E   __end_ofUpdateLedDisplay@F5284 FF63                 ___llmod@divisor 0012  
               ___llmod@counter 0016                        ??___flge 0009                        ??___lmul 0009  
                      ??___wmul 0005                   sprintf@vd_686 00B7                     __pdataBANK0 00E2  
                      ??_fround 0026               __size_of___flpack 00C0                      fround@prec 0032  
                  ??_UpdatePins 0001               __size_of___lltofl 002E                  _UpdateLedColor 1FAC  
             __size_of___lwtofl 002A                   __pcstackBANK0 00AB                   __pcstackBANK1 0100  
           __end_of__stringdata FFFE                     sprintf@_val 00C2                     sprintf@flag 00BC  
                   sprintf@fval 00CC                     sprintf@prec 00C9              __end_of_UpdatePins 16A8  
                     __pintcode 0008                   __pmediumconst FECA                        ?___fladd 0033  
                      ?___fldiv 000F                        ?___awdiv 0007                        ?___lbdiv 0005  
                      ?___flneg 0001                        ?___awmod 0001                        ?___lbmod 0001  
                      ?___flmul 000F                        ?___flsub 0042                        ?___fltol 0042  
                      ?___lldiv 0001                        ?___llmod 000E                       __npowers_ FECB  
                   __pintcodelo 0018                     __tdiv_to_l_ 1896          __end_of_UpdateLedColor 1FB4  
                  ??__div_to_l_ 0009                        ?_isdigit 0001             i1UpdateLedData@data 0001  
                      ?_sprintf 004C                  __size_of_scale 0412          __size_of_UpdateLedData 0194  
             ??i1_UpdateLedData 0003                  ___wmul@product 0005                        _IPR1bits 000F9F  
             UpdatePins@LastPin 00EA                        _PIE1bits 000F9D                        _IPR3bits 000FA5  
                      _PIE3bits 000FA3                        i1u220_20 14D2                        i1u220_25 14C8  
                      i1u221_20 14DE                        i1u218_20 14A6                        i1u218_25 149C  
                      i1u260_20 16FA                        i1u340_20 1254                        i1u260_25 16F0  
                      i1u340_27 124A                        i1u341_20 12A2                        i1u341_27 1298  
                      i1u334_20 17CC                        i1u342_20 12D8                        i1u334_25 17C2  
                      i1u342_27 12CE                        i1u271_20 198C                        i1u343_20 1356  
                      i1u271_25 1982                        i1u343_27 134C                        i1u336_20 17F8  
                      i1u336_25 17EE                        i1u337_20 1804                        i1u273_20 19C0  
                      i1u273_25 19B6                        i1u258_20 16C6                        i1u258_25 16BC  
                      i1u339_20 120A                        i1u339_27 1200                        i1u197_20 0EB0  
                      i1u197_25 0EA6                        i1u198_20 0ED6                        i1u198_25 0ECC  
            __end_of__div_to_l_ 17AE                        i2u385_40 1372                        _RCONbits 000FD0  
                      _AdcChArr FF33        __end_of_UpdateLedDisplay 1488                      _ADCON0bits 000FC2  
                   __stringdata FFDF               ___wmul@multiplier 0001                 ?_UpdateLedColor 0001  
             ___lmul@multiplier 0001                       copy_data0 1EAC                        _GreenSeg FF42  
                      __Hparam1 0000                  UpdateLedData@i 0112                        __Lparam1 0000  
              __size_of___fladd 01A8                __size_of___fldiv 00E8                __size_of___awdiv 0094  
              __size_of___lbdiv 0034                __size_of___flneg 0024                __size_of___awmod 0084  
              __size_of___lbmod 0026                __size_of___flmul 0110                __size_of___flsub 003A  
              __size_of___fltol 00C2                __size_of___lldiv 0076                   _UpdateLedData 103A  
              __size_of___llmod 0062                        ___flpack 1A30                     _fround$1212 002E  
                   _fround$1213 002A                        ___lltofl 1EBE                     _isdigit$967 0002  
                      ___lwtofl 1EEC                      sprintf@exp 00C7                __size_of_isdigit 001C  
                      __ptext10 1F16                        __ptext11 1E58                        __ptext20 1E1E  
                      __ptext12 1488                        __ptext21 0E92                        __ptext13 1896  
                      __ptext22 1F62                        __ptext14 16A8                        __ptext31 135C  
                      __ptext23 1D42                        __ptext15 1F3C                        __ptext24 1EEC  
                      __ptext16 1EBE                        __ptext25 1D8E                        __ptext17 1CE0  
                      __ptext26 17AE                        __ptext18 1C08                        __ptext27 1A30  
                      __ptext19 196E                        __ptext28 1598                        __ptext29 1FAC  
                      __powers_ FEFF                __size_of_sprintf 0826                   __size_of_HISR 1E16  
                 __size_of_LISR 05A0                   __size_of_main 0062                  ?_UpdateLedData 010E  
         ___flmul@f3_as_product 001C                        isdigit@c 0003                        scale@scl 002A  
                      intlevel1 0000                        intlevel2 0000                       sprintf@ap 00BB  
              __tdiv_to_l_@exp1 0011                       sprintf@vd 00B3                __tdiv_to_l_@cntr 0010  
                     sprintf@sp 00CB                __tdiv_to_l_@quot 000C           UpdateLedDisplay@F5284 FF5E  
              ___lldiv@dividend 0001                   UpdatePins@pin 0098                    ?__tdiv_to_l_ 0001  
                   _AdcMeasData 0060                        sprintf@c 00D0                        sprintf@f 004C  
              ___lldiv@quotient 0009                 i1_UpdateLedData 11CE            UpdateLedDisplay@flag 0107  
 UpdateLedDisplay@CounterCatode 0096                    ___fladd@exp1 0041                    ___fladd@exp2 0040  
                  ___fladd@sign 003F  
